[
  {
    "Constant" : [

    ],
    "submodules" : [
      "_control",
      "_view",
      "avplayer",
      "button",
      "colorwell",
      "datepicker",
      "image",
      "progress",
      "slider",
      "textfield"
    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "THis submodule provides common methods and metamethods linking a variety of visual elements that can be used with `hs._asm.guitk` to build your own visual displays and input  interfaces within Hammerspoon.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "THis submodule provides common methods and metamethods linking a variety of visual elements that can be used with `hs._asm.guitk` to build your own visual displays and input  interfaces within Hammerspoon.\n\nThis module by itself provides no elements, but serves as the glue between it's submodules and the guitk window and manager objects.  Elements are defined as submodules to this and may inherit methods defined in `hs._asm.guitk.element._control` and `hs._asm.guitk.element._view`.  The documentation for each specific element will indicate if it inherits methods from one of these helper submodules.\n\nMethods invoked on element userdata objects which are not recognized by the element itself are passed up the responder chain (`hs._asm.guitk.manager` and `hs._asm.guitk`) as well, allowing you to work from the userdata which is most relevant without having to track the userdata for its supporting infrastructure separately. This will become more clear in the examples provided at a location to be determined (currently in the [..\/Examples](..\/Examples) directory of this repository folder).",
    "items" : [
      {
        "desc" : "Get or set whether or not the image holder element allows the user to cut, copy, and paste an image to or from the element.",
        "stripped_doc" : [
          "Get or set whether or not the image holder element allows the user to cut, copy, and paste an image to or from the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element:allowsCutCopyPaste([state]) -> imageObject | boolean",
        "doc" : "Get or set whether or not the image holder element allows the user to cut, copy, and paste an image to or from the element.\n\nParameters:\n * `state` - an optional boolean, default true, indicating whether or not the user can cut, copy, and paste images to or from the element.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element:allowsCutCopyPaste([state]) -> imageObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "name" : "allowsCutCopyPaste",
        "parameters" : [
          " * `state` - an optional boolean, default true, indicating whether or not the user can cut, copy, and paste images to or from the element.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not an animated GIF that is assigned to the imageObject should be animated or static.",
        "stripped_doc" : [
          "Get or set whether or not an animated GIF that is assigned to the imageObject should be animated or static.",
          ""
        ],
        "def" : "hs._asm.guitk.element:animates([state]) -> imageObject | boolean",
        "doc" : "Get or set whether or not an animated GIF that is assigned to the imageObject should be animated or static.\n\nParameters:\n * `state` - an optional boolean indicating whether or not animated GIF images can be animated.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element:animates([state]) -> imageObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "name" : "animates",
        "parameters" : [
          " * `state` - an optional boolean indicating whether or not animated GIF images can be animated.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the image holder element allows the user to drag an image or image file onto the element.",
        "stripped_doc" : [
          "Get or set whether or not the image holder element allows the user to drag an image or image file onto the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element:editable([state]) -> imageObject | boolean",
        "doc" : "Get or set whether or not the image holder element allows the user to drag an image or image file onto the element.\n\nParameters:\n * `state` - an optional boolean, default false, indicating whether or not the user can drag an image or image file onto the element.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element:editable([state]) -> imageObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "name" : "editable",
        "parameters" : [
          " * `state` - an optional boolean, default false, indicating whether or not the user can drag an image or image file onto the element.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Get or set whether or not the image holder element allows the user to cut, copy, and paste an image to or from the element.",
        "stripped_doc" : [
          "Get or set whether or not the image holder element allows the user to cut, copy, and paste an image to or from the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element:allowsCutCopyPaste([state]) -> imageObject | boolean",
        "doc" : "Get or set whether or not the image holder element allows the user to cut, copy, and paste an image to or from the element.\n\nParameters:\n * `state` - an optional boolean, default true, indicating whether or not the user can cut, copy, and paste images to or from the element.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element:allowsCutCopyPaste([state]) -> imageObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "name" : "allowsCutCopyPaste",
        "parameters" : [
          " * `state` - an optional boolean, default true, indicating whether or not the user can cut, copy, and paste images to or from the element.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not an animated GIF that is assigned to the imageObject should be animated or static.",
        "stripped_doc" : [
          "Get or set whether or not an animated GIF that is assigned to the imageObject should be animated or static.",
          ""
        ],
        "def" : "hs._asm.guitk.element:animates([state]) -> imageObject | boolean",
        "doc" : "Get or set whether or not an animated GIF that is assigned to the imageObject should be animated or static.\n\nParameters:\n * `state` - an optional boolean indicating whether or not animated GIF images can be animated.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element:animates([state]) -> imageObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "name" : "animates",
        "parameters" : [
          " * `state` - an optional boolean indicating whether or not animated GIF images can be animated.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the image holder element allows the user to drag an image or image file onto the element.",
        "stripped_doc" : [
          "Get or set whether or not the image holder element allows the user to drag an image or image file onto the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element:editable([state]) -> imageObject | boolean",
        "doc" : "Get or set whether or not the image holder element allows the user to drag an image or image file onto the element.\n\nParameters:\n * `state` - an optional boolean, default false, indicating whether or not the user can drag an image or image file onto the element.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element:editable([state]) -> imageObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "name" : "editable",
        "parameters" : [
          " * `state` - an optional boolean, default false, indicating whether or not the user can drag an image or image file onto the element.",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "name" : "hs._asm.guitk.element"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Common methods inherited by elements which act as controls. Generally these are elements which are manipulated directly by the user to supply information or trigger a desired action.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Common methods inherited by elements which act as controls. Generally these are elements which are manipulated directly by the user to supply information or trigger a desired action.\n\nCurrently, the elements which inherit these methods are:\n * hs._asm.guitk.element.button\n * hs._asm.guitk.element.colorwell\n * hs._asm.guitk.element.datepicker\n * hs._asm.guitk.element.image\n * hs._asm.guitk.element.slider\n * hs._asm.guitk.element.textfield\n\nmacOS Developer Note: Understanding this is not required for use of the methods provided by this submodule, but for those interested, some of the elements provided under `hs._asm.guitk.element` are subclasses of the macOS NSControl class; macOS methods which belong to NSControl and are not overridden or superseded by more specific or appropriate element specific methods are defined here so that they can be used by all elements which share this common ancestor.",
    "items" : [
      {
        "desc" : "Get or set whether or not the element triggers continuous callbacks when the user interacts with it.",
        "stripped_doc" : [
          "Get or set whether or not the element triggers continuous callbacks when the user interacts with it.",
          "",
          "Paramaters:",
          " * `state` - an optional boolean indicating whether or not continuous callbacks are generated for the element when the user interacts with it.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:continuous([state]) -> elementObject | current value",
        "doc" : "Get or set whether or not the element triggers continuous callbacks when the user interacts with it.\n\nParamaters:\n * `state` - an optional boolean indicating whether or not continuous callbacks are generated for the element when the user interacts with it.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * The exact effect of this method depends upon the type of element; for example with the color well setting this to true will cause a callback as the user drags the mouse around in the color wheel; for a textfield this determines whether a callback occurs after each character is entered or deleted or just when the user enters or exits the textfield.",
        "notes" : [
          " * The exact effect of this method depends upon the type of element; for example with the color well setting this to true will cause a callback as the user drags the mouse around in the color wheel; for a textfield this determines whether a callback occurs after each character is entered or deleted or just when the user enters or exits the textfield."
        ],
        "signature" : "hs._asm.guitk.element._control:continuous([state]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "continuous",
        "parameters" : [

        ]
      },
      {
        "desc" : "Get or set the level of details in terms of the expected size of the element",
        "stripped_doc" : [
          "Get or set the level of details in terms of the expected size of the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:controlSize([size]) -> elementObject | current value",
        "doc" : "Get or set the level of details in terms of the expected size of the element\n\nParameters:\n * `size` - an optional string specifying the size, in a general way, necessary to properly display the element.  Valid strings are as follows:\n   * \"regular\" - present the element in its normal default size\n   * \"small\"   - present the element in a more compact form; for example when a windows toolbar offers the \"Use small size\" option.\n   * \"mini\"    - present the element in an even smaller form\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * The exact effect this has on each element is type specific and may change the look of the element in other ways as well, such as reducing or removing borders for buttons -- the intent is provide a differing level of detail appropriate to the chosen element size; it is still incumbent upon you to select an appropriate sized font or frame size to take advantage of the level of detail provided.",
        "notes" : [
          " * The exact effect this has on each element is type specific and may change the look of the element in other ways as well, such as reducing or removing borders for buttons -- the intent is provide a differing level of detail appropriate to the chosen element size; it is still incumbent upon you to select an appropriate sized font or frame size to take advantage of the level of detail provided."
        ],
        "signature" : "hs._asm.guitk.element._control:controlSize([size]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "controlSize",
        "parameters" : [
          " * `size` - an optional string specifying the size, in a general way, necessary to properly display the element.  Valid strings are as follows:",
          "   * \"regular\" - present the element in its normal default size",
          "   * \"small\"   - present the element in a more compact form; for example when a windows toolbar offers the \"Use small size\" option.",
          "   * \"mini\"    - present the element in an even smaller form",
          ""
        ]
      },
      {
        "desc" : "Get or set the tint for the element",
        "stripped_doc" : [
          "Get or set the tint for the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:controlTint([tint]) -> elementObject | current value",
        "doc" : "Get or set the tint for the element\n\nParameters:\n * `tint` - an optional string specifying the tint of the element's visual components.  Valid strings are as follows:\n   * \"default\"\n   * \"blue\"\n   * \"graphite\"\n   * \"clear\"\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * This method of providing differentiation between elements was more prominent in earlier versions of macOS and may have little or no effect on most visual elements in the current os.",
        "notes" : [
          " * This method of providing differentiation between elements was more prominent in earlier versions of macOS and may have little or no effect on most visual elements in the current os."
        ],
        "signature" : "hs._asm.guitk.element._control:controlTint([tint]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "controlTint",
        "parameters" : [
          " * `tint` - an optional string specifying the tint of the element's visual components.  Valid strings are as follows:",
          "   * \"default\"",
          "   * \"blue\"",
          "   * \"graphite\"",
          "   * \"clear\"",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the element is currently enabled.",
        "stripped_doc" : [
          "Get or set whether or not the element is currently enabled.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:enabled([state]) -> elementObject | current value",
        "doc" : "Get or set whether or not the element is currently enabled.\n\nParameters:\n * `state` - an optional boolean indicating whether or not the element is enabled.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._control:enabled([state]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value"
        ],
        "name" : "enabled",
        "parameters" : [
          " * `state` - an optional boolean indicating whether or not the element is enabled.",
          ""
        ]
      },
      {
        "desc" : "Get or set the font used for displaying text for the element.",
        "stripped_doc" : [
          "Get or set the font used for displaying text for the element.",
          "",
          "Paramaters:",
          " * `font` - an optional table specifying a font as defined in `hs.styledtext`.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:font([font]) -> elementObject | current value",
        "doc" : "Get or set the font used for displaying text for the element.\n\nParamaters:\n * `font` - an optional table specifying a font as defined in `hs.styledtext`.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * a font table is defined as having two key-value pairs: `name` specifying the name of the font as a string and `size` specifying the font size as a number.",
        "notes" : [
          " * a font table is defined as having two key-value pairs: `name` specifying the name of the font as a string and `size` specifying the font size as a number."
        ],
        "signature" : "hs._asm.guitk.element._control:font([font]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "font",
        "parameters" : [

        ]
      },
      {
        "desc" : "Get or set whether or not the element has a highlighted appearance.",
        "stripped_doc" : [
          "Get or set whether or not the element has a highlighted appearance.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:highlighted([state]) -> elementObject | current value",
        "doc" : "Get or set whether or not the element has a highlighted appearance.\n\nParameters:\n * `state` - an optional boolean indicating whether or not the element has a highlighted appearance.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Not all elements have a highlighted appearance and this method will have no effect in such cases.",
        "notes" : [
          " * Not all elements have a highlighted appearance and this method will have no effect in such cases."
        ],
        "signature" : "hs._asm.guitk.element._control:highlighted([state]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "highlighted",
        "parameters" : [
          " * `state` - an optional boolean indicating whether or not the element has a highlighted appearance.",
          ""
        ]
      },
      {
        "desc" : "Get or set the linebreak mode used for displaying text for the element.",
        "stripped_doc" : [
          "Get or set the linebreak mode used for displaying text for the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:lineBreakMode([mode]) -> elementObject | string",
        "doc" : "Get or set the linebreak mode used for displaying text for the element.\n\nParameters:\n * `mode` - an optional string specifying the line break mode for the element. Must be one of:\n   * \"wordWrap\"       - Wrapping occurs at word boundaries, unless the word itself doesn’t fit on a single line.\n   * \"charWrap\"       - Wrapping occurs before the first character that doesn’t fit.\n   * \"clip\"           - Lines are simply not drawn past the edge of the text container.\n   * \"truncateHead\"   - The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph.\n   * \"truncateTail\"   - The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph.\n   * \"truncateMiddle\" - The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph.\n\nReturns:\n * if a value is provided, returns the elementObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._control:lineBreakMode([mode]) -> elementObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the elementObject ; otherwise returns the current value."
        ],
        "name" : "lineBreakMode",
        "parameters" : [
          " * `mode` - an optional string specifying the line break mode for the element. Must be one of:",
          "   * \"wordWrap\"       - Wrapping occurs at word boundaries, unless the word itself doesn’t fit on a single line.",
          "   * \"charWrap\"       - Wrapping occurs before the first character that doesn’t fit.",
          "   * \"clip\"           - Lines are simply not drawn past the edge of the text container.",
          "   * \"truncateHead\"   - The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph.",
          "   * \"truncateTail\"   - The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph.",
          "   * \"truncateMiddle\" - The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the element restricts layout and rendering of text to a single line.",
        "stripped_doc" : [
          "Get or set whether the element restricts layout and rendering of text to a single line.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:singleLineMode([state]) -> elementObject | boolean",
        "doc" : "Get or set whether the element restricts layout and rendering of text to a single line.\n\nParameters:\n * `state` - an optional boolean specifying whether the element restricts text to a single line.\n\nReturns:\n * if a value is provided, returns the element ; otherwise returns the current value.\n\nNotes:\n * When this is set to true, text layout and rendering is restricted to a single line. The element will interpret [hs._asm.guitk.element._control:lineBreakMode](#lineBreakMode) modes of \"charWrap\" and \"wordWrap\" as if they were \"clip\" and an editable textfield will ignore key binding commands that insert paragraph and line separators.",
        "notes" : [
          " * When this is set to true, text layout and rendering is restricted to a single line. The element will interpret [hs._asm.guitk.element._control:lineBreakMode](#lineBreakMode) modes of \"charWrap\" and \"wordWrap\" as if they were \"clip\" and an editable textfield will ignore key binding commands that insert paragraph and line separators."
        ],
        "signature" : "hs._asm.guitk.element._control:singleLineMode([state]) -> elementObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the element ; otherwise returns the current value.",
          ""
        ],
        "name" : "singleLineMode",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the element restricts text to a single line.",
          ""
        ]
      },
      {
        "desc" : "Get or set the alignment of text which is displayed by the element, often as a label or description.",
        "stripped_doc" : [
          "Get or set the alignment of text which is displayed by the element, often as a label or description.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:textAlignment([alignment]) -> elementObject | current value",
        "doc" : "Get or set the alignment of text which is displayed by the element, often as a label or description.\n\nParameters:\n * `alignment` - an optional string specifying the alignment of the text being displayed by the element. Valid strings are as follows:\n   * \"left\"      - Align text along the left edge\n   * \"center\"    - Align text equally along both sides of the center line\n   * \"right\"     - Align text along the right edge\n   * \"justified\" - Fully justify the text so that the last line in a paragraph is natural aligned\n   * \"natural\"   - Use the default alignment associated with the current locale. The default alignment for left-to-right scripts is \"left\", and the default alignment for right-to-left scripts is \"right\".\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._control:textAlignment([alignment]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value"
        ],
        "name" : "textAlignment",
        "parameters" : [
          " * `alignment` - an optional string specifying the alignment of the text being displayed by the element. Valid strings are as follows:",
          "   * \"left\"      - Align text along the left edge",
          "   * \"center\"    - Align text equally along both sides of the center line",
          "   * \"right\"     - Align text along the right edge",
          "   * \"justified\" - Fully justify the text so that the last line in a paragraph is natural aligned",
          "   * \"natural\"   - Use the default alignment associated with the current locale. The default alignment for left-to-right scripts is \"left\", and the default alignment for right-to-left scripts is \"right\".",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Get or set the alignment of text which is displayed by the element, often as a label or description.",
        "stripped_doc" : [
          "Get or set the alignment of text which is displayed by the element, often as a label or description.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:textAlignment([alignment]) -> elementObject | current value",
        "doc" : "Get or set the alignment of text which is displayed by the element, often as a label or description.\n\nParameters:\n * `alignment` - an optional string specifying the alignment of the text being displayed by the element. Valid strings are as follows:\n   * \"left\"      - Align text along the left edge\n   * \"center\"    - Align text equally along both sides of the center line\n   * \"right\"     - Align text along the right edge\n   * \"justified\" - Fully justify the text so that the last line in a paragraph is natural aligned\n   * \"natural\"   - Use the default alignment associated with the current locale. The default alignment for left-to-right scripts is \"left\", and the default alignment for right-to-left scripts is \"right\".\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._control:textAlignment([alignment]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value"
        ],
        "name" : "textAlignment",
        "parameters" : [
          " * `alignment` - an optional string specifying the alignment of the text being displayed by the element. Valid strings are as follows:",
          "   * \"left\"      - Align text along the left edge",
          "   * \"center\"    - Align text equally along both sides of the center line",
          "   * \"right\"     - Align text along the right edge",
          "   * \"justified\" - Fully justify the text so that the last line in a paragraph is natural aligned",
          "   * \"natural\"   - Use the default alignment associated with the current locale. The default alignment for left-to-right scripts is \"left\", and the default alignment for right-to-left scripts is \"right\".",
          ""
        ]
      },
      {
        "desc" : "Get or set the tint for the element",
        "stripped_doc" : [
          "Get or set the tint for the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:controlTint([tint]) -> elementObject | current value",
        "doc" : "Get or set the tint for the element\n\nParameters:\n * `tint` - an optional string specifying the tint of the element's visual components.  Valid strings are as follows:\n   * \"default\"\n   * \"blue\"\n   * \"graphite\"\n   * \"clear\"\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * This method of providing differentiation between elements was more prominent in earlier versions of macOS and may have little or no effect on most visual elements in the current os.",
        "notes" : [
          " * This method of providing differentiation between elements was more prominent in earlier versions of macOS and may have little or no effect on most visual elements in the current os."
        ],
        "signature" : "hs._asm.guitk.element._control:controlTint([tint]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "controlTint",
        "parameters" : [
          " * `tint` - an optional string specifying the tint of the element's visual components.  Valid strings are as follows:",
          "   * \"default\"",
          "   * \"blue\"",
          "   * \"graphite\"",
          "   * \"clear\"",
          ""
        ]
      },
      {
        "desc" : "Get or set the level of details in terms of the expected size of the element",
        "stripped_doc" : [
          "Get or set the level of details in terms of the expected size of the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:controlSize([size]) -> elementObject | current value",
        "doc" : "Get or set the level of details in terms of the expected size of the element\n\nParameters:\n * `size` - an optional string specifying the size, in a general way, necessary to properly display the element.  Valid strings are as follows:\n   * \"regular\" - present the element in its normal default size\n   * \"small\"   - present the element in a more compact form; for example when a windows toolbar offers the \"Use small size\" option.\n   * \"mini\"    - present the element in an even smaller form\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * The exact effect this has on each element is type specific and may change the look of the element in other ways as well, such as reducing or removing borders for buttons -- the intent is provide a differing level of detail appropriate to the chosen element size; it is still incumbent upon you to select an appropriate sized font or frame size to take advantage of the level of detail provided.",
        "notes" : [
          " * The exact effect this has on each element is type specific and may change the look of the element in other ways as well, such as reducing or removing borders for buttons -- the intent is provide a differing level of detail appropriate to the chosen element size; it is still incumbent upon you to select an appropriate sized font or frame size to take advantage of the level of detail provided."
        ],
        "signature" : "hs._asm.guitk.element._control:controlSize([size]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "controlSize",
        "parameters" : [
          " * `size` - an optional string specifying the size, in a general way, necessary to properly display the element.  Valid strings are as follows:",
          "   * \"regular\" - present the element in its normal default size",
          "   * \"small\"   - present the element in a more compact form; for example when a windows toolbar offers the \"Use small size\" option.",
          "   * \"mini\"    - present the element in an even smaller form",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the element has a highlighted appearance.",
        "stripped_doc" : [
          "Get or set whether or not the element has a highlighted appearance.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:highlighted([state]) -> elementObject | current value",
        "doc" : "Get or set whether or not the element has a highlighted appearance.\n\nParameters:\n * `state` - an optional boolean indicating whether or not the element has a highlighted appearance.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Not all elements have a highlighted appearance and this method will have no effect in such cases.",
        "notes" : [
          " * Not all elements have a highlighted appearance and this method will have no effect in such cases."
        ],
        "signature" : "hs._asm.guitk.element._control:highlighted([state]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "highlighted",
        "parameters" : [
          " * `state` - an optional boolean indicating whether or not the element has a highlighted appearance.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the element is currently enabled.",
        "stripped_doc" : [
          "Get or set whether or not the element is currently enabled.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:enabled([state]) -> elementObject | current value",
        "doc" : "Get or set whether or not the element is currently enabled.\n\nParameters:\n * `state` - an optional boolean indicating whether or not the element is enabled.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._control:enabled([state]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value"
        ],
        "name" : "enabled",
        "parameters" : [
          " * `state` - an optional boolean indicating whether or not the element is enabled.",
          ""
        ]
      },
      {
        "desc" : "Get or set the font used for displaying text for the element.",
        "stripped_doc" : [
          "Get or set the font used for displaying text for the element.",
          "",
          "Paramaters:",
          " * `font` - an optional table specifying a font as defined in `hs.styledtext`.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:font([font]) -> elementObject | current value",
        "doc" : "Get or set the font used for displaying text for the element.\n\nParamaters:\n * `font` - an optional table specifying a font as defined in `hs.styledtext`.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * a font table is defined as having two key-value pairs: `name` specifying the name of the font as a string and `size` specifying the font size as a number.",
        "notes" : [
          " * a font table is defined as having two key-value pairs: `name` specifying the name of the font as a string and `size` specifying the font size as a number."
        ],
        "signature" : "hs._asm.guitk.element._control:font([font]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "font",
        "parameters" : [

        ]
      },
      {
        "desc" : "Get or set the linebreak mode used for displaying text for the element.",
        "stripped_doc" : [
          "Get or set the linebreak mode used for displaying text for the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:lineBreakMode([mode]) -> elementObject | string",
        "doc" : "Get or set the linebreak mode used for displaying text for the element.\n\nParameters:\n * `mode` - an optional string specifying the line break mode for the element. Must be one of:\n   * \"wordWrap\"       - Wrapping occurs at word boundaries, unless the word itself doesn’t fit on a single line.\n   * \"charWrap\"       - Wrapping occurs before the first character that doesn’t fit.\n   * \"clip\"           - Lines are simply not drawn past the edge of the text container.\n   * \"truncateHead\"   - The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph.\n   * \"truncateTail\"   - The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph.\n   * \"truncateMiddle\" - The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph.\n\nReturns:\n * if a value is provided, returns the elementObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._control:lineBreakMode([mode]) -> elementObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the elementObject ; otherwise returns the current value."
        ],
        "name" : "lineBreakMode",
        "parameters" : [
          " * `mode` - an optional string specifying the line break mode for the element. Must be one of:",
          "   * \"wordWrap\"       - Wrapping occurs at word boundaries, unless the word itself doesn’t fit on a single line.",
          "   * \"charWrap\"       - Wrapping occurs before the first character that doesn’t fit.",
          "   * \"clip\"           - Lines are simply not drawn past the edge of the text container.",
          "   * \"truncateHead\"   - The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph.",
          "   * \"truncateTail\"   - The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph.",
          "   * \"truncateMiddle\" - The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the element triggers continuous callbacks when the user interacts with it.",
        "stripped_doc" : [
          "Get or set whether or not the element triggers continuous callbacks when the user interacts with it.",
          "",
          "Paramaters:",
          " * `state` - an optional boolean indicating whether or not continuous callbacks are generated for the element when the user interacts with it.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:continuous([state]) -> elementObject | current value",
        "doc" : "Get or set whether or not the element triggers continuous callbacks when the user interacts with it.\n\nParamaters:\n * `state` - an optional boolean indicating whether or not continuous callbacks are generated for the element when the user interacts with it.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * The exact effect of this method depends upon the type of element; for example with the color well setting this to true will cause a callback as the user drags the mouse around in the color wheel; for a textfield this determines whether a callback occurs after each character is entered or deleted or just when the user enters or exits the textfield.",
        "notes" : [
          " * The exact effect of this method depends upon the type of element; for example with the color well setting this to true will cause a callback as the user drags the mouse around in the color wheel; for a textfield this determines whether a callback occurs after each character is entered or deleted or just when the user enters or exits the textfield."
        ],
        "signature" : "hs._asm.guitk.element._control:continuous([state]) -> elementObject | current value",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "continuous",
        "parameters" : [

        ]
      },
      {
        "desc" : "Get or set whether the element restricts layout and rendering of text to a single line.",
        "stripped_doc" : [
          "Get or set whether the element restricts layout and rendering of text to a single line.",
          ""
        ],
        "def" : "hs._asm.guitk.element._control:singleLineMode([state]) -> elementObject | boolean",
        "doc" : "Get or set whether the element restricts layout and rendering of text to a single line.\n\nParameters:\n * `state` - an optional boolean specifying whether the element restricts text to a single line.\n\nReturns:\n * if a value is provided, returns the element ; otherwise returns the current value.\n\nNotes:\n * When this is set to true, text layout and rendering is restricted to a single line. The element will interpret [hs._asm.guitk.element._control:lineBreakMode](#lineBreakMode) modes of \"charWrap\" and \"wordWrap\" as if they were \"clip\" and an editable textfield will ignore key binding commands that insert paragraph and line separators.",
        "notes" : [
          " * When this is set to true, text layout and rendering is restricted to a single line. The element will interpret [hs._asm.guitk.element._control:lineBreakMode](#lineBreakMode) modes of \"charWrap\" and \"wordWrap\" as if they were \"clip\" and an editable textfield will ignore key binding commands that insert paragraph and line separators."
        ],
        "signature" : "hs._asm.guitk.element._control:singleLineMode([state]) -> elementObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the element ; otherwise returns the current value.",
          ""
        ],
        "name" : "singleLineMode",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the element restricts text to a single line.",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "name" : "hs._asm.guitk.element._control"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Common methods inherited by all elements defined as submodules. This does not include elements which come from other Hammerspoon modules (currently this is limited to canvas objects, but may be extended to include webview and possibly chooser.)",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Common methods inherited by all elements defined as submodules. This does not include elements which come from other Hammerspoon modules (currently this is limited to canvas objects, but may be extended to include webview and possibly chooser.)\n\nmacOS Developer Note: Understanding this is not required for use of the methods provided by this submodule, but for those interested, `hs._asm.guitk` works by providing a framework for displaying macOS objects which are subclasses of the NSView class; macOS methods which belong to NSView and are not overridden or superseded by more specific or appropriate element specific methods are defined here so that they can be used by all elements which share this common ancestor.",
    "items" : [
      {
        "desc" : "Get the parent of the current element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object.",
        "stripped_doc" : [
          "Get the parent of the current element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:_nextResponder() -> userdata",
        "doc" : "Get the parent of the current element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object.\n\nParameters:\n * None\n\nReturns:\n * the userdata representing the parent container of the element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object or nil if the element is currently not assigned to a window or manager or if the parent is not controllable through Hammerspoon.\n\nNotes:\n * The metamethods for `hs._asm.guitk.element` are designed so that you usually shouldn't need to access this method directly very often.\n * The name \"nextResponder\" comes from the macOS user interface internal organization and refers to the object which is further up the responder chain when determining the target for user activity.",
        "notes" : [
          " * The metamethods for `hs._asm.guitk.element` are designed so that you usually shouldn't need to access this method directly very often.",
          " * The name \"nextResponder\" comes from the macOS user interface internal organization and refers to the object which is further up the responder chain when determining the target for user activity."
        ],
        "signature" : "hs._asm.guitk.element._view:_nextResponder() -> userdata",
        "type" : "Method",
        "returns" : [
          " * the userdata representing the parent container of the element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object or nil if the element is currently not assigned to a window or manager or if the parent is not controllable through Hammerspoon.",
          ""
        ],
        "name" : "_nextResponder",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set the alpha level of the element.",
        "stripped_doc" : [
          "Get or set the alpha level of the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:alphaValue([alpha]) -> elementObject | number",
        "doc" : "Get or set the alpha level of the element.\n\nParameters:\n * `alpha` - an optional number, default 1.0, specifying the alpha level (0.0 - 1.0, inclusive) for the element.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._view:alphaValue([alpha]) -> elementObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value"
        ],
        "name" : "alphaValue",
        "parameters" : [
          " * `alpha` - an optional number, default 1.0, specifying the alpha level (0.0 - 1.0, inclusive) for the element.",
          ""
        ]
      },
      {
        "desc" : "Returns a table with `h` and `w` keys specifying the element's fitting size as defined by macOS and the element's current properties.",
        "stripped_doc" : [
          "Returns a table with `h` and `w` keys specifying the element's fitting size as defined by macOS and the element's current properties.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:fittingSize() -> table",
        "doc" : "Returns a table with `h` and `w` keys specifying the element's fitting size as defined by macOS and the element's current properties.\n\nParameters:\n * None\n\nReturns:\n * a table with `h` and `w` keys specifying the elements fitting size\n\nNotes:\n * The dimensions provided can be used to determine a minimum size for the element to display fully based on its current properties and may change as these change.\n * Not all elements provide one or both of these fields; in such a case, the value for the missing or unspecified field will be 0.\n * If you do not specify an elements height or width with `hs._asm.guitk.manager:elementFrameDetails`, with the elements constructor, or with [hs._asm.guitk.element._view:frameSize](#frameSize), the value returned by this method will be used instead; in cases where a specific dimension is not defined by this method, you should make sure to specify it or the element may not be visible.",
        "notes" : [
          " * The dimensions provided can be used to determine a minimum size for the element to display fully based on its current properties and may change as these change.",
          " * Not all elements provide one or both of these fields; in such a case, the value for the missing or unspecified field will be 0.",
          " * If you do not specify an elements height or width with `hs._asm.guitk.manager:elementFrameDetails`, with the elements constructor, or with [hs._asm.guitk.element._view:frameSize](#frameSize), the value returned by this method will be used instead; in cases where a specific dimension is not defined by this method, you should make sure to specify it or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element._view:fittingSize() -> table",
        "type" : "Method",
        "returns" : [
          " * a table with `h` and `w` keys specifying the elements fitting size",
          ""
        ],
        "name" : "fittingSize",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set the focus ring type for the element",
        "stripped_doc" : [
          "Get or set the focus ring type for the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:focusRingType([type]) -> elementObject | string",
        "doc" : "Get or set the focus ring type for the element\n\nParameters:\n * `type` - an optional string specifying the focus ring type for the element.  Valid strings are as follows:\n   * \"default\"  - The default focus ring behavior for the element will be used when the element is the input focus; usually this is identical to \"exterior\".\n   * \"none\"     - No focus ring will be drawn around the element when it is the input focus\n   * \"Exterior\" - The standard Aqua focus ring will be drawn around the element when it is the input focus\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Setting this for an element that cannot be an active element has no effect.\n * When an element is rotated with [hs._asm.guitk.element._view:rotation](#rotation), the focus ring may not appear properly; if you are using angles other then the four cardinal directions (0, 90, 180, or 270), it may be visually more appropriate to set this to \"none\".",
        "notes" : [
          " * Setting this for an element that cannot be an active element has no effect.",
          " * When an element is rotated with [hs._asm.guitk.element._view:rotation](#rotation), the focus ring may not appear properly; if you are using angles other then the four cardinal directions (0, 90, 180, or 270), it may be visually more appropriate to set this to \"none\"."
        ],
        "signature" : "hs._asm.guitk.element._view:focusRingType([type]) -> elementObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "focusRingType",
        "parameters" : [
          " * `type` - an optional string specifying the focus ring type for the element.  Valid strings are as follows:",
          "   * \"default\"  - The default focus ring behavior for the element will be used when the element is the input focus; usually this is identical to \"exterior\".",
          "   * \"none\"     - No focus ring will be drawn around the element when it is the input focus",
          "   * \"Exterior\" - The standard Aqua focus ring will be drawn around the element when it is the input focus",
          ""
        ]
      },
      {
        "desc" : "Get or set the frame size of the element.",
        "stripped_doc" : [
          "Get or set the frame size of the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:frameSize([size]) -> elementObject | table",
        "doc" : "Get or set the frame size of the element.\n\nParameters:\n * `size` - a size-table specifying the height and width of the element's frame\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * a size-table is a table with key-value pairs specifying the size (keys `h` and `w`) the element should be resized to.\n * if the element is assigned directly to an `hs._asm.guitk` window object, setting the frame will have no effect.\n\n * in general, it is more useful to adjust the element's size with `hs._asm.guitk.manager:elementFrameDetails` because this supports percentages and auto-resizing based on the size of the element's parent.  This method may be useful, however, when pre-building content before it has been added to a manager and the size cannot be assigned with its constructor.",
        "notes" : [
          " * a size-table is a table with key-value pairs specifying the size (keys `h` and `w`) the element should be resized to.",
          " * if the element is assigned directly to an `hs._asm.guitk` window object, setting the frame will have no effect.",
          "",
          " * in general, it is more useful to adjust the element's size with `hs._asm.guitk.manager:elementFrameDetails` because this supports percentages and auto-resizing based on the size of the element's parent.  This method may be useful, however, when pre-building content before it has been added to a manager and the size cannot be assigned with its constructor."
        ],
        "signature" : "hs._asm.guitk.element._view:frameSize([size]) -> elementObject | table",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "frameSize",
        "parameters" : [
          " * `size` - a size-table specifying the height and width of the element's frame",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the element is currently hidden",
        "stripped_doc" : [
          "Get or set whether or not the element is currently hidden",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:hidden([state | nil]) -> elementObject | boolean",
        "doc" : "Get or set whether or not the element is currently hidden\n\nParameters:\n * `state` - an optional boolean specifying whether the element should be hidden. If you specify an explicit nil, this method will return whether or not this element *or any of its parents* are currently hidden.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * If no argument is provided, this method will return whether or not the element itself has been explicitly hidden; when an explicit nil is provided as the argument, this method will return whether or not this element or any of its parent objects are hidden, since hiding the parent will also hide all of the elements of the parent.\n\n * When used as a property through the `hs._asm.guitk.manager` metamethods, this property can only get or set whether or not the element itself is explicitly hidden.",
        "notes" : [
          " * If no argument is provided, this method will return whether or not the element itself has been explicitly hidden; when an explicit nil is provided as the argument, this method will return whether or not this element or any of its parent objects are hidden, since hiding the parent will also hide all of the elements of the parent.",
          "",
          " * When used as a property through the `hs._asm.guitk.manager` metamethods, this property can only get or set whether or not the element itself is explicitly hidden."
        ],
        "signature" : "hs._asm.guitk.element._view:hidden([state | nil]) -> elementObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "hidden",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the element should be hidden. If you specify an explicit nil, this method will return whether or not this element *or any of its parents* are currently hidden.",
          ""
        ]
      },
      {
        "desc" : "Get or set the rotation of the element about its center.",
        "stripped_doc" : [
          "Get or set the rotation of the element about its center.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:rotation([angle]) -> elementObject | number",
        "doc" : "Get or set the rotation of the element about its center.\n\nParameters:\n * `angle` - an optional number representing the number of degrees the element should be rotated clockwise around its center\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Not all elements rotate cleanly, e.g. button elements with an image in them may skew the image or alter its size depending upon the specific angle of rotation. At this time it is not known if this can be easily addressed or not.",
        "notes" : [
          " * Not all elements rotate cleanly, e.g. button elements with an image in them may skew the image or alter its size depending upon the specific angle of rotation. At this time it is not known if this can be easily addressed or not."
        ],
        "signature" : "hs._asm.guitk.element._view:rotation([angle]) -> elementObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "rotation",
        "parameters" : [
          " * `angle` - an optional number representing the number of degrees the element should be rotated clockwise around its center",
          ""
        ]
      },
      {
        "desc" : "Get or set the tooltip for the element",
        "stripped_doc" : [
          "Get or set the tooltip for the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:tooltip([tooltip]) -> elementObject | string",
        "doc" : "Get or set the tooltip for the element\n\nParameters:\n * `tooltip` - a string, or nil to remove, specifying the tooltip to display when the mouse pointer hovers over the element\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Tooltips are displayed when the window is active and the mouse pointer hovers over an element.",
        "notes" : [
          " * Tooltips are displayed when the window is active and the mouse pointer hovers over an element."
        ],
        "signature" : "hs._asm.guitk.element._view:tooltip([tooltip]) -> elementObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "tooltip",
        "parameters" : [
          " * `tooltip` - a string, or nil to remove, specifying the tooltip to display when the mouse pointer hovers over the element",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Returns a table with `h` and `w` keys specifying the element's fitting size as defined by macOS and the element's current properties.",
        "stripped_doc" : [
          "Returns a table with `h` and `w` keys specifying the element's fitting size as defined by macOS and the element's current properties.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:fittingSize() -> table",
        "doc" : "Returns a table with `h` and `w` keys specifying the element's fitting size as defined by macOS and the element's current properties.\n\nParameters:\n * None\n\nReturns:\n * a table with `h` and `w` keys specifying the elements fitting size\n\nNotes:\n * The dimensions provided can be used to determine a minimum size for the element to display fully based on its current properties and may change as these change.\n * Not all elements provide one or both of these fields; in such a case, the value for the missing or unspecified field will be 0.\n * If you do not specify an elements height or width with `hs._asm.guitk.manager:elementFrameDetails`, with the elements constructor, or with [hs._asm.guitk.element._view:frameSize](#frameSize), the value returned by this method will be used instead; in cases where a specific dimension is not defined by this method, you should make sure to specify it or the element may not be visible.",
        "notes" : [
          " * The dimensions provided can be used to determine a minimum size for the element to display fully based on its current properties and may change as these change.",
          " * Not all elements provide one or both of these fields; in such a case, the value for the missing or unspecified field will be 0.",
          " * If you do not specify an elements height or width with `hs._asm.guitk.manager:elementFrameDetails`, with the elements constructor, or with [hs._asm.guitk.element._view:frameSize](#frameSize), the value returned by this method will be used instead; in cases where a specific dimension is not defined by this method, you should make sure to specify it or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element._view:fittingSize() -> table",
        "type" : "Method",
        "returns" : [
          " * a table with `h` and `w` keys specifying the elements fitting size",
          ""
        ],
        "name" : "fittingSize",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set the frame size of the element.",
        "stripped_doc" : [
          "Get or set the frame size of the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:frameSize([size]) -> elementObject | table",
        "doc" : "Get or set the frame size of the element.\n\nParameters:\n * `size` - a size-table specifying the height and width of the element's frame\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * a size-table is a table with key-value pairs specifying the size (keys `h` and `w`) the element should be resized to.\n * if the element is assigned directly to an `hs._asm.guitk` window object, setting the frame will have no effect.\n\n * in general, it is more useful to adjust the element's size with `hs._asm.guitk.manager:elementFrameDetails` because this supports percentages and auto-resizing based on the size of the element's parent.  This method may be useful, however, when pre-building content before it has been added to a manager and the size cannot be assigned with its constructor.",
        "notes" : [
          " * a size-table is a table with key-value pairs specifying the size (keys `h` and `w`) the element should be resized to.",
          " * if the element is assigned directly to an `hs._asm.guitk` window object, setting the frame will have no effect.",
          "",
          " * in general, it is more useful to adjust the element's size with `hs._asm.guitk.manager:elementFrameDetails` because this supports percentages and auto-resizing based on the size of the element's parent.  This method may be useful, however, when pre-building content before it has been added to a manager and the size cannot be assigned with its constructor."
        ],
        "signature" : "hs._asm.guitk.element._view:frameSize([size]) -> elementObject | table",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "frameSize",
        "parameters" : [
          " * `size` - a size-table specifying the height and width of the element's frame",
          ""
        ]
      },
      {
        "desc" : "Get the parent of the current element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object.",
        "stripped_doc" : [
          "Get the parent of the current element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:_nextResponder() -> userdata",
        "doc" : "Get the parent of the current element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object.\n\nParameters:\n * None\n\nReturns:\n * the userdata representing the parent container of the element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object or nil if the element is currently not assigned to a window or manager or if the parent is not controllable through Hammerspoon.\n\nNotes:\n * The metamethods for `hs._asm.guitk.element` are designed so that you usually shouldn't need to access this method directly very often.\n * The name \"nextResponder\" comes from the macOS user interface internal organization and refers to the object which is further up the responder chain when determining the target for user activity.",
        "notes" : [
          " * The metamethods for `hs._asm.guitk.element` are designed so that you usually shouldn't need to access this method directly very often.",
          " * The name \"nextResponder\" comes from the macOS user interface internal organization and refers to the object which is further up the responder chain when determining the target for user activity."
        ],
        "signature" : "hs._asm.guitk.element._view:_nextResponder() -> userdata",
        "type" : "Method",
        "returns" : [
          " * the userdata representing the parent container of the element, usually a `hs._asm.guitk.manager` or `hs._asm.guitk` userdata object or nil if the element is currently not assigned to a window or manager or if the parent is not controllable through Hammerspoon.",
          ""
        ],
        "name" : "_nextResponder",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set the tooltip for the element",
        "stripped_doc" : [
          "Get or set the tooltip for the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:tooltip([tooltip]) -> elementObject | string",
        "doc" : "Get or set the tooltip for the element\n\nParameters:\n * `tooltip` - a string, or nil to remove, specifying the tooltip to display when the mouse pointer hovers over the element\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Tooltips are displayed when the window is active and the mouse pointer hovers over an element.",
        "notes" : [
          " * Tooltips are displayed when the window is active and the mouse pointer hovers over an element."
        ],
        "signature" : "hs._asm.guitk.element._view:tooltip([tooltip]) -> elementObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "tooltip",
        "parameters" : [
          " * `tooltip` - a string, or nil to remove, specifying the tooltip to display when the mouse pointer hovers over the element",
          ""
        ]
      },
      {
        "desc" : "Get or set the rotation of the element about its center.",
        "stripped_doc" : [
          "Get or set the rotation of the element about its center.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:rotation([angle]) -> elementObject | number",
        "doc" : "Get or set the rotation of the element about its center.\n\nParameters:\n * `angle` - an optional number representing the number of degrees the element should be rotated clockwise around its center\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Not all elements rotate cleanly, e.g. button elements with an image in them may skew the image or alter its size depending upon the specific angle of rotation. At this time it is not known if this can be easily addressed or not.",
        "notes" : [
          " * Not all elements rotate cleanly, e.g. button elements with an image in them may skew the image or alter its size depending upon the specific angle of rotation. At this time it is not known if this can be easily addressed or not."
        ],
        "signature" : "hs._asm.guitk.element._view:rotation([angle]) -> elementObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "rotation",
        "parameters" : [
          " * `angle` - an optional number representing the number of degrees the element should be rotated clockwise around its center",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the element is currently hidden",
        "stripped_doc" : [
          "Get or set whether or not the element is currently hidden",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:hidden([state | nil]) -> elementObject | boolean",
        "doc" : "Get or set whether or not the element is currently hidden\n\nParameters:\n * `state` - an optional boolean specifying whether the element should be hidden. If you specify an explicit nil, this method will return whether or not this element *or any of its parents* are currently hidden.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * If no argument is provided, this method will return whether or not the element itself has been explicitly hidden; when an explicit nil is provided as the argument, this method will return whether or not this element or any of its parent objects are hidden, since hiding the parent will also hide all of the elements of the parent.\n\n * When used as a property through the `hs._asm.guitk.manager` metamethods, this property can only get or set whether or not the element itself is explicitly hidden.",
        "notes" : [
          " * If no argument is provided, this method will return whether or not the element itself has been explicitly hidden; when an explicit nil is provided as the argument, this method will return whether or not this element or any of its parent objects are hidden, since hiding the parent will also hide all of the elements of the parent.",
          "",
          " * When used as a property through the `hs._asm.guitk.manager` metamethods, this property can only get or set whether or not the element itself is explicitly hidden."
        ],
        "signature" : "hs._asm.guitk.element._view:hidden([state | nil]) -> elementObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "hidden",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the element should be hidden. If you specify an explicit nil, this method will return whether or not this element *or any of its parents* are currently hidden.",
          ""
        ]
      },
      {
        "desc" : "Get or set the alpha level of the element.",
        "stripped_doc" : [
          "Get or set the alpha level of the element.",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:alphaValue([alpha]) -> elementObject | number",
        "doc" : "Get or set the alpha level of the element.\n\nParameters:\n * `alpha` - an optional number, default 1.0, specifying the alpha level (0.0 - 1.0, inclusive) for the element.\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element._view:alphaValue([alpha]) -> elementObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value"
        ],
        "name" : "alphaValue",
        "parameters" : [
          " * `alpha` - an optional number, default 1.0, specifying the alpha level (0.0 - 1.0, inclusive) for the element.",
          ""
        ]
      },
      {
        "desc" : "Get or set the focus ring type for the element",
        "stripped_doc" : [
          "Get or set the focus ring type for the element",
          ""
        ],
        "def" : "hs._asm.guitk.element._view:focusRingType([type]) -> elementObject | string",
        "doc" : "Get or set the focus ring type for the element\n\nParameters:\n * `type` - an optional string specifying the focus ring type for the element.  Valid strings are as follows:\n   * \"default\"  - The default focus ring behavior for the element will be used when the element is the input focus; usually this is identical to \"exterior\".\n   * \"none\"     - No focus ring will be drawn around the element when it is the input focus\n   * \"Exterior\" - The standard Aqua focus ring will be drawn around the element when it is the input focus\n\nReturns:\n * if an argument is provided, returns the elementObject userdata; otherwise returns the current value\n\nNotes:\n * Setting this for an element that cannot be an active element has no effect.\n * When an element is rotated with [hs._asm.guitk.element._view:rotation](#rotation), the focus ring may not appear properly; if you are using angles other then the four cardinal directions (0, 90, 180, or 270), it may be visually more appropriate to set this to \"none\".",
        "notes" : [
          " * Setting this for an element that cannot be an active element has no effect.",
          " * When an element is rotated with [hs._asm.guitk.element._view:rotation](#rotation), the focus ring may not appear properly; if you are using angles other then the four cardinal directions (0, 90, 180, or 270), it may be visually more appropriate to set this to \"none\"."
        ],
        "signature" : "hs._asm.guitk.element._view:focusRingType([type]) -> elementObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, returns the elementObject userdata; otherwise returns the current value",
          ""
        ],
        "name" : "focusRingType",
        "parameters" : [
          " * `type` - an optional string specifying the focus ring type for the element.  Valid strings are as follows:",
          "   * \"default\"  - The default focus ring behavior for the element will be used when the element is the input focus; usually this is identical to \"exterior\".",
          "   * \"none\"     - No focus ring will be drawn around the element when it is the input focus",
          "   * \"Exterior\" - The standard Aqua focus ring will be drawn around the element when it is the input focus",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "name" : "hs._asm.guitk.element._view"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Provides an AudioVisual player element for `hs._asm.guitk`.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [
      {
        "desc" : "Creates a new AVPlayer element for `hs._asm.guitk` which can display audiovisual media.",
        "stripped_doc" : [
          "Creates a new AVPlayer element for `hs._asm.guitk` which can display audiovisual media.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer.new([frame]) -> avplayerObject",
        "doc" : "Creates a new AVPlayer element for `hs._asm.guitk` which can display audiovisual media.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the avplayer object.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window."
        ],
        "signature" : "hs._asm.guitk.element.avplayer.new([frame]) -> avplayerObject",
        "type" : "Constructor",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the avplayer object.",
          ""
        ]
      }
    ],
    "doc" : "Provides an AudioVisual player element for `hs._asm.guitk`.\n\nIf you wish to include other elements within the window containing the avplayer object, you will need to use an `hs._asm.guitk.manager` object.  However, since this element is fully self contained and provides its own controls for video playback, it may be easier to attach this element directly to a `hs._asm.guitk` window object when you don't require other elements in the visual display.\n\nPlayback of remote or streaming content has been tested against http:\/\/devimages.apple.com\/iphone\/samples\/bipbop\/bipbopall.m3u8, which is a sample URL provided in the Apple documentation at https:\/\/developer.apple.com\/library\/prerelease\/content\/documentation\/AudioVideo\/Conceptual\/AVFoundationPG\/Articles\/02_Playback.html#\/\/apple_ref\/doc\/uid\/TP40010188-CH3-SW4\n\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "items" : [
      {
        "desc" : "Creates a new AVPlayer element for `hs._asm.guitk` which can display audiovisual media.",
        "stripped_doc" : [
          "Creates a new AVPlayer element for `hs._asm.guitk` which can display audiovisual media.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer.new([frame]) -> avplayerObject",
        "doc" : "Creates a new AVPlayer element for `hs._asm.guitk` which can display audiovisual media.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the avplayer object.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window."
        ],
        "signature" : "hs._asm.guitk.element.avplayer.new([frame]) -> avplayerObject",
        "type" : "Constructor",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the avplayer object.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not external playback via AirPlay is allowed for this item.",
        "stripped_doc" : [
          "Get or set whether or not external playback via AirPlay is allowed for this item.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:allowExternalPlayback([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether or not external playback via AirPlay is allowed for this item.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether external playback via AirPlay is allowed for this item.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.\n\n * External playback via AirPlay is only available in macOS 10.11 and newer.",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
          "",
          " * External playback via AirPlay is only available in macOS 10.11 and newer."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:allowExternalPlayback([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "allowExternalPlayback",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether external playback via AirPlay is allowed for this item.",
          ""
        ]
      },
      {
        "desc" : "Get or Set the callback function for the avplayerObject.",
        "stripped_doc" : [
          "Get or Set the callback function for the avplayerObject.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:callback(fn) -> avplayerObject | fn | nil",
        "doc" : "Get or Set the callback function for the avplayerObject.\n\nParameters:\n * `fn` - a function, or explicit `nil`, specifying the callback function which is used by this avplayerObject.  If `nil` is specified, the currently active callback function is removed.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * The callback function should expect 2 or more arguments.  The first two arguments will always be:\n   * `avplayObject` - the avplayerObject userdata\n   * `message`      - a string specifying the reason for the callback.\n   * Additional arguments depend upon the message.  See the following methods for details concerning the arguments for each message:\n     * `finished`   - [hs._asm.guitk.element.avplayer:trackCompleted](#trackCompleted)\n     * `pause`      - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)\n     * `play`       - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)\n     * `progress`   - [hs._asm.guitk.element.avplayer:trackProgress](#trackProgress)\n     * `seek`       - [hs._asm.guitk.element.avplayer:seek](#seek)\n     * `status`     - [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus)",
        "notes" : [
          " * The callback function should expect 2 or more arguments.  The first two arguments will always be:",
          "   * `avplayObject` - the avplayerObject userdata",
          "   * `message`      - a string specifying the reason for the callback.",
          "   * Additional arguments depend upon the message.  See the following methods for details concerning the arguments for each message:",
          "     * `finished`   - [hs._asm.guitk.element.avplayer:trackCompleted](#trackCompleted)",
          "     * `pause`      - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)",
          "     * `play`       - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)",
          "     * `progress`   - [hs._asm.guitk.element.avplayer:trackProgress](#trackProgress)",
          "     * `seek`       - [hs._asm.guitk.element.avplayer:seek](#seek)",
          "     * `status`     - [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus)"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:callback(fn) -> avplayerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a function, or explicit `nil`, specifying the callback function which is used by this avplayerObject.  If `nil` is specified, the currently active callback function is removed.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.",
        "stripped_doc" : [
          "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:ccEnabled([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the player should display closed captioning information, if it is available.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:ccEnabled([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "name" : "ccEnabled",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the player should display closed captioning information, if it is available.",
          ""
        ]
      },
      {
        "desc" : "Get or set the style of controls displayed in the avplayerObject for controlling media playback.",
        "stripped_doc" : [
          "Get or set the style of controls displayed in the avplayerObject for controlling media playback.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:controlsStyle([style]) -> avplayerObject | string",
        "doc" : "Get or set the style of controls displayed in the avplayerObject for controlling media playback.\n\nParameters:\n * `style` - an optional string, default \"default\", specifying the stye of the controls displayed for controlling media playback.  The string may be one of the following:\n   * `none`     - no controls are provided -- playback must be managed programmatically through Hammerspoon Lua code.\n   * `inline`   - media controls are displayed in an autohiding status bar at the bottom of the media display.\n   * `floating` - media controls are displayed in an autohiding panel which floats over the media display.\n   * `minimal`  - media controls are displayed as a round circle in the center of the media display.\n   * `none`     - no media controls are displayed in the media display.\n   * `default`  - use the OS X default control style; under OS X 10.11, this is the \"inline\".\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:controlsStyle([style]) -> avplayerObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "name" : "controlsStyle",
        "parameters" : [
          " * `style` - an optional string, default \"default\", specifying the stye of the controls displayed for controlling media playback.  The string may be one of the following:",
          "   * `none`     - no controls are provided -- playback must be managed programmatically through Hammerspoon Lua code.",
          "   * `inline`   - media controls are displayed in an autohiding status bar at the bottom of the media display.",
          "   * `floating` - media controls are displayed in an autohiding panel which floats over the media display.",
          "   * `minimal`  - media controls are displayed as a round circle in the center of the media display.",
          "   * `none`     - no media controls are displayed in the media display.",
          "   * `default`  - use the OS X default control style; under OS X 10.11, this is the \"inline\".",
          ""
        ]
      },
      {
        "desc" : "Returns the current position in seconds within the audiovisual media content.",
        "stripped_doc" : [
          "Returns the current position in seconds within the audiovisual media content.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:currentTime() -> number | nil",
        "doc" : "Returns the current position in seconds within the audiovisual media content.\n\nParameters:\n * None\n\nReturns:\n * the current position, in seconds, within the audiovisual media content, or `nil` if no media content is currently loaded.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:currentTime() -> number | nil",
        "type" : "Method",
        "returns" : [
          " * the current position, in seconds, within the audiovisual media content, or `nil` if no media content is currently loaded."
        ],
        "name" : "currentTime",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns the duration, in seconds, of the audiovisual media content currently loaded.",
        "stripped_doc" : [
          "Returns the duration, in seconds, of the audiovisual media content currently loaded.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:duration() -> number | nil",
        "doc" : "Returns the duration, in seconds, of the audiovisual media content currently loaded.\n\nParameters:\n * None\n\nReturns:\n * the duration, in seconds, of the audiovisual media content currently loaded, if it can be determined, or `nan` (not-a-number) if it cannot.  If no item has been loaded, this method will return nil.\n\nNotes:\n * the duration of an item which is still loading cannot be determined; you may want to use [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) and wait until it receives a \"readyToPlay\" state before querying this method.\n\n * a live stream may not provide duration information and also return `nan` for this method.\n\n * Lua defines `nan` as a number which is not equal to itself.  To test if the value of this method is `nan` requires code like the following:\n ~~~lua\n duration = avplayer:duration()\n if type(duration) == \"number\" and duration ~= duration then\n     -- the duration is equal to `nan`\n end\n~~~",
        "notes" : [
          " * the duration of an item which is still loading cannot be determined; you may want to use [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) and wait until it receives a \"readyToPlay\" state before querying this method.",
          "",
          " * a live stream may not provide duration information and also return `nan` for this method.",
          "",
          " * Lua defines `nan` as a number which is not equal to itself.  To test if the value of this method is `nan` requires code like the following:",
          " ~~~lua",
          " duration = avplayer:duration()",
          " if type(duration) == \"number\" and duration ~= duration then",
          "     -- the duration is equal to `nan`",
          " end",
          "~~~"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:duration() -> number | nil",
        "type" : "Method",
        "returns" : [
          " * the duration, in seconds, of the audiovisual media content currently loaded, if it can be determined, or `nan` (not-a-number) if it cannot.  If no item has been loaded, this method will return nil.",
          ""
        ],
        "name" : "duration",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns whether or not external playback via AirPlay is currently active for the avplayer object.",
        "stripped_doc" : [
          "Returns whether or not external playback via AirPlay is currently active for the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:externalPlayback() -> Boolean",
        "doc" : "Returns whether or not external playback via AirPlay is currently active for the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * true, if AirPlay is currently being used to play the audiovisual content, or false if it is not.\n\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.\n\n * External playback via AirPlay is only available in macOS 10.11 and newer.",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
          "",
          " * External playback via AirPlay is only available in macOS 10.11 and newer."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:externalPlayback() -> Boolean",
        "type" : "Method",
        "returns" : [
          " * true, if AirPlay is currently being used to play the audiovisual content, or false if it is not.",
          "",
          ""
        ],
        "name" : "externalPlayback",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Flashes the number and optional string over the media playback display momentarily.",
        "stripped_doc" : [
          "Flashes the number and optional string over the media playback display momentarily.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:flashChapterAndTitle(number, [string]) -> avplayerObject",
        "doc" : "Flashes the number and optional string over the media playback display momentarily.\n\nParameters:\n * `number` - an integer specifying the chapter number to display.\n * `string` - an optional string specifying the chapter name to display.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * If only a number is provided, the text \"Chapter #\" is displayed.  If a string is also provided, \"#. string\" is displayed.",
        "notes" : [
          " * If only a number is provided, the text \"Chapter #\" is displayed.  If a string is also provided, \"#. string\" is displayed."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:flashChapterAndTitle(number, [string]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "name" : "flashChapterAndTitle",
        "parameters" : [
          " * `number` - an integer specifying the chapter number to display.",
          " * `string` - an optional string specifying the chapter name to display.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether frame stepping or scrubbing controls are included in the media controls.",
        "stripped_doc" : [
          "Get or set whether frame stepping or scrubbing controls are included in the media controls.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:frameSteppingButtons([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether frame stepping or scrubbing controls are included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether frame stepping (true) or scrubbing (false) controls are included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:frameSteppingButtons([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "name" : "frameSteppingButtons",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether frame stepping (true) or scrubbing (false) controls are included in the media controls.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the full screen toggle button should be included in the media controls.",
        "stripped_doc" : [
          "Get or set whether or not the full screen toggle button should be included in the media controls.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:fullScreenButton([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether or not the full screen toggle button should be included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the full screen toggle button should be included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:fullScreenButton([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "fullScreenButton",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the full screen toggle button should be included in the media controls.",
          ""
        ]
      },
      {
        "desc" : "Load the specified resource for playback.",
        "stripped_doc" : [
          "Load the specified resource for playback.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:load(path) -> avplayerObject",
        "doc" : "Load the specified resource for playback.\n\nParameters:\n * `path` - a string specifying the file path or URL to the audiovisual resource.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * Content will not start autoplaying when loaded - you must use the controls provided in the audiovisual player or one of [hs._asm.guitk.element.avplayer:play](#play) or [hs._asm.guitk.element.avplayer:rate](#rate) to begin playback.\n\n * If the path or URL are malformed, unreachable, or otherwise unavailable, [hs._asm.guitk.element.avplayer:status](#status) will return \"failed\".\n * Because a remote URL may not respond immediately, you can also setup a callback with [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) to be notified when the item has loaded or if it has failed.",
        "notes" : [
          " * Content will not start autoplaying when loaded - you must use the controls provided in the audiovisual player or one of [hs._asm.guitk.element.avplayer:play](#play) or [hs._asm.guitk.element.avplayer:rate](#rate) to begin playback.",
          "",
          " * If the path or URL are malformed, unreachable, or otherwise unavailable, [hs._asm.guitk.element.avplayer:status](#status) will return \"failed\".",
          " * Because a remote URL may not respond immediately, you can also setup a callback with [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) to be notified when the item has loaded or if it has failed."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:load(path) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "name" : "load",
        "parameters" : [
          " * `path` - a string specifying the file path or URL to the audiovisual resource.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not audio output is muted for the audovisual media item.",
        "stripped_doc" : [
          "Get or set whether or not audio output is muted for the audovisual media item.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:mute([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether or not audio output is muted for the audovisual media item.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not audio output has been muted for the avplayer object.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:mute([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "name" : "mute",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not audio output has been muted for the avplayer object.",
          ""
        ]
      },
      {
        "desc" : "Pause the audiovisual media currently loaded in the avplayer object.",
        "stripped_doc" : [
          "Pause the audiovisual media currently loaded in the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:pause() -> avplayerObject",
        "doc" : "Pause the audiovisual media currently loaded in the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * the avplayerObject\n\nNotes:\n * this is equivalent to setting the rate to 0.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)",
        "notes" : [
          " * this is equivalent to setting the rate to 0.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:pause() -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "name" : "pause",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not playback of media should be paused when the avplayer object is hidden.",
        "stripped_doc" : [
          "Get or set whether or not playback of media should be paused when the avplayer object is hidden.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:pauseWhenHidden([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether or not playback of media should be paused when the avplayer object is hidden.\n\nParameters:\n * `state` - an optional boolean, default true, specifying whether or not media playback should be paused when the avplayer object is hidden.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNote:\n * this method currently does not work; fixing this is in the TODO list.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:pauseWhenHidden([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          "",
          "Note:",
          " * this method currently does not work; fixing this is in the TODO list."
        ],
        "name" : "pauseWhenHidden",
        "parameters" : [
          " * `state` - an optional boolean, default true, specifying whether or not media playback should be paused when the avplayer object is hidden.",
          ""
        ]
      },
      {
        "desc" : "Play the audiovisual media currently loaded in the avplayer object.",
        "stripped_doc" : [
          "Play the audiovisual media currently loaded in the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:play([fromBeginning]) -> avplayerObject",
        "doc" : "Play the audiovisual media currently loaded in the avplayer object.\n\nParameters:\n * `fromBeginning` - an optional boolean, default false, specifying whether or not the media playback should start from the beginning or from the current location.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * this is equivalent to setting the rate to 1.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)",
        "notes" : [
          " * this is equivalent to setting the rate to 1.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:play([fromBeginning]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "name" : "play",
        "parameters" : [
          " * `fromBeginning` - an optional boolean, default false, specifying whether or not the media playback should start from the beginning or from the current location.",
          ""
        ]
      },
      {
        "desc" : "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.",
        "stripped_doc" : [
          "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:playbackInformation() -> table | nil",
        "doc" : "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.\n\nParameters:\n * None\n\nReturns:\n * a table containing the following media characteristics, or `nil` if no media content is currently loaded:\n   * \"playbackLikelyToKeepUp\" - Indicates whether the item will likely play through without stalling.  Note that this is only a prediction.\n   * \"playbackBufferEmpty\"    - Indicates whether playback has consumed all buffered media and that playback may stall or end.\n   * \"playbackBufferFull\"     - Indicates whether the internal media buffer is full and that further I\/O is suspended.\n   * \"canPlayReverse\"         - A Boolean value indicating whether the item can be played with a rate of -1.0.\n   * \"canPlayFastForward\"     - A Boolean value indicating whether the item can be played at rates greater than 1.0.\n   * \"canPlayFastReverse\"     - A Boolean value indicating whether the item can be played at rates less than –1.0.\n   * \"canPlaySlowForward\"     - A Boolean value indicating whether the item can be played at a rate between 0.0 and 1.0.\n   * \"canPlaySlowReverse\"     - A Boolean value indicating whether the item can be played at a rate between -1.0 and 0.0.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:playbackInformation() -> table | nil",
        "type" : "Method",
        "returns" : [
          " * a table containing the following media characteristics, or `nil` if no media content is currently loaded:",
          "   * \"playbackLikelyToKeepUp\" - Indicates whether the item will likely play through without stalling.  Note that this is only a prediction.",
          "   * \"playbackBufferEmpty\"    - Indicates whether playback has consumed all buffered media and that playback may stall or end.",
          "   * \"playbackBufferFull\"     - Indicates whether the internal media buffer is full and that further I\/O is suspended.",
          "   * \"canPlayReverse\"         - A Boolean value indicating whether the item can be played with a rate of -1.0.",
          "   * \"canPlayFastForward\"     - A Boolean value indicating whether the item can be played at rates greater than 1.0.",
          "   * \"canPlayFastReverse\"     - A Boolean value indicating whether the item can be played at rates less than –1.0.",
          "   * \"canPlaySlowForward\"     - A Boolean value indicating whether the item can be played at a rate between 0.0 and 1.0.",
          "   * \"canPlaySlowReverse\"     - A Boolean value indicating whether the item can be played at a rate between -1.0 and 0.0."
        ],
        "name" : "playbackInformation",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set the rate of playback for the audiovisual content of the avplayer object.",
        "stripped_doc" : [
          "Get or set the rate of playback for the audiovisual content of the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:rate([rate]) -> avplayerObject | number",
        "doc" : "Get or set the rate of playback for the audiovisual content of the avplayer object.\n\nParameters:\n * `rate` - an optional number specifying the rate you wish for the audiovisual content to be played.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method affects the playback rate of both video and audio -- if you wish to mute audio during a \"fast forward\" or \"rewind\", see [hs._asm.guitk.element.avplayer:mute](#mute).\n * A value of 0.0 is equivalent to [hs._asm.guitk.element.avplayer:pause](#pause).\n * A value of 1.0 is equivalent to [hs._asm.guitk.element.avplayer:play](#play).\n\n * Other rates may not be available for all media and will be ignored if specified and the media does not support playback at the specified rate:\n   * Rates between 0.0 and 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowForward` field\n   * Rates greater than 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastForward` field\n   * The item can be played in reverse (a rate of -1.0) if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayReverse` field\n   * Rates between 0.0 and -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowReverse` field\n   * Rates less than -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastReverse` field",
        "notes" : [
          " * This method affects the playback rate of both video and audio -- if you wish to mute audio during a \"fast forward\" or \"rewind\", see [hs._asm.guitk.element.avplayer:mute](#mute).",
          " * A value of 0.0 is equivalent to [hs._asm.guitk.element.avplayer:pause](#pause).",
          " * A value of 1.0 is equivalent to [hs._asm.guitk.element.avplayer:play](#play).",
          "",
          " * Other rates may not be available for all media and will be ignored if specified and the media does not support playback at the specified rate:",
          "   * Rates between 0.0 and 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowForward` field",
          "   * Rates greater than 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastForward` field",
          "   * The item can be played in reverse (a rate of -1.0) if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayReverse` field",
          "   * Rates between 0.0 and -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowReverse` field",
          "   * Rates less than -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastReverse` field"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:rate([rate]) -> avplayerObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "rate",
        "parameters" : [
          " * `rate` - an optional number specifying the rate you wish for the audiovisual content to be played.",
          ""
        ]
      },
      {
        "desc" : "Jumps to the specified location in the audiovisual content currently loaded into the player.",
        "stripped_doc" : [
          "Jumps to the specified location in the audiovisual content currently loaded into the player.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:seek(time, [callback]) -> avplayerObject | nil",
        "doc" : "Jumps to the specified location in the audiovisual content currently loaded into the player.\n\nParameters:\n * `time`     - the location, in seconds, within the audiovisual content to seek to.\n * `callback` - an optional boolean, default false, specifying whether or not a callback should be invoked when the seek operation has completed.\n\nReturns:\n * the avplayerObject, or nil if no media content is currently loaded\n\nNotes:\n * If you specify `callback` as true, the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:\n   * the avplayerObject\n   * \"seek\"\n   * the current time, in seconds, specifying the current playback position in the media content\n   * `true` if the seek operation was allowed to complete, or `false` if it was interrupted (for example by another seek request).",
        "notes" : [
          " * If you specify `callback` as true, the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:",
          "   * the avplayerObject",
          "   * \"seek\"",
          "   * the current time, in seconds, specifying the current playback position in the media content",
          "   * `true` if the seek operation was allowed to complete, or `false` if it was interrupted (for example by another seek request)."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:seek(time, [callback]) -> avplayerObject | nil",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject, or nil if no media content is currently loaded",
          ""
        ],
        "name" : "seek",
        "parameters" : [
          " * `time`     - the location, in seconds, within the audiovisual content to seek to.",
          " * `callback` - an optional boolean, default false, specifying whether or not a callback should be invoked when the seek operation has completed.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the sharing services button is included in the media controls.",
        "stripped_doc" : [
          "Get or set whether or not the sharing services button is included in the media controls.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:sharingServiceButton([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether or not the sharing services button is included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the sharing services button is included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:sharingServiceButton([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "sharingServiceButton",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the sharing services button is included in the media controls.",
          ""
        ]
      },
      {
        "desc" : "Returns the current status of the media content loaded for playback.",
        "stripped_doc" : [
          "Returns the current status of the media content loaded for playback.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:status() -> status[, error] | nil",
        "doc" : "Returns the current status of the media content loaded for playback.\n\nParameters:\n * None\n\nReturns:\n * One of the following status strings, or `nil` if no media content is currently loaded:\n   * \"unknown\"     - The content's status is unknown; often this is returned when remote content is still loading or being evaluated for playback.\n   * \"readyToPlay\" - The content has been loaded or sufficiently buffered so that playback may begin\n   * \"failed\"      - There was an error loading the content; a second return value will contain a string which may contain more information about the error.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:status() -> status[, error] | nil",
        "type" : "Method",
        "returns" : [
          " * One of the following status strings, or `nil` if no media content is currently loaded:",
          "   * \"unknown\"     - The content's status is unknown; often this is returned when remote content is still loading or being evaluated for playback.",
          "   * \"readyToPlay\" - The content has been loaded or sufficiently buffered so that playback may begin",
          "   * \"failed\"      - There was an error loading the content; a second return value will contain a string which may contain more information about the error."
        ],
        "name" : "status",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).",
        "stripped_doc" : [
          "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackCompleted([state]) -> avplayerObject | boolean",
        "doc" : "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not completing the playback of media should invoke a callback.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 2 arguments:\n   * the avplayerObject\n   * \"finished\"",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 2 arguments:",
          "   * the avplayerObject",
          "   * \"finished\""
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackCompleted([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "trackCompleted",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not completing the playback of media should invoke a callback.",
          ""
        ]
      },
      {
        "desc" : "Enable or disable a periodic callback at the interval specified.",
        "stripped_doc" : [
          "Enable or disable a periodic callback at the interval specified.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackProgress([number | nil]) -> avplayerObject | number | nil",
        "doc" : "Enable or disable a periodic callback at the interval specified.\n\nParameters:\n * `number` - an optional number specifying how often, in seconds, the callback function should be invoked to report progress.  If an explicit nil is specified, then the progress callback is disabled. Defaults to nil.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.  A return value of `nil` indicates that no progress callback is in effect.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:\n   * the avplayerObject\n   * \"progress\"\n   * the time in seconds specifying the current location in the media playback.\n\n * From Apple Documentation: The block is invoked periodically at the interval specified, interpreted according to the timeline of the current item. The block is also invoked whenever time jumps and whenever playback starts or stops. If the interval corresponds to a very short interval in real time, the player may invoke the block less frequently than requested. Even so, the player will invoke the block sufficiently often for the client to update indications of the current time appropriately in its end-user interface.",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:",
          "   * the avplayerObject",
          "   * \"progress\"",
          "   * the time in seconds specifying the current location in the media playback.",
          "",
          " * From Apple Documentation: The block is invoked periodically at the interval specified, interpreted according to the timeline of the current item. The block is also invoked whenever time jumps and whenever playback starts or stops. If the interval corresponds to a very short interval in real time, the player may invoke the block less frequently than requested. Even so, the player will invoke the block sufficiently often for the client to update indications of the current time appropriately in its end-user interface."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackProgress([number | nil]) -> avplayerObject | number | nil",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.  A return value of `nil` indicates that no progress callback is in effect.",
          ""
        ],
        "name" : "trackProgress",
        "parameters" : [
          " * `number` - an optional number specifying how often, in seconds, the callback function should be invoked to report progress.  If an explicit nil is specified, then the progress callback is disabled. Defaults to nil.",
          ""
        ]
      },
      {
        "desc" : "Enable or disable a callback whenever the rate of playback changes.",
        "stripped_doc" : [
          "Enable or disable a callback whenever the rate of playback changes.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackRate([state]) -> avplayerObject | boolean",
        "doc" : "Enable or disable a callback whenever the rate of playback changes.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not playback rate changes should invoke a callback.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:\n   * the avplayerObject\n   * \"pause\", if the rate changes to 0.0, or \"play\" if the rate changes to any other value\n   * the rate that the playback was changed to.\n\n * Not all media content can have its playback rate changed; attempts to do so will invoke the callback twice -- once signifying that the change was made, and a second time indicating that the rate of play was reset back to the limits of the media content.  See [hs._asm:rate](#rate) for more information.",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:",
          "   * the avplayerObject",
          "   * \"pause\", if the rate changes to 0.0, or \"play\" if the rate changes to any other value",
          "   * the rate that the playback was changed to.",
          "",
          " * Not all media content can have its playback rate changed; attempts to do so will invoke the callback twice -- once signifying that the change was made, and a second time indicating that the rate of play was reset back to the limits of the media content.  See [hs._asm:rate](#rate) for more information."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackRate([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "trackRate",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not playback rate changes should invoke a callback.",
          ""
        ]
      },
      {
        "desc" : "Enable or disable a callback whenever the status of loading a media item changes.",
        "stripped_doc" : [
          "Enable or disable a callback whenever the status of loading a media item changes.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackStatus([state]) -> avplayerObject | boolean",
        "doc" : "Enable or disable a callback whenever the status of loading a media item changes.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not changes to the status of audiovisual media's loading status should generate a callback..\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:\n   * the avplayerObject\n   * \"status\"\n   * a string matching one of the states described in [hs._asm.guitk.element.avplayer:status](#status)\n   * if the state reported is failed, an error message describing the error that occurred.",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:",
          "   * the avplayerObject",
          "   * \"status\"",
          "   * a string matching one of the states described in [hs._asm.guitk.element.avplayer:status](#status)",
          "   * if the state reported is failed, an error message describing the error that occurred."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackStatus([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "trackStatus",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not changes to the status of audiovisual media's loading status should generate a callback..",
          ""
        ]
      },
      {
        "desc" : "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).",
        "stripped_doc" : [
          "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:volume([volume]) -> avplayerObject | number",
        "doc" : "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).\n\nParameters:\n * `volume` - an optional number, default as specified by the media or 1.0 if no designation is specified by the media, specifying the player's volume relative to the system volume level.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:volume([volume]) -> avplayerObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "name" : "volume",
        "parameters" : [
          " * `volume` - an optional number, default as specified by the media or 1.0 if no designation is specified by the media, specifying the player's volume relative to the system volume level.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Get or set the style of controls displayed in the avplayerObject for controlling media playback.",
        "stripped_doc" : [
          "Get or set the style of controls displayed in the avplayerObject for controlling media playback.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:controlsStyle([style]) -> avplayerObject | string",
        "doc" : "Get or set the style of controls displayed in the avplayerObject for controlling media playback.\n\nParameters:\n * `style` - an optional string, default \"default\", specifying the stye of the controls displayed for controlling media playback.  The string may be one of the following:\n   * `none`     - no controls are provided -- playback must be managed programmatically through Hammerspoon Lua code.\n   * `inline`   - media controls are displayed in an autohiding status bar at the bottom of the media display.\n   * `floating` - media controls are displayed in an autohiding panel which floats over the media display.\n   * `minimal`  - media controls are displayed as a round circle in the center of the media display.\n   * `none`     - no media controls are displayed in the media display.\n   * `default`  - use the OS X default control style; under OS X 10.11, this is the \"inline\".\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:controlsStyle([style]) -> avplayerObject | string",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "name" : "controlsStyle",
        "parameters" : [
          " * `style` - an optional string, default \"default\", specifying the stye of the controls displayed for controlling media playback.  The string may be one of the following:",
          "   * `none`     - no controls are provided -- playback must be managed programmatically through Hammerspoon Lua code.",
          "   * `inline`   - media controls are displayed in an autohiding status bar at the bottom of the media display.",
          "   * `floating` - media controls are displayed in an autohiding panel which floats over the media display.",
          "   * `minimal`  - media controls are displayed as a round circle in the center of the media display.",
          "   * `none`     - no media controls are displayed in the media display.",
          "   * `default`  - use the OS X default control style; under OS X 10.11, this is the \"inline\".",
          ""
        ]
      },
      {
        "desc" : "Get or set whether frame stepping or scrubbing controls are included in the media controls.",
        "stripped_doc" : [
          "Get or set whether frame stepping or scrubbing controls are included in the media controls.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:frameSteppingButtons([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether frame stepping or scrubbing controls are included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether frame stepping (true) or scrubbing (false) controls are included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:frameSteppingButtons([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "name" : "frameSteppingButtons",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether frame stepping (true) or scrubbing (false) controls are included in the media controls.",
          ""
        ]
      },
      {
        "desc" : "Flashes the number and optional string over the media playback display momentarily.",
        "stripped_doc" : [
          "Flashes the number and optional string over the media playback display momentarily.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:flashChapterAndTitle(number, [string]) -> avplayerObject",
        "doc" : "Flashes the number and optional string over the media playback display momentarily.\n\nParameters:\n * `number` - an integer specifying the chapter number to display.\n * `string` - an optional string specifying the chapter name to display.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * If only a number is provided, the text \"Chapter #\" is displayed.  If a string is also provided, \"#. string\" is displayed.",
        "notes" : [
          " * If only a number is provided, the text \"Chapter #\" is displayed.  If a string is also provided, \"#. string\" is displayed."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:flashChapterAndTitle(number, [string]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "name" : "flashChapterAndTitle",
        "parameters" : [
          " * `number` - an integer specifying the chapter number to display.",
          " * `string` - an optional string specifying the chapter name to display.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not playback of media should be paused when the avplayer object is hidden.",
        "stripped_doc" : [
          "Get or set whether or not playback of media should be paused when the avplayer object is hidden.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:pauseWhenHidden([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether or not playback of media should be paused when the avplayer object is hidden.\n\nParameters:\n * `state` - an optional boolean, default true, specifying whether or not media playback should be paused when the avplayer object is hidden.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNote:\n * this method currently does not work; fixing this is in the TODO list.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:pauseWhenHidden([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          "",
          "Note:",
          " * this method currently does not work; fixing this is in the TODO list."
        ],
        "name" : "pauseWhenHidden",
        "parameters" : [
          " * `state` - an optional boolean, default true, specifying whether or not media playback should be paused when the avplayer object is hidden.",
          ""
        ]
      },
      {
        "desc" : "Get or Set the callback function for the avplayerObject.",
        "stripped_doc" : [
          "Get or Set the callback function for the avplayerObject.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:callback(fn) -> avplayerObject | fn | nil",
        "doc" : "Get or Set the callback function for the avplayerObject.\n\nParameters:\n * `fn` - a function, or explicit `nil`, specifying the callback function which is used by this avplayerObject.  If `nil` is specified, the currently active callback function is removed.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * The callback function should expect 2 or more arguments.  The first two arguments will always be:\n   * `avplayObject` - the avplayerObject userdata\n   * `message`      - a string specifying the reason for the callback.\n   * Additional arguments depend upon the message.  See the following methods for details concerning the arguments for each message:\n     * `finished`   - [hs._asm.guitk.element.avplayer:trackCompleted](#trackCompleted)\n     * `pause`      - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)\n     * `play`       - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)\n     * `progress`   - [hs._asm.guitk.element.avplayer:trackProgress](#trackProgress)\n     * `seek`       - [hs._asm.guitk.element.avplayer:seek](#seek)\n     * `status`     - [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus)",
        "notes" : [
          " * The callback function should expect 2 or more arguments.  The first two arguments will always be:",
          "   * `avplayObject` - the avplayerObject userdata",
          "   * `message`      - a string specifying the reason for the callback.",
          "   * Additional arguments depend upon the message.  See the following methods for details concerning the arguments for each message:",
          "     * `finished`   - [hs._asm.guitk.element.avplayer:trackCompleted](#trackCompleted)",
          "     * `pause`      - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)",
          "     * `play`       - [hs._asm.guitk.element.avplayer:trackRate](#trackRate)",
          "     * `progress`   - [hs._asm.guitk.element.avplayer:trackProgress](#trackProgress)",
          "     * `seek`       - [hs._asm.guitk.element.avplayer:seek](#seek)",
          "     * `status`     - [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus)"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:callback(fn) -> avplayerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a function, or explicit `nil`, specifying the callback function which is used by this avplayerObject.  If `nil` is specified, the currently active callback function is removed.",
          ""
        ]
      },
      {
        "desc" : "Load the specified resource for playback.",
        "stripped_doc" : [
          "Load the specified resource for playback.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:load(path) -> avplayerObject",
        "doc" : "Load the specified resource for playback.\n\nParameters:\n * `path` - a string specifying the file path or URL to the audiovisual resource.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * Content will not start autoplaying when loaded - you must use the controls provided in the audiovisual player or one of [hs._asm.guitk.element.avplayer:play](#play) or [hs._asm.guitk.element.avplayer:rate](#rate) to begin playback.\n\n * If the path or URL are malformed, unreachable, or otherwise unavailable, [hs._asm.guitk.element.avplayer:status](#status) will return \"failed\".\n * Because a remote URL may not respond immediately, you can also setup a callback with [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) to be notified when the item has loaded or if it has failed.",
        "notes" : [
          " * Content will not start autoplaying when loaded - you must use the controls provided in the audiovisual player or one of [hs._asm.guitk.element.avplayer:play](#play) or [hs._asm.guitk.element.avplayer:rate](#rate) to begin playback.",
          "",
          " * If the path or URL are malformed, unreachable, or otherwise unavailable, [hs._asm.guitk.element.avplayer:status](#status) will return \"failed\".",
          " * Because a remote URL may not respond immediately, you can also setup a callback with [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) to be notified when the item has loaded or if it has failed."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:load(path) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "name" : "load",
        "parameters" : [
          " * `path` - a string specifying the file path or URL to the audiovisual resource.",
          ""
        ]
      },
      {
        "desc" : "Play the audiovisual media currently loaded in the avplayer object.",
        "stripped_doc" : [
          "Play the audiovisual media currently loaded in the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:play([fromBeginning]) -> avplayerObject",
        "doc" : "Play the audiovisual media currently loaded in the avplayer object.\n\nParameters:\n * `fromBeginning` - an optional boolean, default false, specifying whether or not the media playback should start from the beginning or from the current location.\n\nReturns:\n * the avplayerObject\n\nNotes:\n * this is equivalent to setting the rate to 1.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)",
        "notes" : [
          " * this is equivalent to setting the rate to 1.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:play([fromBeginning]) -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "name" : "play",
        "parameters" : [
          " * `fromBeginning` - an optional boolean, default false, specifying whether or not the media playback should start from the beginning or from the current location.",
          ""
        ]
      },
      {
        "desc" : "Pause the audiovisual media currently loaded in the avplayer object.",
        "stripped_doc" : [
          "Pause the audiovisual media currently loaded in the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:pause() -> avplayerObject",
        "doc" : "Pause the audiovisual media currently loaded in the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * the avplayerObject\n\nNotes:\n * this is equivalent to setting the rate to 0.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)",
        "notes" : [
          " * this is equivalent to setting the rate to 0.0 (see [hs._asm.guitk.element.avplayer:rate](#rate)`)"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:pause() -> avplayerObject",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject",
          ""
        ],
        "name" : "pause",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set the rate of playback for the audiovisual content of the avplayer object.",
        "stripped_doc" : [
          "Get or set the rate of playback for the audiovisual content of the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:rate([rate]) -> avplayerObject | number",
        "doc" : "Get or set the rate of playback for the audiovisual content of the avplayer object.\n\nParameters:\n * `rate` - an optional number specifying the rate you wish for the audiovisual content to be played.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method affects the playback rate of both video and audio -- if you wish to mute audio during a \"fast forward\" or \"rewind\", see [hs._asm.guitk.element.avplayer:mute](#mute).\n * A value of 0.0 is equivalent to [hs._asm.guitk.element.avplayer:pause](#pause).\n * A value of 1.0 is equivalent to [hs._asm.guitk.element.avplayer:play](#play).\n\n * Other rates may not be available for all media and will be ignored if specified and the media does not support playback at the specified rate:\n   * Rates between 0.0 and 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowForward` field\n   * Rates greater than 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastForward` field\n   * The item can be played in reverse (a rate of -1.0) if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayReverse` field\n   * Rates between 0.0 and -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowReverse` field\n   * Rates less than -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastReverse` field",
        "notes" : [
          " * This method affects the playback rate of both video and audio -- if you wish to mute audio during a \"fast forward\" or \"rewind\", see [hs._asm.guitk.element.avplayer:mute](#mute).",
          " * A value of 0.0 is equivalent to [hs._asm.guitk.element.avplayer:pause](#pause).",
          " * A value of 1.0 is equivalent to [hs._asm.guitk.element.avplayer:play](#play).",
          "",
          " * Other rates may not be available for all media and will be ignored if specified and the media does not support playback at the specified rate:",
          "   * Rates between 0.0 and 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowForward` field",
          "   * Rates greater than 1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastForward` field",
          "   * The item can be played in reverse (a rate of -1.0) if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayReverse` field",
          "   * Rates between 0.0 and -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlaySlowReverse` field",
          "   * Rates less than -1.0 are allowed if [hs._asm.guitk.element.avplayer:playbackInformation](#playbackInformation) returns true for the `canPlayFastReverse` field"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:rate([rate]) -> avplayerObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "rate",
        "parameters" : [
          " * `rate` - an optional number specifying the rate you wish for the audiovisual content to be played.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not audio output is muted for the audovisual media item.",
        "stripped_doc" : [
          "Get or set whether or not audio output is muted for the audovisual media item.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:mute([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether or not audio output is muted for the audovisual media item.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not audio output has been muted for the avplayer object.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:mute([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "name" : "mute",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not audio output has been muted for the avplayer object.",
          ""
        ]
      },
      {
        "desc" : "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).",
        "stripped_doc" : [
          "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:volume([volume]) -> avplayerObject | number",
        "doc" : "Get or set the avplayer object's volume on a linear scale from 0.0 (silent) to 1.0 (full volume, relative to the current OS volume).\n\nParameters:\n * `volume` - an optional number, default as specified by the media or 1.0 if no designation is specified by the media, specifying the player's volume relative to the system volume level.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:volume([volume]) -> avplayerObject | number",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "name" : "volume",
        "parameters" : [
          " * `volume` - an optional number, default as specified by the media or 1.0 if no designation is specified by the media, specifying the player's volume relative to the system volume level.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.",
        "stripped_doc" : [
          "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:ccEnabled([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether or not the player can use close captioning, if it is included in the audiovisual content.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the player should display closed captioning information, if it is available.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:ccEnabled([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value."
        ],
        "name" : "ccEnabled",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the player should display closed captioning information, if it is available.",
          ""
        ]
      },
      {
        "desc" : "Enable or disable a periodic callback at the interval specified.",
        "stripped_doc" : [
          "Enable or disable a periodic callback at the interval specified.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackProgress([number | nil]) -> avplayerObject | number | nil",
        "doc" : "Enable or disable a periodic callback at the interval specified.\n\nParameters:\n * `number` - an optional number specifying how often, in seconds, the callback function should be invoked to report progress.  If an explicit nil is specified, then the progress callback is disabled. Defaults to nil.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.  A return value of `nil` indicates that no progress callback is in effect.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:\n   * the avplayerObject\n   * \"progress\"\n   * the time in seconds specifying the current location in the media playback.\n\n * From Apple Documentation: The block is invoked periodically at the interval specified, interpreted according to the timeline of the current item. The block is also invoked whenever time jumps and whenever playback starts or stops. If the interval corresponds to a very short interval in real time, the player may invoke the block less frequently than requested. Even so, the player will invoke the block sufficiently often for the client to update indications of the current time appropriately in its end-user interface.",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:",
          "   * the avplayerObject",
          "   * \"progress\"",
          "   * the time in seconds specifying the current location in the media playback.",
          "",
          " * From Apple Documentation: The block is invoked periodically at the interval specified, interpreted according to the timeline of the current item. The block is also invoked whenever time jumps and whenever playback starts or stops. If the interval corresponds to a very short interval in real time, the player may invoke the block less frequently than requested. Even so, the player will invoke the block sufficiently often for the client to update indications of the current time appropriately in its end-user interface."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackProgress([number | nil]) -> avplayerObject | number | nil",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.  A return value of `nil` indicates that no progress callback is in effect.",
          ""
        ],
        "name" : "trackProgress",
        "parameters" : [
          " * `number` - an optional number specifying how often, in seconds, the callback function should be invoked to report progress.  If an explicit nil is specified, then the progress callback is disabled. Defaults to nil.",
          ""
        ]
      },
      {
        "desc" : "Enable or disable a callback whenever the rate of playback changes.",
        "stripped_doc" : [
          "Enable or disable a callback whenever the rate of playback changes.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackRate([state]) -> avplayerObject | boolean",
        "doc" : "Enable or disable a callback whenever the rate of playback changes.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not playback rate changes should invoke a callback.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:\n   * the avplayerObject\n   * \"pause\", if the rate changes to 0.0, or \"play\" if the rate changes to any other value\n   * the rate that the playback was changed to.\n\n * Not all media content can have its playback rate changed; attempts to do so will invoke the callback twice -- once signifying that the change was made, and a second time indicating that the rate of play was reset back to the limits of the media content.  See [hs._asm:rate](#rate) for more information.",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 arguments:",
          "   * the avplayerObject",
          "   * \"pause\", if the rate changes to 0.0, or \"play\" if the rate changes to any other value",
          "   * the rate that the playback was changed to.",
          "",
          " * Not all media content can have its playback rate changed; attempts to do so will invoke the callback twice -- once signifying that the change was made, and a second time indicating that the rate of play was reset back to the limits of the media content.  See [hs._asm:rate](#rate) for more information."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackRate([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "trackRate",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not playback rate changes should invoke a callback.",
          ""
        ]
      },
      {
        "desc" : "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.",
        "stripped_doc" : [
          "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:playbackInformation() -> table | nil",
        "doc" : "Returns a table containing information about the media playback characteristics of the audiovisual media currently loaded in the avplayerObject.\n\nParameters:\n * None\n\nReturns:\n * a table containing the following media characteristics, or `nil` if no media content is currently loaded:\n   * \"playbackLikelyToKeepUp\" - Indicates whether the item will likely play through without stalling.  Note that this is only a prediction.\n   * \"playbackBufferEmpty\"    - Indicates whether playback has consumed all buffered media and that playback may stall or end.\n   * \"playbackBufferFull\"     - Indicates whether the internal media buffer is full and that further I\/O is suspended.\n   * \"canPlayReverse\"         - A Boolean value indicating whether the item can be played with a rate of -1.0.\n   * \"canPlayFastForward\"     - A Boolean value indicating whether the item can be played at rates greater than 1.0.\n   * \"canPlayFastReverse\"     - A Boolean value indicating whether the item can be played at rates less than –1.0.\n   * \"canPlaySlowForward\"     - A Boolean value indicating whether the item can be played at a rate between 0.0 and 1.0.\n   * \"canPlaySlowReverse\"     - A Boolean value indicating whether the item can be played at a rate between -1.0 and 0.0.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:playbackInformation() -> table | nil",
        "type" : "Method",
        "returns" : [
          " * a table containing the following media characteristics, or `nil` if no media content is currently loaded:",
          "   * \"playbackLikelyToKeepUp\" - Indicates whether the item will likely play through without stalling.  Note that this is only a prediction.",
          "   * \"playbackBufferEmpty\"    - Indicates whether playback has consumed all buffered media and that playback may stall or end.",
          "   * \"playbackBufferFull\"     - Indicates whether the internal media buffer is full and that further I\/O is suspended.",
          "   * \"canPlayReverse\"         - A Boolean value indicating whether the item can be played with a rate of -1.0.",
          "   * \"canPlayFastForward\"     - A Boolean value indicating whether the item can be played at rates greater than 1.0.",
          "   * \"canPlayFastReverse\"     - A Boolean value indicating whether the item can be played at rates less than –1.0.",
          "   * \"canPlaySlowForward\"     - A Boolean value indicating whether the item can be played at a rate between 0.0 and 1.0.",
          "   * \"canPlaySlowReverse\"     - A Boolean value indicating whether the item can be played at a rate between -1.0 and 0.0."
        ],
        "name" : "playbackInformation",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns the current status of the media content loaded for playback.",
        "stripped_doc" : [
          "Returns the current status of the media content loaded for playback.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:status() -> status[, error] | nil",
        "doc" : "Returns the current status of the media content loaded for playback.\n\nParameters:\n * None\n\nReturns:\n * One of the following status strings, or `nil` if no media content is currently loaded:\n   * \"unknown\"     - The content's status is unknown; often this is returned when remote content is still loading or being evaluated for playback.\n   * \"readyToPlay\" - The content has been loaded or sufficiently buffered so that playback may begin\n   * \"failed\"      - There was an error loading the content; a second return value will contain a string which may contain more information about the error.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:status() -> status[, error] | nil",
        "type" : "Method",
        "returns" : [
          " * One of the following status strings, or `nil` if no media content is currently loaded:",
          "   * \"unknown\"     - The content's status is unknown; often this is returned when remote content is still loading or being evaluated for playback.",
          "   * \"readyToPlay\" - The content has been loaded or sufficiently buffered so that playback may begin",
          "   * \"failed\"      - There was an error loading the content; a second return value will contain a string which may contain more information about the error."
        ],
        "name" : "status",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).",
        "stripped_doc" : [
          "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackCompleted([state]) -> avplayerObject | boolean",
        "doc" : "Enable or disable a callback whenever playback of the current media content is completed (reaches the end).\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not completing the playback of media should invoke a callback.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 2 arguments:\n   * the avplayerObject\n   * \"finished\"",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 2 arguments:",
          "   * the avplayerObject",
          "   * \"finished\""
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackCompleted([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "trackCompleted",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not completing the playback of media should invoke a callback.",
          ""
        ]
      },
      {
        "desc" : "Enable or disable a callback whenever the status of loading a media item changes.",
        "stripped_doc" : [
          "Enable or disable a callback whenever the status of loading a media item changes.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:trackStatus([state]) -> avplayerObject | boolean",
        "doc" : "Enable or disable a callback whenever the status of loading a media item changes.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not changes to the status of audiovisual media's loading status should generate a callback..\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:\n   * the avplayerObject\n   * \"status\"\n   * a string matching one of the states described in [hs._asm.guitk.element.avplayer:status](#status)\n   * if the state reported is failed, an error message describing the error that occurred.",
        "notes" : [
          " * the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:",
          "   * the avplayerObject",
          "   * \"status\"",
          "   * a string matching one of the states described in [hs._asm.guitk.element.avplayer:status](#status)",
          "   * if the state reported is failed, an error message describing the error that occurred."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:trackStatus([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "trackStatus",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not changes to the status of audiovisual media's loading status should generate a callback..",
          ""
        ]
      },
      {
        "desc" : "Returns the current position in seconds within the audiovisual media content.",
        "stripped_doc" : [
          "Returns the current position in seconds within the audiovisual media content.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:currentTime() -> number | nil",
        "doc" : "Returns the current position in seconds within the audiovisual media content.\n\nParameters:\n * None\n\nReturns:\n * the current position, in seconds, within the audiovisual media content, or `nil` if no media content is currently loaded.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.avplayer:currentTime() -> number | nil",
        "type" : "Method",
        "returns" : [
          " * the current position, in seconds, within the audiovisual media content, or `nil` if no media content is currently loaded."
        ],
        "name" : "currentTime",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns the duration, in seconds, of the audiovisual media content currently loaded.",
        "stripped_doc" : [
          "Returns the duration, in seconds, of the audiovisual media content currently loaded.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:duration() -> number | nil",
        "doc" : "Returns the duration, in seconds, of the audiovisual media content currently loaded.\n\nParameters:\n * None\n\nReturns:\n * the duration, in seconds, of the audiovisual media content currently loaded, if it can be determined, or `nan` (not-a-number) if it cannot.  If no item has been loaded, this method will return nil.\n\nNotes:\n * the duration of an item which is still loading cannot be determined; you may want to use [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) and wait until it receives a \"readyToPlay\" state before querying this method.\n\n * a live stream may not provide duration information and also return `nan` for this method.\n\n * Lua defines `nan` as a number which is not equal to itself.  To test if the value of this method is `nan` requires code like the following:\n ~~~lua\n duration = avplayer:duration()\n if type(duration) == \"number\" and duration ~= duration then\n     -- the duration is equal to `nan`\n end\n~~~",
        "notes" : [
          " * the duration of an item which is still loading cannot be determined; you may want to use [hs._asm.guitk.element.avplayer:trackStatus](#trackStatus) and wait until it receives a \"readyToPlay\" state before querying this method.",
          "",
          " * a live stream may not provide duration information and also return `nan` for this method.",
          "",
          " * Lua defines `nan` as a number which is not equal to itself.  To test if the value of this method is `nan` requires code like the following:",
          " ~~~lua",
          " duration = avplayer:duration()",
          " if type(duration) == \"number\" and duration ~= duration then",
          "     -- the duration is equal to `nan`",
          " end",
          "~~~"
        ],
        "signature" : "hs._asm.guitk.element.avplayer:duration() -> number | nil",
        "type" : "Method",
        "returns" : [
          " * the duration, in seconds, of the audiovisual media content currently loaded, if it can be determined, or `nan` (not-a-number) if it cannot.  If no item has been loaded, this method will return nil.",
          ""
        ],
        "name" : "duration",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Jumps to the specified location in the audiovisual content currently loaded into the player.",
        "stripped_doc" : [
          "Jumps to the specified location in the audiovisual content currently loaded into the player.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:seek(time, [callback]) -> avplayerObject | nil",
        "doc" : "Jumps to the specified location in the audiovisual content currently loaded into the player.\n\nParameters:\n * `time`     - the location, in seconds, within the audiovisual content to seek to.\n * `callback` - an optional boolean, default false, specifying whether or not a callback should be invoked when the seek operation has completed.\n\nReturns:\n * the avplayerObject, or nil if no media content is currently loaded\n\nNotes:\n * If you specify `callback` as true, the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:\n   * the avplayerObject\n   * \"seek\"\n   * the current time, in seconds, specifying the current playback position in the media content\n   * `true` if the seek operation was allowed to complete, or `false` if it was interrupted (for example by another seek request).",
        "notes" : [
          " * If you specify `callback` as true, the callback function (see [hs._asm.guitk.element.avplayer:setCallback](#setCallback)) will be invoked with the following 3 or 4 arguments:",
          "   * the avplayerObject",
          "   * \"seek\"",
          "   * the current time, in seconds, specifying the current playback position in the media content",
          "   * `true` if the seek operation was allowed to complete, or `false` if it was interrupted (for example by another seek request)."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:seek(time, [callback]) -> avplayerObject | nil",
        "type" : "Method",
        "returns" : [
          " * the avplayerObject, or nil if no media content is currently loaded",
          ""
        ],
        "name" : "seek",
        "parameters" : [
          " * `time`     - the location, in seconds, within the audiovisual content to seek to.",
          " * `callback` - an optional boolean, default false, specifying whether or not a callback should be invoked when the seek operation has completed.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the sharing services button is included in the media controls.",
        "stripped_doc" : [
          "Get or set whether or not the sharing services button is included in the media controls.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:sharingServiceButton([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether or not the sharing services button is included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the sharing services button is included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:sharingServiceButton([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "sharingServiceButton",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the sharing services button is included in the media controls.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the full screen toggle button should be included in the media controls.",
        "stripped_doc" : [
          "Get or set whether or not the full screen toggle button should be included in the media controls.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:fullScreenButton([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether or not the full screen toggle button should be included in the media controls.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the full screen toggle button should be included in the media controls.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:fullScreenButton([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "fullScreenButton",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the full screen toggle button should be included in the media controls.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not external playback via AirPlay is allowed for this item.",
        "stripped_doc" : [
          "Get or set whether or not external playback via AirPlay is allowed for this item.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:allowExternalPlayback([state]) -> avplayerObject | boolean",
        "doc" : "Get or set whether or not external playback via AirPlay is allowed for this item.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether external playback via AirPlay is allowed for this item.\n\nReturns:\n * if an argument is provided, the avplayerObject; otherwise the current value.\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.\n\n * External playback via AirPlay is only available in macOS 10.11 and newer.",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
          "",
          " * External playback via AirPlay is only available in macOS 10.11 and newer."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:allowExternalPlayback([state]) -> avplayerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if an argument is provided, the avplayerObject; otherwise the current value.",
          ""
        ],
        "name" : "allowExternalPlayback",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether external playback via AirPlay is allowed for this item.",
          ""
        ]
      },
      {
        "desc" : "Returns whether or not external playback via AirPlay is currently active for the avplayer object.",
        "stripped_doc" : [
          "Returns whether or not external playback via AirPlay is currently active for the avplayer object.",
          ""
        ],
        "def" : "hs._asm.guitk.element.avplayer:externalPlayback() -> Boolean",
        "doc" : "Returns whether or not external playback via AirPlay is currently active for the avplayer object.\n\nParameters:\n * None\n\nReturns:\n * true, if AirPlay is currently being used to play the audiovisual content, or false if it is not.\n\n\nNotes:\n * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.\n\n * External playback via AirPlay is only available in macOS 10.11 and newer.",
        "notes" : [
          " * This method is considered experimental and may or may not function as intended; use with caution and please report any reproducible errors or crashes that you encounter.",
          "",
          " * External playback via AirPlay is only available in macOS 10.11 and newer."
        ],
        "signature" : "hs._asm.guitk.element.avplayer:externalPlayback() -> Boolean",
        "type" : "Method",
        "returns" : [
          " * true, if AirPlay is currently being used to play the audiovisual content, or false if it is not.",
          "",
          ""
        ],
        "name" : "externalPlayback",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "name" : "hs._asm.guitk.element.avplayer"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Provides button and checkbox elements for use with `hs._asm.guitk`.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [
      {
        "desc" : "Creates an `hs._asm.guitk.manager` object which can be used as an element containing a set of radio buttons with labels defined by the specified title strings.",
        "stripped_doc" : [
          "Creates an `hs._asm.guitk.manager` object which can be used as an element containing a set of radio buttons with labels defined by the specified title strings.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.radioButtonSet(...) -> managerObject",
        "doc" : "Creates an `hs._asm.guitk.manager` object which can be used as an element containing a set of radio buttons with labels defined by the specified title strings.\n\nParameters:\n `...` - a single table of strings, or list of strings separated by commas, specifying the labels to assign to the radion buttons in the set.\n\nReturns:\n * a new managerObject which can be used as an element to another `hs._asm.guitk.manager` or assigned to an `hs._asm.guitk` window directly.\n\nNotes:\n * Radio buttons in the same view (manager) are treated as related and only one can be selected at a time. By grouping radio button sets in separate managers, these independant managers can be assigned to a parent manager and each set will be seen as independent -- each set can have a selected item independent of the other radio sets which may also be displayed in the parent.\n\n * For example:\n~~~ lua\n    g = require(\"hs._asm.guitk\")\n    m = g.new{ x = 100, y = 100, h = 100, w = 130 }:contentManager(g.manager.new()):contentManager():show()\n    m[1] = g.element.button.radioButtonSet(1, 2, 3, 4)\n    m[2] = g.element.button.radioButtonSet{\"abc\", \"d\", \"efghijklmn\"}\n    m(2):moveRightOf(m(1), 10, \"centered\")\n~~~\n\nSee [hs._asm.guitk.element.button.radioButton](#radioButton) for more details.",
        "notes" : [
          " * Radio buttons in the same view (manager) are treated as related and only one can be selected at a time. By grouping radio button sets in separate managers, these independant managers can be assigned to a parent manager and each set will be seen as independent -- each set can have a selected item independent of the other radio sets which may also be displayed in the parent.",
          "",
          " * For example:",
          "~~~ lua",
          "    g = require(\"hs._asm.guitk\")",
          "    m = g.new{ x = 100, y = 100, h = 100, w = 130 }:contentManager(g.manager.new()):contentManager():show()",
          "    m[1] = g.element.button.radioButtonSet(1, 2, 3, 4)",
          "    m[2] = g.element.button.radioButtonSet{\"abc\", \"d\", \"efghijklmn\"}",
          "    m(2):moveRightOf(m(1), 10, \"centered\")",
          "~~~",
          "",
          "See [hs._asm.guitk.element.button.radioButton](#radioButton) for more details."
        ],
        "signature" : "hs._asm.guitk.element.button.radioButtonSet(...) -> managerObject",
        "type" : "Constructor",
        "returns" : [
          " * a new managerObject which can be used as an element to another `hs._asm.guitk.manager` or assigned to an `hs._asm.guitk` window directly.",
          ""
        ],
        "name" : "radioButtonSet",
        "parameters" : [
          " `...` - a single table of strings, or list of strings separated by commas, specifying the labels to assign to the radion buttons in the set.",
          ""
        ]
      },
      {
        "desc" : "Creates a new button element of the specified type for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new button element of the specified type for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.buttonType(type, [frame]) -> buttonObject",
        "doc" : "Creates a new button element of the specified type for `hs._asm.guitk`.\n\nParameters:\n * `button` - a string specifying the type of button to create. The string must be one of the following:\n   * \"momentaryLight\"        - When the button is clicked (on state), it appears illuminated. If the button has borders, it may also appear recessed. When the button is released, it returns to its normal (off) state. This type of button is best for simply triggering actions because it doesn’t show its state; it always displays its normal image or title.\n   * \"pushOnPushOff\"         - When the button is clicked (on state), it appears illuminated. If the button has borders, it may also appear recessed. A second click returns it to its normal (off) state.\n   * \"toggle\"                - After the first click, the button displays its alternate image or title (on state); a second click returns the button to its normal (off) state.\n   * \"switch\"                - This style is a variant of \"toggle\" that has no border and is typically used to represent a checkbox.\n   * \"radio\"                 - This style is similar to \"switch\", but it is used to constrain a selection to a single element from several elements.\n   * \"momentaryChange\"       - When the button is clicked, the alternate (on state) image and alternate title are displayed. Otherwise, the normal (off state) image and title are displayed.\n   * \"onOff\"                 - The first click highlights the button; a second click returns it to the normal (unhighlighted) state.\n   * \"momentaryPushIn\"       - When the user clicks the button (on state), the button appears illuminated. Most buttons in macOS, such as Cancel button in many dialogs, are momentary light buttons. If you click one, it highlights briefly, triggers an action, and returns to its original state.\n   * \"accelerator\"           - On pressure-sensitive systems, such as systems with the Force Touch trackpad, an accelerator button sends repeating actions as pressure changes occur. It stops sending actions when the user releases pressure entirely. Only available in macOS 10.12 and newer.\n   * \"multiLevelAccelerator\" - A multilevel accelerator button is a variation of a normal accelerator button that allows for a configurable number of stepped pressure levels. As each one is reached, the user receives light tactile feedback and an action is sent. Only available in macOS 10.12 and newer.\n * `frame` - an optional frame table specifying the position and size of the frame for the button.\n\nReturns:\n * a new buttonObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * See also:\n   * [hs._asm.guitk.element.button.buttonWithTitle](#buttonWithTitle)\n   * [hs._asm.guitk.element.button.buttonWithTitleAndImage](#buttonWithTitleAndImage)\n   * [hs._asm.guitk.element.button.buttonWithImage](#buttonWithImage)\n   * [hs._asm.guitk.element.button.checkbox](#checkbox)\n   * [hs._asm.guitk.element.button.radioButton](#radioButton)",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * See also:",
          "   * [hs._asm.guitk.element.button.buttonWithTitle](#buttonWithTitle)",
          "   * [hs._asm.guitk.element.button.buttonWithTitleAndImage](#buttonWithTitleAndImage)",
          "   * [hs._asm.guitk.element.button.buttonWithImage](#buttonWithImage)",
          "   * [hs._asm.guitk.element.button.checkbox](#checkbox)",
          "   * [hs._asm.guitk.element.button.radioButton](#radioButton)"
        ],
        "signature" : "hs._asm.guitk.element.button.buttonType(type, [frame]) -> buttonObject",
        "type" : "Constructor",
        "returns" : [
          " * a new buttonObject",
          ""
        ],
        "name" : "buttonType",
        "parameters" : [
          " * `button` - a string specifying the type of button to create. The string must be one of the following:",
          "   * \"momentaryLight\"        - When the button is clicked (on state), it appears illuminated. If the button has borders, it may also appear recessed. When the button is released, it returns to its normal (off) state. This type of button is best for simply triggering actions because it doesn’t show its state; it always displays its normal image or title.",
          "   * \"pushOnPushOff\"         - When the button is clicked (on state), it appears illuminated. If the button has borders, it may also appear recessed. A second click returns it to its normal (off) state.",
          "   * \"toggle\"                - After the first click, the button displays its alternate image or title (on state); a second click returns the button to its normal (off) state.",
          "   * \"switch\"                - This style is a variant of \"toggle\" that has no border and is typically used to represent a checkbox.",
          "   * \"radio\"                 - This style is similar to \"switch\", but it is used to constrain a selection to a single element from several elements.",
          "   * \"momentaryChange\"       - When the button is clicked, the alternate (on state) image and alternate title are displayed. Otherwise, the normal (off state) image and title are displayed.",
          "   * \"onOff\"                 - The first click highlights the button; a second click returns it to the normal (unhighlighted) state.",
          "   * \"momentaryPushIn\"       - When the user clicks the button (on state), the button appears illuminated. Most buttons in macOS, such as Cancel button in many dialogs, are momentary light buttons. If you click one, it highlights briefly, triggers an action, and returns to its original state.",
          "   * \"accelerator\"           - On pressure-sensitive systems, such as systems with the Force Touch trackpad, an accelerator button sends repeating actions as pressure changes occur. It stops sending actions when the user releases pressure entirely. Only available in macOS 10.12 and newer.",
          "   * \"multiLevelAccelerator\" - A multilevel accelerator button is a variation of a normal accelerator button that allows for a configurable number of stepped pressure levels. As each one is reached, the user receives light tactile feedback and an action is sent. Only available in macOS 10.12 and newer.",
          " * `frame` - an optional frame table specifying the position and size of the frame for the button.",
          ""
        ]
      },
      {
        "desc" : "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.buttonWithTitle(title) -> buttonObject",
        "doc" : "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title for `hs._asm.guitk`.\n\nParameters:\n * `title` - the title which will be displayed in the button\n\nReturns:\n * a new buttonObject\n\nNotes:\n * This creates a standard macOS push button with the title centered within the button.\n * The default frame created will be the minimum size necessary to display the button with its title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)\n\n * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.\n\n * See also:\n   * [hs._asm.guitk.element.button.buttonType](#buttonType)\n   * [hs._asm.guitk.element.button.buttonWithTitleAndImage](#buttonWithTitleAndImage)\n   * [hs._asm.guitk.element.button.buttonWithImage](#buttonWithImage)",
        "notes" : [
          " * This creates a standard macOS push button with the title centered within the button.",
          " * The default frame created will be the minimum size necessary to display the button with its title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)",
          "",
          " * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.",
          "",
          " * See also:",
          "   * [hs._asm.guitk.element.button.buttonType](#buttonType)",
          "   * [hs._asm.guitk.element.button.buttonWithTitleAndImage](#buttonWithTitleAndImage)",
          "   * [hs._asm.guitk.element.button.buttonWithImage](#buttonWithImage)"
        ],
        "signature" : "hs._asm.guitk.element.button.buttonWithTitle(title) -> buttonObject",
        "type" : "Constructor",
        "returns" : [
          " * a new buttonObject",
          ""
        ],
        "name" : "buttonWithTitle",
        "parameters" : [
          " * `title` - the title which will be displayed in the button",
          ""
        ]
      },
      {
        "desc" : "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title and image for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title and image for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.buttonWithTitleAndImage(title, image) -> buttonObject",
        "doc" : "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title and image for `hs._asm.guitk`.\n\nParameters:\n * `title` - the title which will be displayed in the button\n * `image` - the `hs.image` object specifying the image to display preceding the button title.\n\nReturns:\n * a new buttonObject\n\nNotes:\n * This creates a standard macOS push button with an image at the left and the title centered within the button.\n * The default frame created will be the minimum size necessary to display the button with its image and title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)\n\n * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.\n\n * See also:\n   * [hs._asm.guitk.element.button.buttonType](#buttonType)\n   * [hs._asm.guitk.element.button.buttonWithTitle](#buttonWithTitle)\n   * [hs._asm.guitk.element.button.buttonWithImage](#buttonWithImage)",
        "notes" : [
          " * This creates a standard macOS push button with an image at the left and the title centered within the button.",
          " * The default frame created will be the minimum size necessary to display the button with its image and title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)",
          "",
          " * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.",
          "",
          " * See also:",
          "   * [hs._asm.guitk.element.button.buttonType](#buttonType)",
          "   * [hs._asm.guitk.element.button.buttonWithTitle](#buttonWithTitle)",
          "   * [hs._asm.guitk.element.button.buttonWithImage](#buttonWithImage)"
        ],
        "signature" : "hs._asm.guitk.element.button.buttonWithTitleAndImage(title, image) -> buttonObject",
        "type" : "Constructor",
        "returns" : [
          " * a new buttonObject",
          ""
        ],
        "name" : "buttonWithTitleAndImage",
        "parameters" : [
          " * `title` - the title which will be displayed in the button",
          " * `image` - the `hs.image` object specifying the image to display preceding the button title.",
          ""
        ]
      },
      {
        "desc" : "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.buttonWithImage(image) -> buttonObject",
        "doc" : "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title for `hs._asm.guitk`.\n\nParameters:\n * `image` - the `hs.image` object specifying the image to display in the button.\n\nReturns:\n * a new buttonObject\n\nNotes:\n * This creates a standard macOS push button with the image centered within the button.\n * The default frame created will be the minimum size necessary to display the button with the image. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)\n\n * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.\n\n * See also:\n   * [hs._asm.guitk.element.button.buttonType](#buttonType)\n   * [hs._asm.guitk.element.button.buttonWithTitle](#buttonWithTitle)\n   * [hs._asm.guitk.element.button.buttonWithTitleAndImage](#buttonWithTitleAndImage)",
        "notes" : [
          " * This creates a standard macOS push button with the image centered within the button.",
          " * The default frame created will be the minimum size necessary to display the button with the image. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)",
          "",
          " * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.",
          "",
          " * See also:",
          "   * [hs._asm.guitk.element.button.buttonType](#buttonType)",
          "   * [hs._asm.guitk.element.button.buttonWithTitle](#buttonWithTitle)",
          "   * [hs._asm.guitk.element.button.buttonWithTitleAndImage](#buttonWithTitleAndImage)"
        ],
        "signature" : "hs._asm.guitk.element.button.buttonWithImage(image) -> buttonObject",
        "type" : "Constructor",
        "returns" : [
          " * a new buttonObject",
          ""
        ],
        "name" : "buttonWithImage",
        "parameters" : [
          " * `image` - the `hs.image` object specifying the image to display in the button.",
          ""
        ]
      },
      {
        "desc" : "Creates a new checkbox button element of the specified of type \"switch\" with the specified title for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new checkbox button element of the specified of type \"switch\" with the specified title for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.checkbox(title) -> buttonObject",
        "doc" : "Creates a new checkbox button element of the specified of type \"switch\" with the specified title for `hs._asm.guitk`.\n\nParameters:\n * `title` - the title which will be displayed next to the checkbox\n\nReturns:\n * a new buttonObject\n\nNotes:\n * This creates a standard macOS checkbox with the title next to it.\n * The default frame created will be the minimum size necessary to display the checkbox with its title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)\n\n * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.\n\n * See also [hs._asm.guitk.element.button.buttonType](#buttonType)",
        "notes" : [
          " * This creates a standard macOS checkbox with the title next to it.",
          " * The default frame created will be the minimum size necessary to display the checkbox with its title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)",
          "",
          " * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.",
          "",
          " * See also [hs._asm.guitk.element.button.buttonType](#buttonType)"
        ],
        "signature" : "hs._asm.guitk.element.button.checkbox(title) -> buttonObject",
        "type" : "Constructor",
        "returns" : [
          " * a new buttonObject",
          ""
        ],
        "name" : "checkbox",
        "parameters" : [
          " * `title` - the title which will be displayed next to the checkbox",
          ""
        ]
      },
      {
        "desc" : "Creates a new radio button element of the specified of type \"radio\" with the specified title for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new radio button element of the specified of type \"radio\" with the specified title for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.radioButton(title) -> buttonObject",
        "doc" : "Creates a new radio button element of the specified of type \"radio\" with the specified title for `hs._asm.guitk`.\n\nParameters:\n * `title` - the title which will be displayed next to the radio button\n\nReturns:\n * a new buttonObject\n\nNotes:\n * This creates a standard macOS radio button with the title next to it.\n   * Only one radio button in the same manager can be active (selected) at one time; multiple radio buttons in the same manager are treated as a group or set.\n   * To display multiple independent radio button sets in the same window or view (manager), each group must be in a separate `hs._asm.guitk.manager` object and these separate objects may then be assigned as elements to a \"parent\" manager which is assigned to the `hs._asm.guitk` window; alternatively use [hs._asm.guitk.element.button.radioButtonSet](#radioBUttonSet)\n\n * The default frame created will be the minimum size necessary to display the checkbox with its title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)\n\n * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.\n\n * See also:\n   * [hs._asm.guitk.element.button.radioButtonSet](#radioBUttonSet)\n   * [hs._asm.guitk.element.button.buttonType](#buttonType)",
        "notes" : [
          " * This creates a standard macOS radio button with the title next to it.",
          "   * Only one radio button in the same manager can be active (selected) at one time; multiple radio buttons in the same manager are treated as a group or set.",
          "   * To display multiple independent radio button sets in the same window or view (manager), each group must be in a separate `hs._asm.guitk.manager` object and these separate objects may then be assigned as elements to a \"parent\" manager which is assigned to the `hs._asm.guitk` window; alternatively use [hs._asm.guitk.element.button.radioButtonSet](#radioBUttonSet)",
          "",
          " * The default frame created will be the minimum size necessary to display the checkbox with its title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)",
          "",
          " * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.",
          "",
          " * See also:",
          "   * [hs._asm.guitk.element.button.radioButtonSet](#radioBUttonSet)",
          "   * [hs._asm.guitk.element.button.buttonType](#buttonType)"
        ],
        "signature" : "hs._asm.guitk.element.button.radioButton(title) -> buttonObject",
        "type" : "Constructor",
        "returns" : [
          " * a new buttonObject",
          ""
        ],
        "name" : "radioButton",
        "parameters" : [
          " * `title` - the title which will be displayed next to the radio button",
          ""
        ]
      }
    ],
    "doc" : "Provides button and checkbox elements for use with `hs._asm.guitk`.\n\n* This submodule inherits methods from `hs._asm.guitk.element._control` and you should consult its documentation for additional methods which may be used.\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "items" : [
      {
        "desc" : "Creates a new button element of the specified type for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new button element of the specified type for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.buttonType(type, [frame]) -> buttonObject",
        "doc" : "Creates a new button element of the specified type for `hs._asm.guitk`.\n\nParameters:\n * `button` - a string specifying the type of button to create. The string must be one of the following:\n   * \"momentaryLight\"        - When the button is clicked (on state), it appears illuminated. If the button has borders, it may also appear recessed. When the button is released, it returns to its normal (off) state. This type of button is best for simply triggering actions because it doesn’t show its state; it always displays its normal image or title.\n   * \"pushOnPushOff\"         - When the button is clicked (on state), it appears illuminated. If the button has borders, it may also appear recessed. A second click returns it to its normal (off) state.\n   * \"toggle\"                - After the first click, the button displays its alternate image or title (on state); a second click returns the button to its normal (off) state.\n   * \"switch\"                - This style is a variant of \"toggle\" that has no border and is typically used to represent a checkbox.\n   * \"radio\"                 - This style is similar to \"switch\", but it is used to constrain a selection to a single element from several elements.\n   * \"momentaryChange\"       - When the button is clicked, the alternate (on state) image and alternate title are displayed. Otherwise, the normal (off state) image and title are displayed.\n   * \"onOff\"                 - The first click highlights the button; a second click returns it to the normal (unhighlighted) state.\n   * \"momentaryPushIn\"       - When the user clicks the button (on state), the button appears illuminated. Most buttons in macOS, such as Cancel button in many dialogs, are momentary light buttons. If you click one, it highlights briefly, triggers an action, and returns to its original state.\n   * \"accelerator\"           - On pressure-sensitive systems, such as systems with the Force Touch trackpad, an accelerator button sends repeating actions as pressure changes occur. It stops sending actions when the user releases pressure entirely. Only available in macOS 10.12 and newer.\n   * \"multiLevelAccelerator\" - A multilevel accelerator button is a variation of a normal accelerator button that allows for a configurable number of stepped pressure levels. As each one is reached, the user receives light tactile feedback and an action is sent. Only available in macOS 10.12 and newer.\n * `frame` - an optional frame table specifying the position and size of the frame for the button.\n\nReturns:\n * a new buttonObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * See also:\n   * [hs._asm.guitk.element.button.buttonWithTitle](#buttonWithTitle)\n   * [hs._asm.guitk.element.button.buttonWithTitleAndImage](#buttonWithTitleAndImage)\n   * [hs._asm.guitk.element.button.buttonWithImage](#buttonWithImage)\n   * [hs._asm.guitk.element.button.checkbox](#checkbox)\n   * [hs._asm.guitk.element.button.radioButton](#radioButton)",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * See also:",
          "   * [hs._asm.guitk.element.button.buttonWithTitle](#buttonWithTitle)",
          "   * [hs._asm.guitk.element.button.buttonWithTitleAndImage](#buttonWithTitleAndImage)",
          "   * [hs._asm.guitk.element.button.buttonWithImage](#buttonWithImage)",
          "   * [hs._asm.guitk.element.button.checkbox](#checkbox)",
          "   * [hs._asm.guitk.element.button.radioButton](#radioButton)"
        ],
        "signature" : "hs._asm.guitk.element.button.buttonType(type, [frame]) -> buttonObject",
        "type" : "Constructor",
        "returns" : [
          " * a new buttonObject",
          ""
        ],
        "name" : "buttonType",
        "parameters" : [
          " * `button` - a string specifying the type of button to create. The string must be one of the following:",
          "   * \"momentaryLight\"        - When the button is clicked (on state), it appears illuminated. If the button has borders, it may also appear recessed. When the button is released, it returns to its normal (off) state. This type of button is best for simply triggering actions because it doesn’t show its state; it always displays its normal image or title.",
          "   * \"pushOnPushOff\"         - When the button is clicked (on state), it appears illuminated. If the button has borders, it may also appear recessed. A second click returns it to its normal (off) state.",
          "   * \"toggle\"                - After the first click, the button displays its alternate image or title (on state); a second click returns the button to its normal (off) state.",
          "   * \"switch\"                - This style is a variant of \"toggle\" that has no border and is typically used to represent a checkbox.",
          "   * \"radio\"                 - This style is similar to \"switch\", but it is used to constrain a selection to a single element from several elements.",
          "   * \"momentaryChange\"       - When the button is clicked, the alternate (on state) image and alternate title are displayed. Otherwise, the normal (off state) image and title are displayed.",
          "   * \"onOff\"                 - The first click highlights the button; a second click returns it to the normal (unhighlighted) state.",
          "   * \"momentaryPushIn\"       - When the user clicks the button (on state), the button appears illuminated. Most buttons in macOS, such as Cancel button in many dialogs, are momentary light buttons. If you click one, it highlights briefly, triggers an action, and returns to its original state.",
          "   * \"accelerator\"           - On pressure-sensitive systems, such as systems with the Force Touch trackpad, an accelerator button sends repeating actions as pressure changes occur. It stops sending actions when the user releases pressure entirely. Only available in macOS 10.12 and newer.",
          "   * \"multiLevelAccelerator\" - A multilevel accelerator button is a variation of a normal accelerator button that allows for a configurable number of stepped pressure levels. As each one is reached, the user receives light tactile feedback and an action is sent. Only available in macOS 10.12 and newer.",
          " * `frame` - an optional frame table specifying the position and size of the frame for the button.",
          ""
        ]
      },
      {
        "desc" : "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.buttonWithImage(image) -> buttonObject",
        "doc" : "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title for `hs._asm.guitk`.\n\nParameters:\n * `image` - the `hs.image` object specifying the image to display in the button.\n\nReturns:\n * a new buttonObject\n\nNotes:\n * This creates a standard macOS push button with the image centered within the button.\n * The default frame created will be the minimum size necessary to display the button with the image. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)\n\n * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.\n\n * See also:\n   * [hs._asm.guitk.element.button.buttonType](#buttonType)\n   * [hs._asm.guitk.element.button.buttonWithTitle](#buttonWithTitle)\n   * [hs._asm.guitk.element.button.buttonWithTitleAndImage](#buttonWithTitleAndImage)",
        "notes" : [
          " * This creates a standard macOS push button with the image centered within the button.",
          " * The default frame created will be the minimum size necessary to display the button with the image. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)",
          "",
          " * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.",
          "",
          " * See also:",
          "   * [hs._asm.guitk.element.button.buttonType](#buttonType)",
          "   * [hs._asm.guitk.element.button.buttonWithTitle](#buttonWithTitle)",
          "   * [hs._asm.guitk.element.button.buttonWithTitleAndImage](#buttonWithTitleAndImage)"
        ],
        "signature" : "hs._asm.guitk.element.button.buttonWithImage(image) -> buttonObject",
        "type" : "Constructor",
        "returns" : [
          " * a new buttonObject",
          ""
        ],
        "name" : "buttonWithImage",
        "parameters" : [
          " * `image` - the `hs.image` object specifying the image to display in the button.",
          ""
        ]
      },
      {
        "desc" : "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.buttonWithTitle(title) -> buttonObject",
        "doc" : "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title for `hs._asm.guitk`.\n\nParameters:\n * `title` - the title which will be displayed in the button\n\nReturns:\n * a new buttonObject\n\nNotes:\n * This creates a standard macOS push button with the title centered within the button.\n * The default frame created will be the minimum size necessary to display the button with its title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)\n\n * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.\n\n * See also:\n   * [hs._asm.guitk.element.button.buttonType](#buttonType)\n   * [hs._asm.guitk.element.button.buttonWithTitleAndImage](#buttonWithTitleAndImage)\n   * [hs._asm.guitk.element.button.buttonWithImage](#buttonWithImage)",
        "notes" : [
          " * This creates a standard macOS push button with the title centered within the button.",
          " * The default frame created will be the minimum size necessary to display the button with its title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)",
          "",
          " * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.",
          "",
          " * See also:",
          "   * [hs._asm.guitk.element.button.buttonType](#buttonType)",
          "   * [hs._asm.guitk.element.button.buttonWithTitleAndImage](#buttonWithTitleAndImage)",
          "   * [hs._asm.guitk.element.button.buttonWithImage](#buttonWithImage)"
        ],
        "signature" : "hs._asm.guitk.element.button.buttonWithTitle(title) -> buttonObject",
        "type" : "Constructor",
        "returns" : [
          " * a new buttonObject",
          ""
        ],
        "name" : "buttonWithTitle",
        "parameters" : [
          " * `title` - the title which will be displayed in the button",
          ""
        ]
      },
      {
        "desc" : "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title and image for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title and image for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.buttonWithTitleAndImage(title, image) -> buttonObject",
        "doc" : "Creates a new button element of the specified of type \"momentaryPushIn\" with the specified title and image for `hs._asm.guitk`.\n\nParameters:\n * `title` - the title which will be displayed in the button\n * `image` - the `hs.image` object specifying the image to display preceding the button title.\n\nReturns:\n * a new buttonObject\n\nNotes:\n * This creates a standard macOS push button with an image at the left and the title centered within the button.\n * The default frame created will be the minimum size necessary to display the button with its image and title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)\n\n * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.\n\n * See also:\n   * [hs._asm.guitk.element.button.buttonType](#buttonType)\n   * [hs._asm.guitk.element.button.buttonWithTitle](#buttonWithTitle)\n   * [hs._asm.guitk.element.button.buttonWithImage](#buttonWithImage)",
        "notes" : [
          " * This creates a standard macOS push button with an image at the left and the title centered within the button.",
          " * The default frame created will be the minimum size necessary to display the button with its image and title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)",
          "",
          " * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.",
          "",
          " * See also:",
          "   * [hs._asm.guitk.element.button.buttonType](#buttonType)",
          "   * [hs._asm.guitk.element.button.buttonWithTitle](#buttonWithTitle)",
          "   * [hs._asm.guitk.element.button.buttonWithImage](#buttonWithImage)"
        ],
        "signature" : "hs._asm.guitk.element.button.buttonWithTitleAndImage(title, image) -> buttonObject",
        "type" : "Constructor",
        "returns" : [
          " * a new buttonObject",
          ""
        ],
        "name" : "buttonWithTitleAndImage",
        "parameters" : [
          " * `title` - the title which will be displayed in the button",
          " * `image` - the `hs.image` object specifying the image to display preceding the button title.",
          ""
        ]
      },
      {
        "desc" : "Creates a new checkbox button element of the specified of type \"switch\" with the specified title for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new checkbox button element of the specified of type \"switch\" with the specified title for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.checkbox(title) -> buttonObject",
        "doc" : "Creates a new checkbox button element of the specified of type \"switch\" with the specified title for `hs._asm.guitk`.\n\nParameters:\n * `title` - the title which will be displayed next to the checkbox\n\nReturns:\n * a new buttonObject\n\nNotes:\n * This creates a standard macOS checkbox with the title next to it.\n * The default frame created will be the minimum size necessary to display the checkbox with its title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)\n\n * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.\n\n * See also [hs._asm.guitk.element.button.buttonType](#buttonType)",
        "notes" : [
          " * This creates a standard macOS checkbox with the title next to it.",
          " * The default frame created will be the minimum size necessary to display the checkbox with its title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)",
          "",
          " * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.",
          "",
          " * See also [hs._asm.guitk.element.button.buttonType](#buttonType)"
        ],
        "signature" : "hs._asm.guitk.element.button.checkbox(title) -> buttonObject",
        "type" : "Constructor",
        "returns" : [
          " * a new buttonObject",
          ""
        ],
        "name" : "checkbox",
        "parameters" : [
          " * `title` - the title which will be displayed next to the checkbox",
          ""
        ]
      },
      {
        "desc" : "Creates a new radio button element of the specified of type \"radio\" with the specified title for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new radio button element of the specified of type \"radio\" with the specified title for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.radioButton(title) -> buttonObject",
        "doc" : "Creates a new radio button element of the specified of type \"radio\" with the specified title for `hs._asm.guitk`.\n\nParameters:\n * `title` - the title which will be displayed next to the radio button\n\nReturns:\n * a new buttonObject\n\nNotes:\n * This creates a standard macOS radio button with the title next to it.\n   * Only one radio button in the same manager can be active (selected) at one time; multiple radio buttons in the same manager are treated as a group or set.\n   * To display multiple independent radio button sets in the same window or view (manager), each group must be in a separate `hs._asm.guitk.manager` object and these separate objects may then be assigned as elements to a \"parent\" manager which is assigned to the `hs._asm.guitk` window; alternatively use [hs._asm.guitk.element.button.radioButtonSet](#radioBUttonSet)\n\n * The default frame created will be the minimum size necessary to display the checkbox with its title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)\n\n * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.\n\n * See also:\n   * [hs._asm.guitk.element.button.radioButtonSet](#radioBUttonSet)\n   * [hs._asm.guitk.element.button.buttonType](#buttonType)",
        "notes" : [
          " * This creates a standard macOS radio button with the title next to it.",
          "   * Only one radio button in the same manager can be active (selected) at one time; multiple radio buttons in the same manager are treated as a group or set.",
          "   * To display multiple independent radio button sets in the same window or view (manager), each group must be in a separate `hs._asm.guitk.manager` object and these separate objects may then be assigned as elements to a \"parent\" manager which is assigned to the `hs._asm.guitk` window; alternatively use [hs._asm.guitk.element.button.radioButtonSet](#radioBUttonSet)",
          "",
          " * The default frame created will be the minimum size necessary to display the checkbox with its title. If you need to adjust the button's size further, do so with the element frame details options available once the button element is attached to a guitk manager (see `hs._asm.guitk.manager`)",
          "",
          " * This constructor uses an NSButton initializer introduced with macOS 10.12; for macOS versions prior to this, this module attempts to mimic the appearance and behavior of the button using the equivalent of [hs._asm.guitk.element.button.buttonType](#buttonType) and the other methods within this module. If you believe that something has been missed in the fallback initializer, please submit an issue to the Hammerspoon github site.",
          "",
          " * See also:",
          "   * [hs._asm.guitk.element.button.radioButtonSet](#radioBUttonSet)",
          "   * [hs._asm.guitk.element.button.buttonType](#buttonType)"
        ],
        "signature" : "hs._asm.guitk.element.button.radioButton(title) -> buttonObject",
        "type" : "Constructor",
        "returns" : [
          " * a new buttonObject",
          ""
        ],
        "name" : "radioButton",
        "parameters" : [
          " * `title` - the title which will be displayed next to the radio button",
          ""
        ]
      },
      {
        "desc" : "Creates an `hs._asm.guitk.manager` object which can be used as an element containing a set of radio buttons with labels defined by the specified title strings.",
        "stripped_doc" : [
          "Creates an `hs._asm.guitk.manager` object which can be used as an element containing a set of radio buttons with labels defined by the specified title strings.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button.radioButtonSet(...) -> managerObject",
        "doc" : "Creates an `hs._asm.guitk.manager` object which can be used as an element containing a set of radio buttons with labels defined by the specified title strings.\n\nParameters:\n `...` - a single table of strings, or list of strings separated by commas, specifying the labels to assign to the radion buttons in the set.\n\nReturns:\n * a new managerObject which can be used as an element to another `hs._asm.guitk.manager` or assigned to an `hs._asm.guitk` window directly.\n\nNotes:\n * Radio buttons in the same view (manager) are treated as related and only one can be selected at a time. By grouping radio button sets in separate managers, these independant managers can be assigned to a parent manager and each set will be seen as independent -- each set can have a selected item independent of the other radio sets which may also be displayed in the parent.\n\n * For example:\n~~~ lua\n    g = require(\"hs._asm.guitk\")\n    m = g.new{ x = 100, y = 100, h = 100, w = 130 }:contentManager(g.manager.new()):contentManager():show()\n    m[1] = g.element.button.radioButtonSet(1, 2, 3, 4)\n    m[2] = g.element.button.radioButtonSet{\"abc\", \"d\", \"efghijklmn\"}\n    m(2):moveRightOf(m(1), 10, \"centered\")\n~~~\n\nSee [hs._asm.guitk.element.button.radioButton](#radioButton) for more details.",
        "notes" : [
          " * Radio buttons in the same view (manager) are treated as related and only one can be selected at a time. By grouping radio button sets in separate managers, these independant managers can be assigned to a parent manager and each set will be seen as independent -- each set can have a selected item independent of the other radio sets which may also be displayed in the parent.",
          "",
          " * For example:",
          "~~~ lua",
          "    g = require(\"hs._asm.guitk\")",
          "    m = g.new{ x = 100, y = 100, h = 100, w = 130 }:contentManager(g.manager.new()):contentManager():show()",
          "    m[1] = g.element.button.radioButtonSet(1, 2, 3, 4)",
          "    m[2] = g.element.button.radioButtonSet{\"abc\", \"d\", \"efghijklmn\"}",
          "    m(2):moveRightOf(m(1), 10, \"centered\")",
          "~~~",
          "",
          "See [hs._asm.guitk.element.button.radioButton](#radioButton) for more details."
        ],
        "signature" : "hs._asm.guitk.element.button.radioButtonSet(...) -> managerObject",
        "type" : "Constructor",
        "returns" : [
          " * a new managerObject which can be used as an element to another `hs._asm.guitk.manager` or assigned to an `hs._asm.guitk` window directly.",
          ""
        ],
        "name" : "radioButtonSet",
        "parameters" : [
          " `...` - a single table of strings, or list of strings separated by commas, specifying the labels to assign to the radion buttons in the set.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the button allows for a mixed state in addition to \"on\" and \"off\"",
        "stripped_doc" : [
          "Get or set whether the button allows for a mixed state in addition to \"on\" and \"off\"",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:allowsMixedState([state]) -> buttonObject | boolean",
        "doc" : "Get or set whether the button allows for a mixed state in addition to \"on\" and \"off\"\n\nParameters:\n * `state` - an optional boolean specifying whether the button allows for a mixed state\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * Mixed state is typically useful only with buttons of type \"switch\" or \"radio\" and is primarily used to indicate that something is only applied partially, e.g. when part of a selection of text is bold but not all of it. When a checkbox or radio button is in the \"mixed\" state, it is displayed with a dash instead of an X or a filled in radio button.\n * See also [hs._asm.guitk.element.button:state](#state)",
        "notes" : [
          " * Mixed state is typically useful only with buttons of type \"switch\" or \"radio\" and is primarily used to indicate that something is only applied partially, e.g. when part of a selection of text is bold but not all of it. When a checkbox or radio button is in the \"mixed\" state, it is displayed with a dash instead of an X or a filled in radio button.",
          " * See also [hs._asm.guitk.element.button:state](#state)"
        ],
        "signature" : "hs._asm.guitk.element.button:allowsMixedState([state]) -> buttonObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "allowsMixedState",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the button allows for a mixed state",
          ""
        ]
      },
      {
        "desc" : "Get or set the alternate image displayed by button types which support this",
        "stripped_doc" : [
          "Get or set the alternate image displayed by button types which support this",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:alternateImage([image]) -> buttonObject | hs.image object | nil",
        "doc" : "Get or set the alternate image displayed by button types which support this\n\nParameters:\n * `image` - an optional hs.image object, or explicit nil to remove, specifying the alternate image for the button.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * For buttons which change their appearance based upon their state, this is the image which will be displayed when the button is in its \"on\" state.\n\n * Observation shows that the alternateImage value is used by the following button types:\n   * \"toggle\"          - the button will alternate between the image and the alternateImage\n   * \"momentaryChange\" - if the button is not bordered, the alternate image will be displayed while the user is clicking on the button and will revert back to the image once the user has released the mouse button.\/\/\/    * \"switch\"               - when the checkbox is checked, it will display its alternateImage as the checked box, if one has been assigned\n   * \"radio\"           - when the radio button is selected, it will display its alternateImage as the filled in radio button, if one has been assigned\n * Other button types have not been observed to use this attribute; if you believe you have discovered something we have missed here, please submit an issue to the Hamemrspoon github web site.",
        "notes" : [
          " * For buttons which change their appearance based upon their state, this is the image which will be displayed when the button is in its \"on\" state.",
          "",
          " * Observation shows that the alternateImage value is used by the following button types:",
          "   * \"toggle\"          - the button will alternate between the image and the alternateImage",
          "   * \"momentaryChange\" - if the button is not bordered, the alternate image will be displayed while the user is clicking on the button and will revert back to the image once the user has released the mouse button.\/\/\/    * \"switch\"               - when the checkbox is checked, it will display its alternateImage as the checked box, if one has been assigned",
          "   * \"radio\"           - when the radio button is selected, it will display its alternateImage as the filled in radio button, if one has been assigned",
          " * Other button types have not been observed to use this attribute; if you believe you have discovered something we have missed here, please submit an issue to the Hamemrspoon github web site."
        ],
        "signature" : "hs._asm.guitk.element.button:alternateImage([image]) -> buttonObject | hs.image object | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "alternateImage",
        "parameters" : [
          " * `image` - an optional hs.image object, or explicit nil to remove, specifying the alternate image for the button.",
          ""
        ]
      },
      {
        "desc" : "Get or set the alternate title displayed by button types which support this",
        "stripped_doc" : [
          "Get or set the alternate title displayed by button types which support this",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:alternateTitle([title] | [type]) -> buttonObject | string | hs.styledtext object",
        "doc" : "Get or set the alternate title displayed by button types which support this\n\nParameters:\n * to set the alternate title:\n   * `title` - an optional string or `hs.styledtext` object specifying the alternate title to set for the button.\n * to get the current alternate title:\n   * `type`  - an optional boolean, default false, specifying if the value retrieved should be as an `hs.styledtext` object (true) or as a string (false).\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * For buttons which change their appearance based upon their state, this is the title which will be displayed when the button is in its \"on\" state.\n\n * Observation shows that the alternateTitle value is used by the following button types:\n   * \"toggle\"          - the button will alternate between the title and the alternateTitle\n   * \"momentaryChange\" - if the button is not bordered, the alternate title will be displayed while the user is clicking on the button and will revert back to the title once the user has released the mouse button.\n   * \"switch\"          - when the checkbox is checked, it will display its alternateTitle, if one has been assigned\n   * \"radio\"           - when the radio button is selected, it will display its alternateTitle, if one has been assigned\n * Other button types have not been observed to use this attribute; if you believe you have discovered something we have missed here, please submit an issue to the Hamemrspoon github web site.",
        "notes" : [
          " * For buttons which change their appearance based upon their state, this is the title which will be displayed when the button is in its \"on\" state.",
          "",
          " * Observation shows that the alternateTitle value is used by the following button types:",
          "   * \"toggle\"          - the button will alternate between the title and the alternateTitle",
          "   * \"momentaryChange\" - if the button is not bordered, the alternate title will be displayed while the user is clicking on the button and will revert back to the title once the user has released the mouse button.",
          "   * \"switch\"          - when the checkbox is checked, it will display its alternateTitle, if one has been assigned",
          "   * \"radio\"           - when the radio button is selected, it will display its alternateTitle, if one has been assigned",
          " * Other button types have not been observed to use this attribute; if you believe you have discovered something we have missed here, please submit an issue to the Hamemrspoon github web site."
        ],
        "signature" : "hs._asm.guitk.element.button:alternateTitle([title] | [type]) -> buttonObject | string | hs.styledtext object",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "alternateTitle",
        "parameters" : [
          " * to set the alternate title:",
          "   * `title` - an optional string or `hs.styledtext` object specifying the alternate title to set for the button.",
          " * to get the current alternate title:",
          "   * `type`  - an optional boolean, default false, specifying if the value retrieved should be as an `hs.styledtext` object (true) or as a string (false).",
          ""
        ]
      },
      {
        "desc" : "Get or set the bezel style for the button",
        "stripped_doc" : [
          "Get or set the bezel style for the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:bezelStyle([style]) -> buttonObject | string",
        "doc" : "Get or set the bezel style for the button\n\nParameters:\n * `style` - an optional string specifying the bezel style for the button. Must be one of the following strings:\n   * \"rounded\"           - A rounded rectangle button, designed for text.\n   * \"regularSquare\"     - A rectangular button with a two-point border, designed for icons.\n   * \"disclosure\"        - A bezel style for use with a disclosure triangle. Works best with a button of type \"onOff\".\n   * \"shadowlessSquare\"  - Similar to \"regularSquare\", but has no shadow, so you can abut the buttons without overlapping shadows. This style would be used in a tool palette, for example.\n   * \"circular\"          - A round button with room for a small icon or a single character.\n   * \"texturedSquare\"    - A bezel style appropriate for use with textured (metal) windows.\n   * \"helpButton\"        - A round button with a question mark providing the standard help button look.\n   * \"smallSquare\"       - A simple square bezel style. Buttons using this style can be scaled to any size.\n   * \"texturedRounded\"   - A textured (metal) bezel style similar in appearance to the Finder’s action (gear) button.\n   * \"roundRect\"         - A bezel style that matches the search buttons in Finder and Mail.\n   * \"recessed\"          - A bezel style that matches the recessed buttons in Mail, Finder and Safari.\n   * \"roundedDisclosure\" - Similar to \"disclosure\", but appears as an up or down caret within a small rectangular button. Works best with a button of type \"onOff\".\n   * \"inline\"            - The inline bezel style contains a solid round-rect border background. It can be used to create an \"unread\" indicator in an outline view, or another inline button in a tableview, such as a stop progress button in a download panel. Use text for an unread indicator, and a template image for other buttons.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.button:bezelStyle([style]) -> buttonObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value."
        ],
        "name" : "bezelStyle",
        "parameters" : [
          " * `style` - an optional string specifying the bezel style for the button. Must be one of the following strings:",
          "   * \"rounded\"           - A rounded rectangle button, designed for text.",
          "   * \"regularSquare\"     - A rectangular button with a two-point border, designed for icons.",
          "   * \"disclosure\"        - A bezel style for use with a disclosure triangle. Works best with a button of type \"onOff\".",
          "   * \"shadowlessSquare\"  - Similar to \"regularSquare\", but has no shadow, so you can abut the buttons without overlapping shadows. This style would be used in a tool palette, for example.",
          "   * \"circular\"          - A round button with room for a small icon or a single character.",
          "   * \"texturedSquare\"    - A bezel style appropriate for use with textured (metal) windows.",
          "   * \"helpButton\"        - A round button with a question mark providing the standard help button look.",
          "   * \"smallSquare\"       - A simple square bezel style. Buttons using this style can be scaled to any size.",
          "   * \"texturedRounded\"   - A textured (metal) bezel style similar in appearance to the Finder’s action (gear) button.",
          "   * \"roundRect\"         - A bezel style that matches the search buttons in Finder and Mail.",
          "   * \"recessed\"          - A bezel style that matches the recessed buttons in Mail, Finder and Safari.",
          "   * \"roundedDisclosure\" - Similar to \"disclosure\", but appears as an up or down caret within a small rectangular button. Works best with a button of type \"onOff\".",
          "   * \"inline\"            - The inline bezel style contains a solid round-rect border background. It can be used to create an \"unread\" indicator in an outline view, or another inline button in a tableview, such as a stop progress button in a download panel. Use text for an unread indicator, and a template image for other buttons.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the button's border is toggled when the mouse hovers over the button",
        "stripped_doc" : [
          "Get or set whether the button's border is toggled when the mouse hovers over the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:borderOnHover([state]) -> buttonObject | boolean",
        "doc" : "Get or set whether the button's border is toggled when the mouse hovers over the button\n\nParameters:\n * `state` - an optional boolean specifying whether the button's border is toggled when the mouse hovers over the button\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * Has no effect on buttons of type \"switch\" or \"radio\"\n * Changing this value will not affect whether or not the border is currently being displayed until the cursor actually hovers over the button or the button is clicked by the user. To keep the visual display in sync, make sure to set this value before displaying the guitk (e.g. `hs._asm.guitk:show()`) or set the border manually to the initial state you wish with [hs._asm.guitk.element.button:bordered](#bordered).",
        "notes" : [
          " * Has no effect on buttons of type \"switch\" or \"radio\"",
          " * Changing this value will not affect whether or not the border is currently being displayed until the cursor actually hovers over the button or the button is clicked by the user. To keep the visual display in sync, make sure to set this value before displaying the guitk (e.g. `hs._asm.guitk:show()`) or set the border manually to the initial state you wish with [hs._asm.guitk.element.button:bordered](#bordered)."
        ],
        "signature" : "hs._asm.guitk.element.button:borderOnHover([state]) -> buttonObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "borderOnHover",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the button's border is toggled when the mouse hovers over the button",
          ""
        ]
      },
      {
        "desc" : "Get or set whether a border is displayed around the button.",
        "stripped_doc" : [
          "Get or set whether a border is displayed around the button.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:bordered([state]) -> buttonObject | boolean",
        "doc" : "Get or set whether a border is displayed around the button.\n\nParameters:\n * `state` - an optional boolean specifying whether the button should display a border around the button area or not.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * setting this to true for the \"switch\" or \"radio\" button types will prevent the alternate image, if defined, from being displayed.",
        "notes" : [
          " * setting this to true for the \"switch\" or \"radio\" button types will prevent the alternate image, if defined, from being displayed."
        ],
        "signature" : "hs._asm.guitk.element.button:bordered([state]) -> buttonObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "bordered",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the button should display a border around the button area or not.",
          ""
        ]
      },
      {
        "desc" : "Get or set the callback function which will be invoked whenever the user clicks on the button element.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked whenever the user clicks on the button element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:callback([fn | nil]) -> buttonObject | fn | nil",
        "doc" : "Get or set the callback function which will be invoked whenever the user clicks on the button element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the clicks on the button.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * The button callback will receive two arguments and should return none. The arguments will be the buttonObject userdata and the new button state -- see [hs._asm.guitk.element.button:state](#state)",
        "notes" : [
          " * The button callback will receive two arguments and should return none. The arguments will be the buttonObject userdata and the new button state -- see [hs._asm.guitk.element.button:state](#state)"
        ],
        "signature" : "hs._asm.guitk.element.button:callback([fn | nil]) -> buttonObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the clicks on the button.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the button is currently highlighted.",
        "stripped_doc" : [
          "Get or set whether the button is currently highlighted.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:highlighted([state]) -> buttonObject | boolean",
        "doc" : "Get or set whether the button is currently highlighted.\n\nParameters:\n * `state` - an optional boolean specifying whether or not the button is currently highlighted.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * Highlighting makes the button appear recessed, displays its alternate title or image, or causes the button to appear illuminated.",
        "notes" : [
          " * Highlighting makes the button appear recessed, displays its alternate title or image, or causes the button to appear illuminated."
        ],
        "signature" : "hs._asm.guitk.element.button:highlighted([state]) -> buttonObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "highlighted",
        "parameters" : [
          " * `state` - an optional boolean specifying whether or not the button is currently highlighted.",
          ""
        ]
      },
      {
        "desc" : "Get or set the image displayed for the button",
        "stripped_doc" : [
          "Get or set the image displayed for the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:image([image]) -> buttonObject | hs.image object | nil",
        "doc" : "Get or set the image displayed for the button\n\nParameters:\n * `image` - an optional hs.image object, or explicit nil to remove, specifying the image for the button.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * For buttons which change their appearance based upon their state, this is the image which will be displayed when the button is in its \"off\" state.",
        "notes" : [
          " * For buttons which change their appearance based upon their state, this is the image which will be displayed when the button is in its \"off\" state."
        ],
        "signature" : "hs._asm.guitk.element.button:image([image]) -> buttonObject | hs.image object | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "image",
        "parameters" : [
          " * `image` - an optional hs.image object, or explicit nil to remove, specifying the image for the button.",
          ""
        ]
      },
      {
        "desc" : "Get or set the position of the image relative to its title for the button",
        "stripped_doc" : [
          "Get or set the position of the image relative to its title for the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:imagePosition([position]) -> buttonObject | string",
        "doc" : "Get or set the position of the image relative to its title for the button\n\nParameters:\n * `position` - an optional string specifying the position of the image relative to its title for the button. Must be one of the following strings:\n   * \"none\"     - The button doesn’t display an image.\n   * \"only\"     - The button displays an image, but not a title.\n   * \"left\"     - The image is to the left of the title.\n   * \"right\"    - The image is to the right of the title.\n   * \"below\"    - The image is below the title.\n   * \"above\"    - The image is above the title.\n   * \"overlaps\" - The image overlaps the title.\n\n   * \"leading\"  - The image leads the title as defined for the current language script direction. Available in macOS 10.12+.\n   * \"trailing\" - The image trails the title as defined for the current language script direction. Available in macOS 10.12+.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.button:imagePosition([position]) -> buttonObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value."
        ],
        "name" : "imagePosition",
        "parameters" : [
          " * `position` - an optional string specifying the position of the image relative to its title for the button. Must be one of the following strings:",
          "   * \"none\"     - The button doesn’t display an image.",
          "   * \"only\"     - The button displays an image, but not a title.",
          "   * \"left\"     - The image is to the left of the title.",
          "   * \"right\"    - The image is to the right of the title.",
          "   * \"below\"    - The image is below the title.",
          "   * \"above\"    - The image is above the title.",
          "   * \"overlaps\" - The image overlaps the title.",
          "",
          "   * \"leading\"  - The image leads the title as defined for the current language script direction. Available in macOS 10.12+.",
          "   * \"trailing\" - The image trails the title as defined for the current language script direction. Available in macOS 10.12+.",
          ""
        ]
      },
      {
        "desc" : "Get or set the scaling mode applied to the image for the button",
        "stripped_doc" : [
          "Get or set the scaling mode applied to the image for the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:imageScaling([scale]) -> buttonObject | string",
        "doc" : "Get or set the scaling mode applied to the image for the button\n\nParameters:\n * `scale` - an optional string specifying the scaling mode applied to the image for the button. Must be one of the following strings:\n   * \"proportionallyDown\"     - If it is too large for the destination, scale the image down while preserving the aspect ratio.\n   * \"axesIndependently\"      - Scale each dimension to exactly fit destination.\n   * \"none\"                   - Do not scale the image.\n   * \"proportionallyUpOrDown\" - Scale the image to its maximum possible dimensions while both staying within the destination area and preserving its aspect ratio.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.button:imageScaling([scale]) -> buttonObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value."
        ],
        "name" : "imageScaling",
        "parameters" : [
          " * `scale` - an optional string specifying the scaling mode applied to the image for the button. Must be one of the following strings:",
          "   * \"proportionallyDown\"     - If it is too large for the destination, scale the image down while preserving the aspect ratio.",
          "   * \"axesIndependently\"      - Scale each dimension to exactly fit destination.",
          "   * \"none\"                   - Do not scale the image.",
          "   * \"proportionallyUpOrDown\" - Scale the image to its maximum possible dimensions while both staying within the destination area and preserving its aspect ratio.",
          ""
        ]
      },
      {
        "desc" : "Get or set the number of discrete pressure levels recognized by a button of type \"multiLevelAccelerator\"",
        "stripped_doc" : [
          "Get or set the number of discrete pressure levels recognized by a button of type \"multiLevelAccelerator\"",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:maxAcceleratorLevel([level]) -> buttonObject | integer",
        "doc" : "Get or set the number of discrete pressure levels recognized by a button of type \"multiLevelAccelerator\"\n\nParameters:\n * `level` - an optional integer specifying the number of discrete pressure levels recognized by a button of type \"multiLevelAccelerator\". Must be an integer between 1 and 5 inclusive.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * This method and the \"multiLevelAccelerator\" button type are only supported in macOS 10.12 and newer.",
        "notes" : [
          " * This method and the \"multiLevelAccelerator\" button type are only supported in macOS 10.12 and newer."
        ],
        "signature" : "hs._asm.guitk.element.button:maxAcceleratorLevel([level]) -> buttonObject | integer",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "maxAcceleratorLevel",
        "parameters" : [
          " * `level` - an optional integer specifying the number of discrete pressure levels recognized by a button of type \"multiLevelAccelerator\". Must be an integer between 1 and 5 inclusive.",
          ""
        ]
      },
      {
        "desc" : "Get or set the delay and interval periods for the callbacks of a continuous button.",
        "stripped_doc" : [
          "Get or set the delay and interval periods for the callbacks of a continuous button.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:periodicDelay([table]) -> buttonObject | table",
        "doc" : "Get or set the delay and interval periods for the callbacks of a continuous button.\n\nParameters:\n * `table` - an optional table specifying the delay and interval periods for the callbacks of a continuous button. The default is { 0.4, 0.075 }.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * To make a button continuous, see `hs._asm.guitk.element._control:continuous`. By default, buttons are *not* continuous.\n\n * The table passed in as an argument or returned by this method should contain two numbers:\n   * the delay in seconds before the callback will be first invoked for the continuous button\n   * the interval in seconds between subsequent callbacks after the first one has been invoked.\n * Once the user releases the mouse button, a final callback will be invoked for the button and will reflect the new [hs._asm.guitk.element.button:state](#state) for the button.",
        "notes" : [
          " * To make a button continuous, see `hs._asm.guitk.element._control:continuous`. By default, buttons are *not* continuous.",
          "",
          " * The table passed in as an argument or returned by this method should contain two numbers:",
          "   * the delay in seconds before the callback will be first invoked for the continuous button",
          "   * the interval in seconds between subsequent callbacks after the first one has been invoked.",
          " * Once the user releases the mouse button, a final callback will be invoked for the button and will reflect the new [hs._asm.guitk.element.button:state](#state) for the button."
        ],
        "signature" : "hs._asm.guitk.element.button:periodicDelay([table]) -> buttonObject | table",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "periodicDelay",
        "parameters" : [
          " * `table` - an optional table specifying the delay and interval periods for the callbacks of a continuous button. The default is { 0.4, 0.075 }.",
          ""
        ]
      },
      {
        "desc" : "Get or set the sound played when the user clicks on the button",
        "stripped_doc" : [
          "Get or set the sound played when the user clicks on the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:sound([sound]) -> buttonObject | hs.sound object | nil",
        "doc" : "Get or set the sound played when the user clicks on the button\n\nParameters:\n * `sound` - an optional hs.sound object, or explicit nil to remove, specifying the sound played when the user clicks on the button\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.button:sound([sound]) -> buttonObject | hs.sound object | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value."
        ],
        "name" : "sound",
        "parameters" : [
          " * `sound` - an optional hs.sound object, or explicit nil to remove, specifying the sound played when the user clicks on the button",
          ""
        ]
      },
      {
        "desc" : "Get or set the current state of the button.",
        "stripped_doc" : [
          "Get or set the current state of the button.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:state([state]) -> buttonObject | string",
        "doc" : "Get or set the current state of the button.\n\nParameters:\n * `state` - an optional string used to set the current state of the button. Must be one of \"on\", \"off\", or \"mixed\".\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * Setting the state to \"mixed\" is only valid when [hs._asm.guitk.element.button:allowsMixedState](#allowsMixedState) is set to true.\n * Mixed state is typically useful only with buttons of type \"switch\" or \"radio\" and is primarily used to indicate that something is only applied partially, e.g. when part of a selection of text is bold but not all of it. When a checkbox or radio button is in the \"mixed\" state, it is displayed with a dash instead of an X or a filled in radio button.",
        "notes" : [
          " * Setting the state to \"mixed\" is only valid when [hs._asm.guitk.element.button:allowsMixedState](#allowsMixedState) is set to true.",
          " * Mixed state is typically useful only with buttons of type \"switch\" or \"radio\" and is primarily used to indicate that something is only applied partially, e.g. when part of a selection of text is bold but not all of it. When a checkbox or radio button is in the \"mixed\" state, it is displayed with a dash instead of an X or a filled in radio button."
        ],
        "signature" : "hs._asm.guitk.element.button:state([state]) -> buttonObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "state",
        "parameters" : [
          " * `state` - an optional string used to set the current state of the button. Must be one of \"on\", \"off\", or \"mixed\".",
          ""
        ]
      },
      {
        "desc" : "Get or set the title displayed for the button",
        "stripped_doc" : [
          "Get or set the title displayed for the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:title([title] | [type]) -> buttonObject | string | hs.styledtext object",
        "doc" : "Get or set the title displayed for the button\n\nParameters:\n * to set the title:\n   * `title` - an optional string or `hs.styledtext` object specifying the title to set for the button.\n * to get the current title:\n   * `type`  - an optional boolean, default false, specifying if the value retrieved should be as an `hs.styledtext` object (true) or as a string (false).\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * For buttons which change their appearance based upon their state, this is the title which will be displayed when the button is in its \"off\" state.\n\n * The button constructors which allow specifying a title require a string; if you wish to change to a styled text object, you'll need to invoke this method on the new object after it is constructed.",
        "notes" : [
          " * For buttons which change their appearance based upon their state, this is the title which will be displayed when the button is in its \"off\" state.",
          "",
          " * The button constructors which allow specifying a title require a string; if you wish to change to a styled text object, you'll need to invoke this method on the new object after it is constructed."
        ],
        "signature" : "hs._asm.guitk.element.button:title([title] | [type]) -> buttonObject | string | hs.styledtext object",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "title",
        "parameters" : [
          " * to set the title:",
          "   * `title` - an optional string or `hs.styledtext` object specifying the title to set for the button.",
          " * to get the current title:",
          "   * `type`  - an optional boolean, default false, specifying if the value retrieved should be as an `hs.styledtext` object (true) or as a string (false).",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the button's background is transparent.",
        "stripped_doc" : [
          "Get or set whether the button's background is transparent.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:transparent([state]) -> buttonObject | boolean",
        "doc" : "Get or set whether the button's background is transparent.\n\nParameters:\n * `state` - an optional boolean specifying whether the button's background is transparent.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.button:transparent([state]) -> buttonObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value."
        ],
        "name" : "transparent",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the button's background is transparent.",
          ""
        ]
      },
      {
        "desc" : "Get the current value represented by the button's state",
        "stripped_doc" : [
          "Get the current value represented by the button's state",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:value([float]) -> integer | double",
        "doc" : "Get the current value represented by the button's state\n\nParameters:\n * `float` - an optional boolean specifying whether or not the value should be returned as a number (true) or as an integer (false). Defaults to false.\n\nReturns:\n * The current value of the button as represented by its state.\n\nNotes:\n * In general, this method will return 0 when the button's state is \"off\" and 1 when the button's state is \"on\" -- see [hs._asm.guitk.element.button:state](#state).\n * If [hs._asm.guitk.element.button:allowsMixedState](#allowsMixedState) has been set to true for this button, this method will return -1 when the button's state is \"mixed\".\n\n * If the button is of the \"accelerator\" type and the user is using a Force Touch capable trackpad, you can pass `true` to this method to get a relative measure of the amount of pressure being applied; this method will return a number between 1.0 and 2.0 representing the amount of pressure being applied when `float` is set to true.  If `float` is false or left out, then an \"accelerator\" type button will just return 1 as long as any pressure is being applied to the button.\n\n * If the button is of the \"multiLevelAccelerator\" type and the user is using a Force Touch capable trackpad, this method will return a number between 0 (not being pressed) up to the value set for [hs._asm.guitk.element.button:maxAcceleratorLevel](#maxAcceleratorLevel), depending upon how much pressure is being applied to the button.",
        "notes" : [
          " * In general, this method will return 0 when the button's state is \"off\" and 1 when the button's state is \"on\" -- see [hs._asm.guitk.element.button:state](#state).",
          " * If [hs._asm.guitk.element.button:allowsMixedState](#allowsMixedState) has been set to true for this button, this method will return -1 when the button's state is \"mixed\".",
          "",
          " * If the button is of the \"accelerator\" type and the user is using a Force Touch capable trackpad, you can pass `true` to this method to get a relative measure of the amount of pressure being applied; this method will return a number between 1.0 and 2.0 representing the amount of pressure being applied when `float` is set to true.  If `float` is false or left out, then an \"accelerator\" type button will just return 1 as long as any pressure is being applied to the button.",
          "",
          " * If the button is of the \"multiLevelAccelerator\" type and the user is using a Force Touch capable trackpad, this method will return a number between 0 (not being pressed) up to the value set for [hs._asm.guitk.element.button:maxAcceleratorLevel](#maxAcceleratorLevel), depending upon how much pressure is being applied to the button."
        ],
        "signature" : "hs._asm.guitk.element.button:value([float]) -> integer | double",
        "type" : "Method",
        "returns" : [
          " * The current value of the button as represented by its state.",
          ""
        ],
        "name" : "value",
        "parameters" : [
          " * `float` - an optional boolean specifying whether or not the value should be returned as a number (true) or as an integer (false). Defaults to false.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Get or set the callback function which will be invoked whenever the user clicks on the button element.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked whenever the user clicks on the button element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:callback([fn | nil]) -> buttonObject | fn | nil",
        "doc" : "Get or set the callback function which will be invoked whenever the user clicks on the button element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the clicks on the button.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * The button callback will receive two arguments and should return none. The arguments will be the buttonObject userdata and the new button state -- see [hs._asm.guitk.element.button:state](#state)",
        "notes" : [
          " * The button callback will receive two arguments and should return none. The arguments will be the buttonObject userdata and the new button state -- see [hs._asm.guitk.element.button:state](#state)"
        ],
        "signature" : "hs._asm.guitk.element.button:callback([fn | nil]) -> buttonObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the clicks on the button.",
          ""
        ]
      },
      {
        "desc" : "Get or set the title displayed for the button",
        "stripped_doc" : [
          "Get or set the title displayed for the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:title([title] | [type]) -> buttonObject | string | hs.styledtext object",
        "doc" : "Get or set the title displayed for the button\n\nParameters:\n * to set the title:\n   * `title` - an optional string or `hs.styledtext` object specifying the title to set for the button.\n * to get the current title:\n   * `type`  - an optional boolean, default false, specifying if the value retrieved should be as an `hs.styledtext` object (true) or as a string (false).\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * For buttons which change their appearance based upon their state, this is the title which will be displayed when the button is in its \"off\" state.\n\n * The button constructors which allow specifying a title require a string; if you wish to change to a styled text object, you'll need to invoke this method on the new object after it is constructed.",
        "notes" : [
          " * For buttons which change their appearance based upon their state, this is the title which will be displayed when the button is in its \"off\" state.",
          "",
          " * The button constructors which allow specifying a title require a string; if you wish to change to a styled text object, you'll need to invoke this method on the new object after it is constructed."
        ],
        "signature" : "hs._asm.guitk.element.button:title([title] | [type]) -> buttonObject | string | hs.styledtext object",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "title",
        "parameters" : [
          " * to set the title:",
          "   * `title` - an optional string or `hs.styledtext` object specifying the title to set for the button.",
          " * to get the current title:",
          "   * `type`  - an optional boolean, default false, specifying if the value retrieved should be as an `hs.styledtext` object (true) or as a string (false).",
          ""
        ]
      },
      {
        "desc" : "Get or set the alternate title displayed by button types which support this",
        "stripped_doc" : [
          "Get or set the alternate title displayed by button types which support this",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:alternateTitle([title] | [type]) -> buttonObject | string | hs.styledtext object",
        "doc" : "Get or set the alternate title displayed by button types which support this\n\nParameters:\n * to set the alternate title:\n   * `title` - an optional string or `hs.styledtext` object specifying the alternate title to set for the button.\n * to get the current alternate title:\n   * `type`  - an optional boolean, default false, specifying if the value retrieved should be as an `hs.styledtext` object (true) or as a string (false).\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * For buttons which change their appearance based upon their state, this is the title which will be displayed when the button is in its \"on\" state.\n\n * Observation shows that the alternateTitle value is used by the following button types:\n   * \"toggle\"          - the button will alternate between the title and the alternateTitle\n   * \"momentaryChange\" - if the button is not bordered, the alternate title will be displayed while the user is clicking on the button and will revert back to the title once the user has released the mouse button.\n   * \"switch\"          - when the checkbox is checked, it will display its alternateTitle, if one has been assigned\n   * \"radio\"           - when the radio button is selected, it will display its alternateTitle, if one has been assigned\n * Other button types have not been observed to use this attribute; if you believe you have discovered something we have missed here, please submit an issue to the Hamemrspoon github web site.",
        "notes" : [
          " * For buttons which change their appearance based upon their state, this is the title which will be displayed when the button is in its \"on\" state.",
          "",
          " * Observation shows that the alternateTitle value is used by the following button types:",
          "   * \"toggle\"          - the button will alternate between the title and the alternateTitle",
          "   * \"momentaryChange\" - if the button is not bordered, the alternate title will be displayed while the user is clicking on the button and will revert back to the title once the user has released the mouse button.",
          "   * \"switch\"          - when the checkbox is checked, it will display its alternateTitle, if one has been assigned",
          "   * \"radio\"           - when the radio button is selected, it will display its alternateTitle, if one has been assigned",
          " * Other button types have not been observed to use this attribute; if you believe you have discovered something we have missed here, please submit an issue to the Hamemrspoon github web site."
        ],
        "signature" : "hs._asm.guitk.element.button:alternateTitle([title] | [type]) -> buttonObject | string | hs.styledtext object",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "alternateTitle",
        "parameters" : [
          " * to set the alternate title:",
          "   * `title` - an optional string or `hs.styledtext` object specifying the alternate title to set for the button.",
          " * to get the current alternate title:",
          "   * `type`  - an optional boolean, default false, specifying if the value retrieved should be as an `hs.styledtext` object (true) or as a string (false).",
          ""
        ]
      },
      {
        "desc" : "Get or set whether a border is displayed around the button.",
        "stripped_doc" : [
          "Get or set whether a border is displayed around the button.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:bordered([state]) -> buttonObject | boolean",
        "doc" : "Get or set whether a border is displayed around the button.\n\nParameters:\n * `state` - an optional boolean specifying whether the button should display a border around the button area or not.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * setting this to true for the \"switch\" or \"radio\" button types will prevent the alternate image, if defined, from being displayed.",
        "notes" : [
          " * setting this to true for the \"switch\" or \"radio\" button types will prevent the alternate image, if defined, from being displayed."
        ],
        "signature" : "hs._asm.guitk.element.button:bordered([state]) -> buttonObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "bordered",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the button should display a border around the button area or not.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the button's background is transparent.",
        "stripped_doc" : [
          "Get or set whether the button's background is transparent.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:transparent([state]) -> buttonObject | boolean",
        "doc" : "Get or set whether the button's background is transparent.\n\nParameters:\n * `state` - an optional boolean specifying whether the button's background is transparent.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.button:transparent([state]) -> buttonObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value."
        ],
        "name" : "transparent",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the button's background is transparent.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the button's border is toggled when the mouse hovers over the button",
        "stripped_doc" : [
          "Get or set whether the button's border is toggled when the mouse hovers over the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:borderOnHover([state]) -> buttonObject | boolean",
        "doc" : "Get or set whether the button's border is toggled when the mouse hovers over the button\n\nParameters:\n * `state` - an optional boolean specifying whether the button's border is toggled when the mouse hovers over the button\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * Has no effect on buttons of type \"switch\" or \"radio\"\n * Changing this value will not affect whether or not the border is currently being displayed until the cursor actually hovers over the button or the button is clicked by the user. To keep the visual display in sync, make sure to set this value before displaying the guitk (e.g. `hs._asm.guitk:show()`) or set the border manually to the initial state you wish with [hs._asm.guitk.element.button:bordered](#bordered).",
        "notes" : [
          " * Has no effect on buttons of type \"switch\" or \"radio\"",
          " * Changing this value will not affect whether or not the border is currently being displayed until the cursor actually hovers over the button or the button is clicked by the user. To keep the visual display in sync, make sure to set this value before displaying the guitk (e.g. `hs._asm.guitk:show()`) or set the border manually to the initial state you wish with [hs._asm.guitk.element.button:bordered](#bordered)."
        ],
        "signature" : "hs._asm.guitk.element.button:borderOnHover([state]) -> buttonObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "borderOnHover",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the button's border is toggled when the mouse hovers over the button",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the button allows for a mixed state in addition to \"on\" and \"off\"",
        "stripped_doc" : [
          "Get or set whether the button allows for a mixed state in addition to \"on\" and \"off\"",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:allowsMixedState([state]) -> buttonObject | boolean",
        "doc" : "Get or set whether the button allows for a mixed state in addition to \"on\" and \"off\"\n\nParameters:\n * `state` - an optional boolean specifying whether the button allows for a mixed state\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * Mixed state is typically useful only with buttons of type \"switch\" or \"radio\" and is primarily used to indicate that something is only applied partially, e.g. when part of a selection of text is bold but not all of it. When a checkbox or radio button is in the \"mixed\" state, it is displayed with a dash instead of an X or a filled in radio button.\n * See also [hs._asm.guitk.element.button:state](#state)",
        "notes" : [
          " * Mixed state is typically useful only with buttons of type \"switch\" or \"radio\" and is primarily used to indicate that something is only applied partially, e.g. when part of a selection of text is bold but not all of it. When a checkbox or radio button is in the \"mixed\" state, it is displayed with a dash instead of an X or a filled in radio button.",
          " * See also [hs._asm.guitk.element.button:state](#state)"
        ],
        "signature" : "hs._asm.guitk.element.button:allowsMixedState([state]) -> buttonObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "allowsMixedState",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the button allows for a mixed state",
          ""
        ]
      },
      {
        "desc" : "Get or set the bezel style for the button",
        "stripped_doc" : [
          "Get or set the bezel style for the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:bezelStyle([style]) -> buttonObject | string",
        "doc" : "Get or set the bezel style for the button\n\nParameters:\n * `style` - an optional string specifying the bezel style for the button. Must be one of the following strings:\n   * \"rounded\"           - A rounded rectangle button, designed for text.\n   * \"regularSquare\"     - A rectangular button with a two-point border, designed for icons.\n   * \"disclosure\"        - A bezel style for use with a disclosure triangle. Works best with a button of type \"onOff\".\n   * \"shadowlessSquare\"  - Similar to \"regularSquare\", but has no shadow, so you can abut the buttons without overlapping shadows. This style would be used in a tool palette, for example.\n   * \"circular\"          - A round button with room for a small icon or a single character.\n   * \"texturedSquare\"    - A bezel style appropriate for use with textured (metal) windows.\n   * \"helpButton\"        - A round button with a question mark providing the standard help button look.\n   * \"smallSquare\"       - A simple square bezel style. Buttons using this style can be scaled to any size.\n   * \"texturedRounded\"   - A textured (metal) bezel style similar in appearance to the Finder’s action (gear) button.\n   * \"roundRect\"         - A bezel style that matches the search buttons in Finder and Mail.\n   * \"recessed\"          - A bezel style that matches the recessed buttons in Mail, Finder and Safari.\n   * \"roundedDisclosure\" - Similar to \"disclosure\", but appears as an up or down caret within a small rectangular button. Works best with a button of type \"onOff\".\n   * \"inline\"            - The inline bezel style contains a solid round-rect border background. It can be used to create an \"unread\" indicator in an outline view, or another inline button in a tableview, such as a stop progress button in a download panel. Use text for an unread indicator, and a template image for other buttons.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.button:bezelStyle([style]) -> buttonObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value."
        ],
        "name" : "bezelStyle",
        "parameters" : [
          " * `style` - an optional string specifying the bezel style for the button. Must be one of the following strings:",
          "   * \"rounded\"           - A rounded rectangle button, designed for text.",
          "   * \"regularSquare\"     - A rectangular button with a two-point border, designed for icons.",
          "   * \"disclosure\"        - A bezel style for use with a disclosure triangle. Works best with a button of type \"onOff\".",
          "   * \"shadowlessSquare\"  - Similar to \"regularSquare\", but has no shadow, so you can abut the buttons without overlapping shadows. This style would be used in a tool palette, for example.",
          "   * \"circular\"          - A round button with room for a small icon or a single character.",
          "   * \"texturedSquare\"    - A bezel style appropriate for use with textured (metal) windows.",
          "   * \"helpButton\"        - A round button with a question mark providing the standard help button look.",
          "   * \"smallSquare\"       - A simple square bezel style. Buttons using this style can be scaled to any size.",
          "   * \"texturedRounded\"   - A textured (metal) bezel style similar in appearance to the Finder’s action (gear) button.",
          "   * \"roundRect\"         - A bezel style that matches the search buttons in Finder and Mail.",
          "   * \"recessed\"          - A bezel style that matches the recessed buttons in Mail, Finder and Safari.",
          "   * \"roundedDisclosure\" - Similar to \"disclosure\", but appears as an up or down caret within a small rectangular button. Works best with a button of type \"onOff\".",
          "   * \"inline\"            - The inline bezel style contains a solid round-rect border background. It can be used to create an \"unread\" indicator in an outline view, or another inline button in a tableview, such as a stop progress button in a download panel. Use text for an unread indicator, and a template image for other buttons.",
          ""
        ]
      },
      {
        "desc" : "Get or set the position of the image relative to its title for the button",
        "stripped_doc" : [
          "Get or set the position of the image relative to its title for the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:imagePosition([position]) -> buttonObject | string",
        "doc" : "Get or set the position of the image relative to its title for the button\n\nParameters:\n * `position` - an optional string specifying the position of the image relative to its title for the button. Must be one of the following strings:\n   * \"none\"     - The button doesn’t display an image.\n   * \"only\"     - The button displays an image, but not a title.\n   * \"left\"     - The image is to the left of the title.\n   * \"right\"    - The image is to the right of the title.\n   * \"below\"    - The image is below the title.\n   * \"above\"    - The image is above the title.\n   * \"overlaps\" - The image overlaps the title.\n\n   * \"leading\"  - The image leads the title as defined for the current language script direction. Available in macOS 10.12+.\n   * \"trailing\" - The image trails the title as defined for the current language script direction. Available in macOS 10.12+.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.button:imagePosition([position]) -> buttonObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value."
        ],
        "name" : "imagePosition",
        "parameters" : [
          " * `position` - an optional string specifying the position of the image relative to its title for the button. Must be one of the following strings:",
          "   * \"none\"     - The button doesn’t display an image.",
          "   * \"only\"     - The button displays an image, but not a title.",
          "   * \"left\"     - The image is to the left of the title.",
          "   * \"right\"    - The image is to the right of the title.",
          "   * \"below\"    - The image is below the title.",
          "   * \"above\"    - The image is above the title.",
          "   * \"overlaps\" - The image overlaps the title.",
          "",
          "   * \"leading\"  - The image leads the title as defined for the current language script direction. Available in macOS 10.12+.",
          "   * \"trailing\" - The image trails the title as defined for the current language script direction. Available in macOS 10.12+.",
          ""
        ]
      },
      {
        "desc" : "Get or set the scaling mode applied to the image for the button",
        "stripped_doc" : [
          "Get or set the scaling mode applied to the image for the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:imageScaling([scale]) -> buttonObject | string",
        "doc" : "Get or set the scaling mode applied to the image for the button\n\nParameters:\n * `scale` - an optional string specifying the scaling mode applied to the image for the button. Must be one of the following strings:\n   * \"proportionallyDown\"     - If it is too large for the destination, scale the image down while preserving the aspect ratio.\n   * \"axesIndependently\"      - Scale each dimension to exactly fit destination.\n   * \"none\"                   - Do not scale the image.\n   * \"proportionallyUpOrDown\" - Scale the image to its maximum possible dimensions while both staying within the destination area and preserving its aspect ratio.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.button:imageScaling([scale]) -> buttonObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value."
        ],
        "name" : "imageScaling",
        "parameters" : [
          " * `scale` - an optional string specifying the scaling mode applied to the image for the button. Must be one of the following strings:",
          "   * \"proportionallyDown\"     - If it is too large for the destination, scale the image down while preserving the aspect ratio.",
          "   * \"axesIndependently\"      - Scale each dimension to exactly fit destination.",
          "   * \"none\"                   - Do not scale the image.",
          "   * \"proportionallyUpOrDown\" - Scale the image to its maximum possible dimensions while both staying within the destination area and preserving its aspect ratio.",
          ""
        ]
      },
      {
        "desc" : "Get or set the image displayed for the button",
        "stripped_doc" : [
          "Get or set the image displayed for the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:image([image]) -> buttonObject | hs.image object | nil",
        "doc" : "Get or set the image displayed for the button\n\nParameters:\n * `image` - an optional hs.image object, or explicit nil to remove, specifying the image for the button.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * For buttons which change their appearance based upon their state, this is the image which will be displayed when the button is in its \"off\" state.",
        "notes" : [
          " * For buttons which change their appearance based upon their state, this is the image which will be displayed when the button is in its \"off\" state."
        ],
        "signature" : "hs._asm.guitk.element.button:image([image]) -> buttonObject | hs.image object | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "image",
        "parameters" : [
          " * `image` - an optional hs.image object, or explicit nil to remove, specifying the image for the button.",
          ""
        ]
      },
      {
        "desc" : "Get or set the sound played when the user clicks on the button",
        "stripped_doc" : [
          "Get or set the sound played when the user clicks on the button",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:sound([sound]) -> buttonObject | hs.sound object | nil",
        "doc" : "Get or set the sound played when the user clicks on the button\n\nParameters:\n * `sound` - an optional hs.sound object, or explicit nil to remove, specifying the sound played when the user clicks on the button\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.button:sound([sound]) -> buttonObject | hs.sound object | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value."
        ],
        "name" : "sound",
        "parameters" : [
          " * `sound` - an optional hs.sound object, or explicit nil to remove, specifying the sound played when the user clicks on the button",
          ""
        ]
      },
      {
        "desc" : "Get or set the alternate image displayed by button types which support this",
        "stripped_doc" : [
          "Get or set the alternate image displayed by button types which support this",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:alternateImage([image]) -> buttonObject | hs.image object | nil",
        "doc" : "Get or set the alternate image displayed by button types which support this\n\nParameters:\n * `image` - an optional hs.image object, or explicit nil to remove, specifying the alternate image for the button.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * For buttons which change their appearance based upon their state, this is the image which will be displayed when the button is in its \"on\" state.\n\n * Observation shows that the alternateImage value is used by the following button types:\n   * \"toggle\"          - the button will alternate between the image and the alternateImage\n   * \"momentaryChange\" - if the button is not bordered, the alternate image will be displayed while the user is clicking on the button and will revert back to the image once the user has released the mouse button.\/\/\/    * \"switch\"               - when the checkbox is checked, it will display its alternateImage as the checked box, if one has been assigned\n   * \"radio\"           - when the radio button is selected, it will display its alternateImage as the filled in radio button, if one has been assigned\n * Other button types have not been observed to use this attribute; if you believe you have discovered something we have missed here, please submit an issue to the Hamemrspoon github web site.",
        "notes" : [
          " * For buttons which change their appearance based upon their state, this is the image which will be displayed when the button is in its \"on\" state.",
          "",
          " * Observation shows that the alternateImage value is used by the following button types:",
          "   * \"toggle\"          - the button will alternate between the image and the alternateImage",
          "   * \"momentaryChange\" - if the button is not bordered, the alternate image will be displayed while the user is clicking on the button and will revert back to the image once the user has released the mouse button.\/\/\/    * \"switch\"               - when the checkbox is checked, it will display its alternateImage as the checked box, if one has been assigned",
          "   * \"radio\"           - when the radio button is selected, it will display its alternateImage as the filled in radio button, if one has been assigned",
          " * Other button types have not been observed to use this attribute; if you believe you have discovered something we have missed here, please submit an issue to the Hamemrspoon github web site."
        ],
        "signature" : "hs._asm.guitk.element.button:alternateImage([image]) -> buttonObject | hs.image object | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "alternateImage",
        "parameters" : [
          " * `image` - an optional hs.image object, or explicit nil to remove, specifying the alternate image for the button.",
          ""
        ]
      },
      {
        "desc" : "Get or set the current state of the button.",
        "stripped_doc" : [
          "Get or set the current state of the button.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:state([state]) -> buttonObject | string",
        "doc" : "Get or set the current state of the button.\n\nParameters:\n * `state` - an optional string used to set the current state of the button. Must be one of \"on\", \"off\", or \"mixed\".\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * Setting the state to \"mixed\" is only valid when [hs._asm.guitk.element.button:allowsMixedState](#allowsMixedState) is set to true.\n * Mixed state is typically useful only with buttons of type \"switch\" or \"radio\" and is primarily used to indicate that something is only applied partially, e.g. when part of a selection of text is bold but not all of it. When a checkbox or radio button is in the \"mixed\" state, it is displayed with a dash instead of an X or a filled in radio button.",
        "notes" : [
          " * Setting the state to \"mixed\" is only valid when [hs._asm.guitk.element.button:allowsMixedState](#allowsMixedState) is set to true.",
          " * Mixed state is typically useful only with buttons of type \"switch\" or \"radio\" and is primarily used to indicate that something is only applied partially, e.g. when part of a selection of text is bold but not all of it. When a checkbox or radio button is in the \"mixed\" state, it is displayed with a dash instead of an X or a filled in radio button."
        ],
        "signature" : "hs._asm.guitk.element.button:state([state]) -> buttonObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "state",
        "parameters" : [
          " * `state` - an optional string used to set the current state of the button. Must be one of \"on\", \"off\", or \"mixed\".",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the button is currently highlighted.",
        "stripped_doc" : [
          "Get or set whether the button is currently highlighted.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:highlighted([state]) -> buttonObject | boolean",
        "doc" : "Get or set whether the button is currently highlighted.\n\nParameters:\n * `state` - an optional boolean specifying whether or not the button is currently highlighted.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * Highlighting makes the button appear recessed, displays its alternate title or image, or causes the button to appear illuminated.",
        "notes" : [
          " * Highlighting makes the button appear recessed, displays its alternate title or image, or causes the button to appear illuminated."
        ],
        "signature" : "hs._asm.guitk.element.button:highlighted([state]) -> buttonObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "highlighted",
        "parameters" : [
          " * `state` - an optional boolean specifying whether or not the button is currently highlighted.",
          ""
        ]
      },
      {
        "desc" : "Get the current value represented by the button's state",
        "stripped_doc" : [
          "Get the current value represented by the button's state",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:value([float]) -> integer | double",
        "doc" : "Get the current value represented by the button's state\n\nParameters:\n * `float` - an optional boolean specifying whether or not the value should be returned as a number (true) or as an integer (false). Defaults to false.\n\nReturns:\n * The current value of the button as represented by its state.\n\nNotes:\n * In general, this method will return 0 when the button's state is \"off\" and 1 when the button's state is \"on\" -- see [hs._asm.guitk.element.button:state](#state).\n * If [hs._asm.guitk.element.button:allowsMixedState](#allowsMixedState) has been set to true for this button, this method will return -1 when the button's state is \"mixed\".\n\n * If the button is of the \"accelerator\" type and the user is using a Force Touch capable trackpad, you can pass `true` to this method to get a relative measure of the amount of pressure being applied; this method will return a number between 1.0 and 2.0 representing the amount of pressure being applied when `float` is set to true.  If `float` is false or left out, then an \"accelerator\" type button will just return 1 as long as any pressure is being applied to the button.\n\n * If the button is of the \"multiLevelAccelerator\" type and the user is using a Force Touch capable trackpad, this method will return a number between 0 (not being pressed) up to the value set for [hs._asm.guitk.element.button:maxAcceleratorLevel](#maxAcceleratorLevel), depending upon how much pressure is being applied to the button.",
        "notes" : [
          " * In general, this method will return 0 when the button's state is \"off\" and 1 when the button's state is \"on\" -- see [hs._asm.guitk.element.button:state](#state).",
          " * If [hs._asm.guitk.element.button:allowsMixedState](#allowsMixedState) has been set to true for this button, this method will return -1 when the button's state is \"mixed\".",
          "",
          " * If the button is of the \"accelerator\" type and the user is using a Force Touch capable trackpad, you can pass `true` to this method to get a relative measure of the amount of pressure being applied; this method will return a number between 1.0 and 2.0 representing the amount of pressure being applied when `float` is set to true.  If `float` is false or left out, then an \"accelerator\" type button will just return 1 as long as any pressure is being applied to the button.",
          "",
          " * If the button is of the \"multiLevelAccelerator\" type and the user is using a Force Touch capable trackpad, this method will return a number between 0 (not being pressed) up to the value set for [hs._asm.guitk.element.button:maxAcceleratorLevel](#maxAcceleratorLevel), depending upon how much pressure is being applied to the button."
        ],
        "signature" : "hs._asm.guitk.element.button:value([float]) -> integer | double",
        "type" : "Method",
        "returns" : [
          " * The current value of the button as represented by its state.",
          ""
        ],
        "name" : "value",
        "parameters" : [
          " * `float` - an optional boolean specifying whether or not the value should be returned as a number (true) or as an integer (false). Defaults to false.",
          ""
        ]
      },
      {
        "desc" : "Get or set the number of discrete pressure levels recognized by a button of type \"multiLevelAccelerator\"",
        "stripped_doc" : [
          "Get or set the number of discrete pressure levels recognized by a button of type \"multiLevelAccelerator\"",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:maxAcceleratorLevel([level]) -> buttonObject | integer",
        "doc" : "Get or set the number of discrete pressure levels recognized by a button of type \"multiLevelAccelerator\"\n\nParameters:\n * `level` - an optional integer specifying the number of discrete pressure levels recognized by a button of type \"multiLevelAccelerator\". Must be an integer between 1 and 5 inclusive.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * This method and the \"multiLevelAccelerator\" button type are only supported in macOS 10.12 and newer.",
        "notes" : [
          " * This method and the \"multiLevelAccelerator\" button type are only supported in macOS 10.12 and newer."
        ],
        "signature" : "hs._asm.guitk.element.button:maxAcceleratorLevel([level]) -> buttonObject | integer",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "maxAcceleratorLevel",
        "parameters" : [
          " * `level` - an optional integer specifying the number of discrete pressure levels recognized by a button of type \"multiLevelAccelerator\". Must be an integer between 1 and 5 inclusive.",
          ""
        ]
      },
      {
        "desc" : "Get or set the delay and interval periods for the callbacks of a continuous button.",
        "stripped_doc" : [
          "Get or set the delay and interval periods for the callbacks of a continuous button.",
          ""
        ],
        "def" : "hs._asm.guitk.element.button:periodicDelay([table]) -> buttonObject | table",
        "doc" : "Get or set the delay and interval periods for the callbacks of a continuous button.\n\nParameters:\n * `table` - an optional table specifying the delay and interval periods for the callbacks of a continuous button. The default is { 0.4, 0.075 }.\n\nReturns:\n * if a value is provided, returns the buttonObject ; otherwise returns the current value.\n\nNotes:\n * To make a button continuous, see `hs._asm.guitk.element._control:continuous`. By default, buttons are *not* continuous.\n\n * The table passed in as an argument or returned by this method should contain two numbers:\n   * the delay in seconds before the callback will be first invoked for the continuous button\n   * the interval in seconds between subsequent callbacks after the first one has been invoked.\n * Once the user releases the mouse button, a final callback will be invoked for the button and will reflect the new [hs._asm.guitk.element.button:state](#state) for the button.",
        "notes" : [
          " * To make a button continuous, see `hs._asm.guitk.element._control:continuous`. By default, buttons are *not* continuous.",
          "",
          " * The table passed in as an argument or returned by this method should contain two numbers:",
          "   * the delay in seconds before the callback will be first invoked for the continuous button",
          "   * the interval in seconds between subsequent callbacks after the first one has been invoked.",
          " * Once the user releases the mouse button, a final callback will be invoked for the button and will reflect the new [hs._asm.guitk.element.button:state](#state) for the button."
        ],
        "signature" : "hs._asm.guitk.element.button:periodicDelay([table]) -> buttonObject | table",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the buttonObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "periodicDelay",
        "parameters" : [
          " * `table` - an optional table specifying the delay and interval periods for the callbacks of a continuous button. The default is { 0.4, 0.075 }.",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "name" : "hs._asm.guitk.element.button"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "desc" : "Get or set whether or not the alpha component is ignored in the color picker.",
        "stripped_doc" : [
          "Get or set whether or not the alpha component is ignored in the color picker.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell.ignoresAlpha([state]) -> boolean",
        "doc" : "Get or set whether or not the alpha component is ignored in the color picker.\n\nParameters:\n * `state` - an optional boolean, default true, indicating whether or not the alpha channel should ignored (suppressed) in the color picker.\n\nReturns:\n * a boolean representing the, possibly new, state.\n\nNote:\n * When set to true, the alpha channel is not editable. If you assign a color that has an alpha component other than 1.0 with [hs._asm.guitk.element.colorwell:color](#color), the alpha component will be set to 1.0.\n\n* The color picker is not unique to each element -- if you require the alpha channel for some colorwells but not others, make sure to call this function from the callback when the picker is opened for each specific colorwell element -- see [hs._asm.guitk.element.colorwell:callback](#callback).",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.colorwell.ignoresAlpha([state]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * a boolean representing the, possibly new, state.",
          "",
          "Note:",
          " * When set to true, the alpha channel is not editable. If you assign a color that has an alpha component other than 1.0 with [hs._asm.guitk.element.colorwell:color](#color), the alpha component will be set to 1.0.",
          "",
          "* The color picker is not unique to each element -- if you require the alpha channel for some colorwells but not others, make sure to call this function from the callback when the picker is opened for each specific colorwell element -- see [hs._asm.guitk.element.colorwell:callback](#callback)."
        ],
        "name" : "ignoresAlpha",
        "parameters" : [
          " * `state` - an optional boolean, default true, indicating whether or not the alpha channel should ignored (suppressed) in the color picker.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the color picker panel is currently open and visible or not.",
        "stripped_doc" : [
          "Get or set whether the color picker panel is currently open and visible or not.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell.panelVisible([state]) -> boolean",
        "doc" : "Get or set whether the color picker panel is currently open and visible or not.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the color picker is currently visible, displaying or closing it as specified.\n\nReturns:\n * a boolean representing the, possibly new, state\n\nNotes:\n * if a colorwell is currently the active element, invoking this function with a false argument will trigger the colorwell's close callback -- see [hs._asm.guitk.element.colorwell:callback](#callback).",
        "notes" : [
          " * if a colorwell is currently the active element, invoking this function with a false argument will trigger the colorwell's close callback -- see [hs._asm.guitk.element.colorwell:callback](#callback)."
        ],
        "signature" : "hs._asm.guitk.element.colorwell.panelVisible([state]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * a boolean representing the, possibly new, state",
          ""
        ],
        "name" : "panelVisible",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the color picker is currently visible, displaying or closing it as specified.",
          ""
        ]
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Provides acolorwell element `hs._asm.guitk`. A colorwell is a rectangular swatch of color which the user can click on to pop up the color picker for choosing a new color.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [
      {
        "desc" : "Creates a new colorwell element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new colorwell element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell.new([frame]) -> colorwellObject",
        "doc" : "Creates a new colorwell element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the element.\n\nReturns:\n * the colorwellObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The colorwell element does not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible.",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The colorwell element does not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.colorwell.new([frame]) -> colorwellObject",
        "type" : "Constructor",
        "returns" : [
          " * the colorwellObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the element.",
          ""
        ]
      }
    ],
    "doc" : "Provides acolorwell element `hs._asm.guitk`. A colorwell is a rectangular swatch of color which the user can click on to pop up the color picker for choosing a new color.\n\n* This submodule inherits methods from `hs._asm.guitk.element._control` and you should consult its documentation for additional methods which may be used.\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "items" : [
      {
        "desc" : "Get or set whether or not the alpha component is ignored in the color picker.",
        "stripped_doc" : [
          "Get or set whether or not the alpha component is ignored in the color picker.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell.ignoresAlpha([state]) -> boolean",
        "doc" : "Get or set whether or not the alpha component is ignored in the color picker.\n\nParameters:\n * `state` - an optional boolean, default true, indicating whether or not the alpha channel should ignored (suppressed) in the color picker.\n\nReturns:\n * a boolean representing the, possibly new, state.\n\nNote:\n * When set to true, the alpha channel is not editable. If you assign a color that has an alpha component other than 1.0 with [hs._asm.guitk.element.colorwell:color](#color), the alpha component will be set to 1.0.\n\n* The color picker is not unique to each element -- if you require the alpha channel for some colorwells but not others, make sure to call this function from the callback when the picker is opened for each specific colorwell element -- see [hs._asm.guitk.element.colorwell:callback](#callback).",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.colorwell.ignoresAlpha([state]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * a boolean representing the, possibly new, state.",
          "",
          "Note:",
          " * When set to true, the alpha channel is not editable. If you assign a color that has an alpha component other than 1.0 with [hs._asm.guitk.element.colorwell:color](#color), the alpha component will be set to 1.0.",
          "",
          "* The color picker is not unique to each element -- if you require the alpha channel for some colorwells but not others, make sure to call this function from the callback when the picker is opened for each specific colorwell element -- see [hs._asm.guitk.element.colorwell:callback](#callback)."
        ],
        "name" : "ignoresAlpha",
        "parameters" : [
          " * `state` - an optional boolean, default true, indicating whether or not the alpha channel should ignored (suppressed) in the color picker.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the color picker panel is currently open and visible or not.",
        "stripped_doc" : [
          "Get or set whether the color picker panel is currently open and visible or not.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell.panelVisible([state]) -> boolean",
        "doc" : "Get or set whether the color picker panel is currently open and visible or not.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the color picker is currently visible, displaying or closing it as specified.\n\nReturns:\n * a boolean representing the, possibly new, state\n\nNotes:\n * if a colorwell is currently the active element, invoking this function with a false argument will trigger the colorwell's close callback -- see [hs._asm.guitk.element.colorwell:callback](#callback).",
        "notes" : [
          " * if a colorwell is currently the active element, invoking this function with a false argument will trigger the colorwell's close callback -- see [hs._asm.guitk.element.colorwell:callback](#callback)."
        ],
        "signature" : "hs._asm.guitk.element.colorwell.panelVisible([state]) -> boolean",
        "type" : "Function",
        "returns" : [
          " * a boolean representing the, possibly new, state",
          ""
        ],
        "name" : "panelVisible",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the color picker is currently visible, displaying or closing it as specified.",
          ""
        ]
      },
      {
        "desc" : "Creates a new colorwell element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new colorwell element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell.new([frame]) -> colorwellObject",
        "doc" : "Creates a new colorwell element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the element.\n\nReturns:\n * the colorwellObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The colorwell element does not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible.",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The colorwell element does not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.colorwell.new([frame]) -> colorwellObject",
        "type" : "Constructor",
        "returns" : [
          " * the colorwellObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the element.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the colorwell element is the currently active element.",
        "stripped_doc" : [
          "Get or set whether the colorwell element is the currently active element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:active([state]) -> colorwellObject | boolean",
        "doc" : "Get or set whether the colorwell element is the currently active element.\n\nParameters:\n * `state` - an optional boolean, specifying whether the colorwell element should be activated (true) or deactivated (false).\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.\n\nNotes:\n * if you pass true to this method and the color picker panel is not currently visible, it will be made visible.\n * however, it won't be dismissed when you pass false; to achieve this, use [hs._asm.guitk.element.colorwell:callback](#callback) like this:\n\n ~~~lua\n colorwell:callback(function(obj, msg, color)\n     if msg == \"didBeginEditing\" then\n        -- do what you want when the color picker is opened\n      elseif msg == \"colorDidChange\" then\n        -- do what you want with the color as it changes\n      elseif msg == \"didEndEditing\" then\n        hs._asm.guitk.element.colorwell.panelVisible(false)\n        -- now do what you want with the newly chosen color\n      end\n end)\n ~~~",
        "notes" : [
          " * if you pass true to this method and the color picker panel is not currently visible, it will be made visible.",
          " * however, it won't be dismissed when you pass false; to achieve this, use [hs._asm.guitk.element.colorwell:callback](#callback) like this:",
          "",
          " ~~~lua",
          " colorwell:callback(function(obj, msg, color)",
          "     if msg == \"didBeginEditing\" then",
          "        -- do what you want when the color picker is opened",
          "      elseif msg == \"colorDidChange\" then",
          "        -- do what you want with the color as it changes",
          "      elseif msg == \"didEndEditing\" then",
          "        hs._asm.guitk.element.colorwell.panelVisible(false)",
          "        -- now do what you want with the newly chosen color",
          "      end",
          " end)",
          " ~~~"
        ],
        "signature" : "hs._asm.guitk.element.colorwell:active([state]) -> colorwellObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "active",
        "parameters" : [
          " * `state` - an optional boolean, specifying whether the colorwell element should be activated (true) or deactivated (false).",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the colorwell element has a rectangular border around it.",
        "stripped_doc" : [
          "Get or set whether the colorwell element has a rectangular border around it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:bordered([enabled]) -> colorwellObject | boolean",
        "doc" : "Get or set whether the colorwell element has a rectangular border around it.\n\nParameters:\n * `enabled` - an optional boolean, default true, specifying whether or not a border should be drawn around the colorwell element.\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.colorwell:bordered([enabled]) -> colorwellObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value."
        ],
        "name" : "bordered",
        "parameters" : [
          " * `enabled` - an optional boolean, default true, specifying whether or not a border should be drawn around the colorwell element.",
          ""
        ]
      },
      {
        "desc" : "Get or set the callback function which will be invoked when the user uses the color picker to modify the colorwell element.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked when the user uses the color picker to modify the colorwell element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:callback([fn | nil]) -> colorwellObject | fn | nil",
        "doc" : "Get or set the callback function which will be invoked when the user uses the color picker to modify the colorwell element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user uses the color picker to modify the colorwell element.\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.\n\nNotes:\n * The callback function should expect arguments as described below and return none:\n   * When the colorwell is activated the callback will receive the following arguments:\n     * the colorwell userdata object\n     * the message string \"didBeginEditing\" indicating that the colorwell element has become active\n   * When the colorwell is deactivated the callback will receive the following arguments:\n     * the colorwell userdata object\n     * the message string \"didEndEditing\" indicating that the colorwell element is no longer active\n     * a table describing the new color as defined by the `hs.drawing.color` module.\n   * When the user selects or changes a color in the color picker, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:\n     * the colorwell userdata object\n     * the message string \"colorDidChange\" indicating that the user has selected or modified the color currently chosen in the color picker panel.\n     * a table describing the currently selected color as defined by the `hs.drawing.color` module.",
        "notes" : [
          " * The callback function should expect arguments as described below and return none:",
          "   * When the colorwell is activated the callback will receive the following arguments:",
          "     * the colorwell userdata object",
          "     * the message string \"didBeginEditing\" indicating that the colorwell element has become active",
          "   * When the colorwell is deactivated the callback will receive the following arguments:",
          "     * the colorwell userdata object",
          "     * the message string \"didEndEditing\" indicating that the colorwell element is no longer active",
          "     * a table describing the new color as defined by the `hs.drawing.color` module.",
          "   * When the user selects or changes a color in the color picker, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:",
          "     * the colorwell userdata object",
          "     * the message string \"colorDidChange\" indicating that the user has selected or modified the color currently chosen in the color picker panel.",
          "     * a table describing the currently selected color as defined by the `hs.drawing.color` module."
        ],
        "signature" : "hs._asm.guitk.element.colorwell:callback([fn | nil]) -> colorwellObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user uses the color picker to modify the colorwell element.",
          ""
        ]
      },
      {
        "desc" : "Get or set the color currently being displayed by the colorwell element",
        "stripped_doc" : [
          "Get or set the color currently being displayed by the colorwell element",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:color([color]) -> colorwellObject | table",
        "doc" : "Get or set the color currently being displayed by the colorwell element\n\nParameters:\n * an optional table defining a color as specified in the `hs.drawing.color` module to set the colorwell to.\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.\n\nNotes:\n * if assigning a new color and [hs._asm.guitk.element.colorwell.ignoresAlpha](#ignoresAlpha) is currently true, the alpha channel of the color will be ignored and internally changed to 1.0.",
        "notes" : [
          " * if assigning a new color and [hs._asm.guitk.element.colorwell.ignoresAlpha](#ignoresAlpha) is currently true, the alpha channel of the color will be ignored and internally changed to 1.0."
        ],
        "signature" : "hs._asm.guitk.element.colorwell:color([color]) -> colorwellObject | table",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "color",
        "parameters" : [
          " * an optional table defining a color as specified in the `hs.drawing.color` module to set the colorwell to.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Get or set the callback function which will be invoked when the user uses the color picker to modify the colorwell element.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked when the user uses the color picker to modify the colorwell element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:callback([fn | nil]) -> colorwellObject | fn | nil",
        "doc" : "Get or set the callback function which will be invoked when the user uses the color picker to modify the colorwell element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user uses the color picker to modify the colorwell element.\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.\n\nNotes:\n * The callback function should expect arguments as described below and return none:\n   * When the colorwell is activated the callback will receive the following arguments:\n     * the colorwell userdata object\n     * the message string \"didBeginEditing\" indicating that the colorwell element has become active\n   * When the colorwell is deactivated the callback will receive the following arguments:\n     * the colorwell userdata object\n     * the message string \"didEndEditing\" indicating that the colorwell element is no longer active\n     * a table describing the new color as defined by the `hs.drawing.color` module.\n   * When the user selects or changes a color in the color picker, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:\n     * the colorwell userdata object\n     * the message string \"colorDidChange\" indicating that the user has selected or modified the color currently chosen in the color picker panel.\n     * a table describing the currently selected color as defined by the `hs.drawing.color` module.",
        "notes" : [
          " * The callback function should expect arguments as described below and return none:",
          "   * When the colorwell is activated the callback will receive the following arguments:",
          "     * the colorwell userdata object",
          "     * the message string \"didBeginEditing\" indicating that the colorwell element has become active",
          "   * When the colorwell is deactivated the callback will receive the following arguments:",
          "     * the colorwell userdata object",
          "     * the message string \"didEndEditing\" indicating that the colorwell element is no longer active",
          "     * a table describing the new color as defined by the `hs.drawing.color` module.",
          "   * When the user selects or changes a color in the color picker, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:",
          "     * the colorwell userdata object",
          "     * the message string \"colorDidChange\" indicating that the user has selected or modified the color currently chosen in the color picker panel.",
          "     * a table describing the currently selected color as defined by the `hs.drawing.color` module."
        ],
        "signature" : "hs._asm.guitk.element.colorwell:callback([fn | nil]) -> colorwellObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user uses the color picker to modify the colorwell element.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the colorwell element has a rectangular border around it.",
        "stripped_doc" : [
          "Get or set whether the colorwell element has a rectangular border around it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:bordered([enabled]) -> colorwellObject | boolean",
        "doc" : "Get or set whether the colorwell element has a rectangular border around it.\n\nParameters:\n * `enabled` - an optional boolean, default true, specifying whether or not a border should be drawn around the colorwell element.\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.colorwell:bordered([enabled]) -> colorwellObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value."
        ],
        "name" : "bordered",
        "parameters" : [
          " * `enabled` - an optional boolean, default true, specifying whether or not a border should be drawn around the colorwell element.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the colorwell element is the currently active element.",
        "stripped_doc" : [
          "Get or set whether the colorwell element is the currently active element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:active([state]) -> colorwellObject | boolean",
        "doc" : "Get or set whether the colorwell element is the currently active element.\n\nParameters:\n * `state` - an optional boolean, specifying whether the colorwell element should be activated (true) or deactivated (false).\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.\n\nNotes:\n * if you pass true to this method and the color picker panel is not currently visible, it will be made visible.\n * however, it won't be dismissed when you pass false; to achieve this, use [hs._asm.guitk.element.colorwell:callback](#callback) like this:\n\n ~~~lua\n colorwell:callback(function(obj, msg, color)\n     if msg == \"didBeginEditing\" then\n        -- do what you want when the color picker is opened\n      elseif msg == \"colorDidChange\" then\n        -- do what you want with the color as it changes\n      elseif msg == \"didEndEditing\" then\n        hs._asm.guitk.element.colorwell.panelVisible(false)\n        -- now do what you want with the newly chosen color\n      end\n end)\n ~~~",
        "notes" : [
          " * if you pass true to this method and the color picker panel is not currently visible, it will be made visible.",
          " * however, it won't be dismissed when you pass false; to achieve this, use [hs._asm.guitk.element.colorwell:callback](#callback) like this:",
          "",
          " ~~~lua",
          " colorwell:callback(function(obj, msg, color)",
          "     if msg == \"didBeginEditing\" then",
          "        -- do what you want when the color picker is opened",
          "      elseif msg == \"colorDidChange\" then",
          "        -- do what you want with the color as it changes",
          "      elseif msg == \"didEndEditing\" then",
          "        hs._asm.guitk.element.colorwell.panelVisible(false)",
          "        -- now do what you want with the newly chosen color",
          "      end",
          " end)",
          " ~~~"
        ],
        "signature" : "hs._asm.guitk.element.colorwell:active([state]) -> colorwellObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "active",
        "parameters" : [
          " * `state` - an optional boolean, specifying whether the colorwell element should be activated (true) or deactivated (false).",
          ""
        ]
      },
      {
        "desc" : "Get or set the color currently being displayed by the colorwell element",
        "stripped_doc" : [
          "Get or set the color currently being displayed by the colorwell element",
          ""
        ],
        "def" : "hs._asm.guitk.element.colorwell:color([color]) -> colorwellObject | table",
        "doc" : "Get or set the color currently being displayed by the colorwell element\n\nParameters:\n * an optional table defining a color as specified in the `hs.drawing.color` module to set the colorwell to.\n\nReturns:\n * if a value is provided, returns the colorwellObject ; otherwise returns the current value.\n\nNotes:\n * if assigning a new color and [hs._asm.guitk.element.colorwell.ignoresAlpha](#ignoresAlpha) is currently true, the alpha channel of the color will be ignored and internally changed to 1.0.",
        "notes" : [
          " * if assigning a new color and [hs._asm.guitk.element.colorwell.ignoresAlpha](#ignoresAlpha) is currently true, the alpha channel of the color will be ignored and internally changed to 1.0."
        ],
        "signature" : "hs._asm.guitk.element.colorwell:color([color]) -> colorwellObject | table",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the colorwellObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "color",
        "parameters" : [
          " * an optional table defining a color as specified in the `hs.drawing.color` module to set the colorwell to.",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "name" : "hs._asm.guitk.element.colorwell"
  },
  {
    "Constant" : [
      {
        "desc" : "A table which contains an array of strings listing the calendar types supported by the system.",
        "stripped_doc" : [
          "A table which contains an array of strings listing the calendar types supported by the system.",
          "",
          "These values can be used with [hs._asm.guitk.element.datepicker:calendar](#calendar) to adjust the date and calendar displayed by the datepicker element.",
          "",
          "This constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.calendarIdentifiers` into the Hammerspoon console to see its contents."
        ],
        "def" : "hs._asm.guitk.element.datepicker.calendarIdentifiers",
        "doc" : "A table which contains an array of strings listing the calendar types supported by the system.\n\nThese values can be used with [hs._asm.guitk.element.datepicker:calendar](#calendar) to adjust the date and calendar displayed by the datepicker element.\n\nThis constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.calendarIdentifiers` into the Hammerspoon console to see its contents.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.calendarIdentifiers",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "calendarIdentifiers",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table which contains a mapping of timezone abbreviations known to the system to the corresponding timezone name.",
        "stripped_doc" : [
          "A table which contains a mapping of timezone abbreviations known to the system to the corresponding timezone name.",
          "",
          "These values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.",
          "",
          "This table contains key-value pairs in which each key is a timezone abbreviation and its value is the timezone name it represents. This table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.",
          "",
          "This constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneAbbreviations` into the Hammerspoon console to see its contents."
        ],
        "def" : "hs._asm.guitk.element.datepicker.timezoneAbbreviations",
        "doc" : "A table which contains a mapping of timezone abbreviations known to the system to the corresponding timezone name.\n\nThese values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.\n\nThis table contains key-value pairs in which each key is a timezone abbreviation and its value is the timezone name it represents. This table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.\n\nThis constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneAbbreviations` into the Hammerspoon console to see its contents.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.timezoneAbbreviations",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "timezoneAbbreviations",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table which contains an array of strings listing the names of all the time zones known to the system.",
        "stripped_doc" : [
          "A table which contains an array of strings listing the names of all the time zones known to the system.",
          "",
          "These values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.",
          "",
          "This table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.",
          "",
          "This constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneNames` into the Hammerspoon console to see its contents."
        ],
        "def" : "hs._asm.guitk.element.datepicker.timezoneNames",
        "doc" : "A table which contains an array of strings listing the names of all the time zones known to the system.\n\nThese values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.\n\nThis table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.\n\nThis constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneNames` into the Hammerspoon console to see its contents.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.timezoneNames",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "timezoneNames",
        "parameters" : [

        ]
      }
    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Provides a date picker element for use with `hs._asm.guitk`.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [
      {
        "desc" : "Creates a new date picker element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new date picker element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker.new([frame]) -> datepickerObject",
        "doc" : "Creates a new date picker element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for element.\n\nReturns:\n * the datepickerObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The initial date and time represented by the element will be the date and time when this function is invoked.  See [hs._asm.guitk.element.datepicker:date](#date).",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The initial date and time represented by the element will be the date and time when this function is invoked.  See [hs._asm.guitk.element.datepicker:date](#date)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker.new([frame]) -> datepickerObject",
        "type" : "Constructor",
        "returns" : [
          " * the datepickerObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for element.",
          ""
        ]
      }
    ],
    "doc" : "Provides a date picker element for use with `hs._asm.guitk`.\n\n* This submodule inherits methods from `hs._asm.guitk.element._control` and you should consult its documentation for additional methods which may be used.\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "items" : [
      {
        "desc" : "A table which contains an array of strings listing the calendar types supported by the system.",
        "stripped_doc" : [
          "A table which contains an array of strings listing the calendar types supported by the system.",
          "",
          "These values can be used with [hs._asm.guitk.element.datepicker:calendar](#calendar) to adjust the date and calendar displayed by the datepicker element.",
          "",
          "This constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.calendarIdentifiers` into the Hammerspoon console to see its contents."
        ],
        "def" : "hs._asm.guitk.element.datepicker.calendarIdentifiers",
        "doc" : "A table which contains an array of strings listing the calendar types supported by the system.\n\nThese values can be used with [hs._asm.guitk.element.datepicker:calendar](#calendar) to adjust the date and calendar displayed by the datepicker element.\n\nThis constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.calendarIdentifiers` into the Hammerspoon console to see its contents.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.calendarIdentifiers",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "calendarIdentifiers",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table which contains a mapping of timezone abbreviations known to the system to the corresponding timezone name.",
        "stripped_doc" : [
          "A table which contains a mapping of timezone abbreviations known to the system to the corresponding timezone name.",
          "",
          "These values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.",
          "",
          "This table contains key-value pairs in which each key is a timezone abbreviation and its value is the timezone name it represents. This table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.",
          "",
          "This constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneAbbreviations` into the Hammerspoon console to see its contents."
        ],
        "def" : "hs._asm.guitk.element.datepicker.timezoneAbbreviations",
        "doc" : "A table which contains a mapping of timezone abbreviations known to the system to the corresponding timezone name.\n\nThese values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.\n\nThis table contains key-value pairs in which each key is a timezone abbreviation and its value is the timezone name it represents. This table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.\n\nThis constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneAbbreviations` into the Hammerspoon console to see its contents.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.timezoneAbbreviations",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "timezoneAbbreviations",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table which contains an array of strings listing the names of all the time zones known to the system.",
        "stripped_doc" : [
          "A table which contains an array of strings listing the names of all the time zones known to the system.",
          "",
          "These values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.",
          "",
          "This table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.",
          "",
          "This constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneNames` into the Hammerspoon console to see its contents."
        ],
        "def" : "hs._asm.guitk.element.datepicker.timezoneNames",
        "doc" : "A table which contains an array of strings listing the names of all the time zones known to the system.\n\nThese values can be used with [hs._asm.guitk.element.datepicker:timezone](#timezone) to adjust the time displayed by the datepicker element.\n\nThis table is generated when this module is loaded so that it will reflect the timezones recognized by the currently running version of macOS.\n\nThis constant has a `__tostring` metamethod defined so that you can type `require(\"hs._asm.guitk\").element.datepicker.timezoneNames` into the Hammerspoon console to see its contents.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.timezoneNames",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "timezoneNames",
        "parameters" : [

        ]
      },
      {
        "desc" : "Creates a new date picker element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new date picker element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker.new([frame]) -> datepickerObject",
        "doc" : "Creates a new date picker element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for element.\n\nReturns:\n * the datepickerObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The initial date and time represented by the element will be the date and time when this function is invoked.  See [hs._asm.guitk.element.datepicker:date](#date).",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The initial date and time represented by the element will be the date and time when this function is invoked.  See [hs._asm.guitk.element.datepicker:date](#date)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker.new([frame]) -> datepickerObject",
        "type" : "Constructor",
        "returns" : [
          " * the datepickerObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for element.",
          ""
        ]
      },
      {
        "desc" : "Get or set the color for the background of datepicker element.",
        "stripped_doc" : [
          "Get or set the color for the background of datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:backgroundColor([color]) -> datepickerObject | color table",
        "doc" : "Get or set the color for the background of datepicker element.\n\nParameters:\n* `color` - an optional table containing color keys as described in `hs.drawing.color`\n\nReturns:\n * If an argument is provided, the datepickerObject; otherwise the current value.\n\nNotes:\n * The background color will only be drawn when [hs._asm.guitk.element.datepicker:drawsBackground](#drawsBackground) is true.\n * If [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\", this will set the background of the text field. If it is \"clockAndColor\", only the calendar's background color will be set.",
        "notes" : [
          " * The background color will only be drawn when [hs._asm.guitk.element.datepicker:drawsBackground](#drawsBackground) is true.",
          " * If [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\", this will set the background of the text field. If it is \"clockAndColor\", only the calendar's background color will be set."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:backgroundColor([color]) -> datepickerObject | color table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the datepickerObject; otherwise the current value.",
          ""
        ],
        "name" : "backgroundColor",
        "parameters" : [
          "* `color` - an optional table containing color keys as described in `hs.drawing.color`",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the datepicker element has a bezeled border around it.",
        "stripped_doc" : [
          "Get or set whether or not the datepicker element has a bezeled border around it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:bezeled([flag]) -> datepickerObject | boolean",
        "doc" : "Get or set whether or not the datepicker element has a bezeled border around it.\n\nParameters:\n * `flag` - an optional boolean, default true, indicating whether or not the element's frame is bezeled.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true will set [hs._asm.guitk.element.datepicker:bordered](#bordered) to false.",
        "notes" : [
          " * Setting this to true will set [hs._asm.guitk.element.datepicker:bordered](#bordered) to false."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:bezeled([flag]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "bezeled",
        "parameters" : [
          " * `flag` - an optional boolean, default true, indicating whether or not the element's frame is bezeled.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the datepicker element has a rectangular border around it.",
        "stripped_doc" : [
          "Get or set whether the datepicker element has a rectangular border around it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:bordered([enabled]) -> datepickerObject | boolean",
        "doc" : "Get or set whether the datepicker element has a rectangular border around it.\n\nParameters:\n * `enabled` - an optional boolean, default false, specifying whether or not a border should be drawn around the element.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true will set [hs._asm.guitk.element.datepicker:bezeled](#bezeled) to false.",
        "notes" : [
          " * Setting this to true will set [hs._asm.guitk.element.datepicker:bezeled](#bezeled) to false."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:bordered([enabled]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "bordered",
        "parameters" : [
          " * `enabled` - an optional boolean, default false, specifying whether or not a border should be drawn around the element.",
          ""
        ]
      },
      {
        "desc" : "Get or set the current calendar used for displaying the date in the datepicker element.",
        "stripped_doc" : [
          "Get or set the current calendar used for displaying the date in the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:calendar([calendar]) -> datepickerObject | string | nil",
        "doc" : "Get or set the current calendar used for displaying the date in the datepicker element.\n\nParameters:\n * `calendar` - an optional string specifying the calendar used when displaying the date in the element. Specify nil, the default value, to use the current system calendar.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * See [hs._asm.guitk.element.datepicker.calendarIdentifiers](#calendarIdentifiers) for valid strings that can be used with this method.",
        "notes" : [
          " * See [hs._asm.guitk.element.datepicker.calendarIdentifiers](#calendarIdentifiers) for valid strings that can be used with this method."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:calendar([calendar]) -> datepickerObject | string | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "calendar",
        "parameters" : [
          " * `calendar` - an optional string specifying the calendar used when displaying the date in the element. Specify nil, the default value, to use the current system calendar.",
          ""
        ]
      },
      {
        "desc" : "Get or set the callback function which will be invoked when the user interacts with the datepicker element.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked when the user interacts with the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:callback([fn | nil]) -> datepickerObject | fn | nil",
        "doc" : "Get or set the callback function which will be invoked when the user interacts with the datepicker element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user interacts with the element.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * The callback function should expect arguments as described below and return none:\n   * When the datepicker is becomes active the callback will receive the following arguments:\n     * the datepicker userdata object\n     * the message string \"didBeginEditing\" indicating that the datepicker element has become active\n   * When the user leaves the datepicker element, the callback will receive the following arguments:\n     * the datepicker userdata object\n     * the message string \"didEndEditing\" indicating that the datepicker element is no longer active\n     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)\n   * When the user selects or changes the date or time in the datepicker element, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:\n     * the datepicker userdata object\n     * the message string \"dateDidChange\" indicating that the user has modified the date or time in the datepicker element.\n     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)",
        "notes" : [
          " * The callback function should expect arguments as described below and return none:",
          "   * When the datepicker is becomes active the callback will receive the following arguments:",
          "     * the datepicker userdata object",
          "     * the message string \"didBeginEditing\" indicating that the datepicker element has become active",
          "   * When the user leaves the datepicker element, the callback will receive the following arguments:",
          "     * the datepicker userdata object",
          "     * the message string \"didEndEditing\" indicating that the datepicker element is no longer active",
          "     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)",
          "   * When the user selects or changes the date or time in the datepicker element, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:",
          "     * the datepicker userdata object",
          "     * the message string \"dateDidChange\" indicating that the user has modified the date or time in the datepicker element.",
          "     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)"
        ],
        "signature" : "hs._asm.guitk.element.datepicker:callback([fn | nil]) -> datepickerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user interacts with the element.",
          ""
        ]
      },
      {
        "desc" : "Get or set the date, or initial date when dateRangeMode is true, and time displayed by the datepicker element.",
        "stripped_doc" : [
          "Get or set the date, or initial date when dateRangeMode is true, and time displayed by the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:date([date]) -> datepickerObject | number",
        "doc" : "Get or set the date, or initial date when dateRangeMode is true, and time displayed by the datepicker element.\n\nParameters:\n * `date` - an optional number representing a date and time as the number of seconds from 00:00:00 GMT on 1 January 1970. The default value will be the number representing the date and time when the element was constructed with [hs._asm.guitk.element.datepicker.new](#new).\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Lua's `os.date` function can only handle integer values; this method returns fractions of a second in the decimal portion of the number, so you will need to convert the number to an integer first, e.g. `os.date(\"%c\", math.floor(hs._asm.guitk.element.datepicker:date()))`\n\n * When [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true, the end date of the range can be calculated as `hs._asm.guitk.element.datepicker:date() + hs._asm.guitk.element.datepicker:timeInterval()`.",
        "notes" : [
          " * Lua's `os.date` function can only handle integer values; this method returns fractions of a second in the decimal portion of the number, so you will need to convert the number to an integer first, e.g. `os.date(\"%c\", math.floor(hs._asm.guitk.element.datepicker:date()))`",
          "",
          " * When [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true, the end date of the range can be calculated as `hs._asm.guitk.element.datepicker:date() + hs._asm.guitk.element.datepicker:timeInterval()`."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:date([date]) -> datepickerObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "date",
        "parameters" : [
          " * `date` - an optional number representing a date and time as the number of seconds from 00:00:00 GMT on 1 January 1970. The default value will be the number representing the date and time when the element was constructed with [hs._asm.guitk.element.datepicker.new](#new).",
          ""
        ]
      },
      {
        "desc" : "Get or set whether a date range can be selected by the datepicker object",
        "stripped_doc" : [
          "Get or set whether a date range can be selected by the datepicker object",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:dateRangeMode([flag]) -> datepickerObject | boolean",
        "doc" : "Get or set whether a date range can be selected by the datepicker object\n\nParameters:\n * `flag` - an optional boolean, default false, indicating whether or not the datepicker allows a single date (false) or a date range (true) to be selected.\n\nReturns:\n * If an argument is provided, the datepickerObject; otherwise the current value.\n\nNotes:\n * A date range can only be selected by the user when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".\n\n * When the user has selected a date range, the first date in the range will be available in [hs._asm.guitk.element.datepicker:date](#date) and the interval between the start and end date will be the number of seconds returned by [hs._asm.guitk.element.datepicker:timeInterval](#timeInterval)",
        "notes" : [
          " * A date range can only be selected by the user when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".",
          "",
          " * When the user has selected a date range, the first date in the range will be available in [hs._asm.guitk.element.datepicker:date](#date) and the interval between the start and end date will be the number of seconds returned by [hs._asm.guitk.element.datepicker:timeInterval](#timeInterval)"
        ],
        "signature" : "hs._asm.guitk.element.datepicker:dateRangeMode([flag]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the datepickerObject; otherwise the current value.",
          ""
        ],
        "name" : "dateRangeMode",
        "parameters" : [
          " * `flag` - an optional boolean, default false, indicating whether or not the datepicker allows a single date (false) or a date range (true) to be selected.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the datepicker element draws its background.",
        "stripped_doc" : [
          "Get or set whether or not the datepicker element draws its background.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:drawsBackground([flag]) -> datepickerObject | boolean",
        "doc" : "Get or set whether or not the datepicker element draws its background.\n\nParameters:\n * `flag` - an optional boolean, default false, indicating whether or not the element's background is drawn.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true will draw the background of the element with the color specified with [hs._asm.guitk.element.datepicker:backgroundColor](#backgroundColor).",
        "notes" : [
          " * Setting this to true will draw the background of the element with the color specified with [hs._asm.guitk.element.datepicker:backgroundColor](#backgroundColor)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:drawsBackground([flag]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "drawsBackground",
        "parameters" : [
          " * `flag` - an optional boolean, default false, indicating whether or not the element's background is drawn.",
          ""
        ]
      },
      {
        "desc" : "Get or set the current locale used for displaying the datepicker element.",
        "stripped_doc" : [
          "Get or set the current locale used for displaying the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:locale([locale]) -> datepickerObject | string | nil",
        "doc" : "Get or set the current locale used for displaying the datepicker element.\n\nParameters:\n * `locale` - an optional string specifying the locale that determines how the datepicker should be displayed. Specify nil, the default value, to use the current system locale.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * See `hs.host.locale.availableLocales` for a list of locales available.",
        "notes" : [
          " * See `hs.host.locale.availableLocales` for a list of locales available."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:locale([locale]) -> datepickerObject | string | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "locale",
        "parameters" : [
          " * `locale` - an optional string specifying the locale that determines how the datepicker should be displayed. Specify nil, the default value, to use the current system locale.",
          ""
        ]
      },
      {
        "desc" : "Get or set the maximum date and time the user is allowed to select with the datepicker element.",
        "stripped_doc" : [
          "Get or set the maximum date and time the user is allowed to select with the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:maxDate([date]) -> datepickerObject | number",
        "doc" : "Get or set the maximum date and time the user is allowed to select with the datepicker element.\n\nParameters:\n * `date` - an optional number representing the maximum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no maximum valid date and time.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * The behavior is undefined If a value is set with this method and it is less than the value of [hs._asm.guitk.element.datepicker:minDate](#minDate).",
        "notes" : [
          " * The behavior is undefined If a value is set with this method and it is less than the value of [hs._asm.guitk.element.datepicker:minDate](#minDate)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:maxDate([date]) -> datepickerObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "maxDate",
        "parameters" : [
          " * `date` - an optional number representing the maximum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no maximum valid date and time.",
          ""
        ]
      },
      {
        "desc" : "Get or set the minimum date and time the user is allowed to select with the datepicker element.",
        "stripped_doc" : [
          "Get or set the minimum date and time the user is allowed to select with the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:minDate([date]) -> datepickerObject | number",
        "doc" : "Get or set the minimum date and time the user is allowed to select with the datepicker element.\n\nParameters:\n * `date` - an optional number representing the minimum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no minimum valid date and time.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * The behavior is undefined If a value is set with this method and it is greater than the value of [hs._asm.guitk.element.datepicker:maxDate](#maxDate).",
        "notes" : [
          " * The behavior is undefined If a value is set with this method and it is greater than the value of [hs._asm.guitk.element.datepicker:maxDate](#maxDate)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:minDate([date]) -> datepickerObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "minDate",
        "parameters" : [
          " * `date` - an optional number representing the minimum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no minimum valid date and time.",
          ""
        ]
      },
      {
        "desc" : "Get or set what date and time components the datepicker element presents to the user for modification",
        "stripped_doc" : [
          "Get or set what date and time components the datepicker element presents to the user for modification",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker.pickerElements([elements]) -> datepickerObject | table",
        "doc" : "Get or set what date and time components the datepicker element presents to the user for modification\n\nParameters:\n * `elements` - an optional table containing the following key-value pairs:\n   * `timeElement` - a string, default \"HMS\", specifying what time components to display. Valid strings are:\n     * \"HMS\" - allows setting the hour, minute, and seconds of the time. This is the default.\n     * \"HM\"  - allows setting the hour and minute of the time\n     * \"off\" - do not present the time for modification; can also be nil (i.e. if the `timeElement` key is not provided)\n   * `dateElement` - a string, default \"YMD\", specifying what date components to display. Valid strings are:\n     * \"YMD\" - allows setting the year, month, and day of the date. This is the default.\n     * \"YM\"  - allows setting the year and month; not valid when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\" and will be reset to \"YMD\".\n     * \"off\" - do not present the date for modification; can also be nil (i.e. if the `dateElement` key is not provided)\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.pickerElements([elements]) -> datepickerObject | table",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value."
        ],
        "name" : "pickerElements",
        "parameters" : [
          " * `elements` - an optional table containing the following key-value pairs:",
          "   * `timeElement` - a string, default \"HMS\", specifying what time components to display. Valid strings are:",
          "     * \"HMS\" - allows setting the hour, minute, and seconds of the time. This is the default.",
          "     * \"HM\"  - allows setting the hour and minute of the time",
          "     * \"off\" - do not present the time for modification; can also be nil (i.e. if the `timeElement` key is not provided)",
          "   * `dateElement` - a string, default \"YMD\", specifying what date components to display. Valid strings are:",
          "     * \"YMD\" - allows setting the year, month, and day of the date. This is the default.",
          "     * \"YM\"  - allows setting the year and month; not valid when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\" and will be reset to \"YMD\".",
          "     * \"off\" - do not present the date for modification; can also be nil (i.e. if the `dateElement` key is not provided)",
          ""
        ]
      },
      {
        "desc" : "Get or set the style of datepicker element displayed.",
        "stripped_doc" : [
          "Get or set the style of datepicker element displayed.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:pickerStyle([style]) -> datepickerObject | string",
        "doc" : "Get or set the style of datepicker element displayed.\n\nParameters:\n * `style` - an optional string, default \"textFieldAndStepper\", specifying the images alignment within the element frame. Valid strings are as follows:\n   * \"textFieldAndStepper\" - displays the date in an editable textfield with stepper arrows\n   * \"clockAndCalendar\"    - displays a calendar and\/or clock, depending upon the value of [hs._asm.guitk.element.datepicker:pickerElements](#pickerElements).\n   * \"textField\"           - displays the date in an editable textfield\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker:pickerStyle([style]) -> datepickerObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value."
        ],
        "name" : "pickerStyle",
        "parameters" : [
          " * `style` - an optional string, default \"textFieldAndStepper\", specifying the images alignment within the element frame. Valid strings are as follows:",
          "   * \"textFieldAndStepper\" - displays the date in an editable textfield with stepper arrows",
          "   * \"clockAndCalendar\"    - displays a calendar and\/or clock, depending upon the value of [hs._asm.guitk.element.datepicker:pickerElements](#pickerElements).",
          "   * \"textField\"           - displays the date in an editable textfield",
          ""
        ]
      },
      {
        "desc" : "Get or set the color for the text of the datepicker element.",
        "stripped_doc" : [
          "Get or set the color for the text of the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:textColor([color]) -> datepickerObject | color table",
        "doc" : "Get or set the color for the text of the datepicker element.\n\nParameters:\n* `color` - an optional table containing color keys as described in `hs.drawing.color`\n\nReturns:\n * If an argument is provided, the datepickerObject; otherwise the current value.\n\nNotes:\n * This method only affects the text color when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\".",
        "notes" : [
          " * This method only affects the text color when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\"."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:textColor([color]) -> datepickerObject | color table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the datepickerObject; otherwise the current value.",
          ""
        ],
        "name" : "textColor",
        "parameters" : [
          "* `color` - an optional table containing color keys as described in `hs.drawing.color`",
          ""
        ]
      },
      {
        "desc" : "Get or set the interval between the start date and the end date when a range of dates is specified by the datepicker element.",
        "stripped_doc" : [
          "Get or set the interval between the start date and the end date when a range of dates is specified by the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:timeInterval([interval]) -> datepickerObject | integer",
        "doc" : "Get or set the interval between the start date and the end date when a range of dates is specified by the datepicker element.\n\nParameters:\n * `interval` - an optional integer specifying the interval between a the range of dates represented by the datepicker element.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * This value is only relevant when [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true and [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".\n\n * If the user selects a range of dates in the calendar portion of the datepicker element, this number will be a multiple of 86400, the number of seconds in a day.\n * If you set a value with this method, it should be a multiple of 86400 - fractions of a day will not be visible or adjustable within the datepicker element.",
        "notes" : [
          " * This value is only relevant when [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true and [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".",
          "",
          " * If the user selects a range of dates in the calendar portion of the datepicker element, this number will be a multiple of 86400, the number of seconds in a day.",
          " * If you set a value with this method, it should be a multiple of 86400 - fractions of a day will not be visible or adjustable within the datepicker element."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:timeInterval([interval]) -> datepickerObject | integer",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "timeInterval",
        "parameters" : [
          " * `interval` - an optional integer specifying the interval between a the range of dates represented by the datepicker element.",
          ""
        ]
      },
      {
        "desc" : "Get or set the current timezone used for displaying the time in the datepicker element.",
        "stripped_doc" : [
          "Get or set the current timezone used for displaying the time in the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:timezone([timezone]) -> datepickerObject | string | integer | nil",
        "doc" : "Get or set the current timezone used for displaying the time in the datepicker element.\n\nParameters:\n * `timezone` - an optional string or integer specifying the timezone used when displaying the time in the element. Specify nil, the default value, to use the current system timezone. If specified as an integer, the integer represents the number of seconds offset from GMT.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * See [hs._asm.guitk.element.datepicker.timezoneNames](#timezoneNames) and [hs._asm.guitk.element.datepicker.timezoneAbbreviations](#timezoneAbbreviations) for valid strings that can be used with this method.",
        "notes" : [
          " * See [hs._asm.guitk.element.datepicker.timezoneNames](#timezoneNames) and [hs._asm.guitk.element.datepicker.timezoneAbbreviations](#timezoneAbbreviations) for valid strings that can be used with this method."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:timezone([timezone]) -> datepickerObject | string | integer | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "timezone",
        "parameters" : [
          " * `timezone` - an optional string or integer specifying the timezone used when displaying the time in the element. Specify nil, the default value, to use the current system timezone. If specified as an integer, the integer represents the number of seconds offset from GMT.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Get or set the callback function which will be invoked when the user interacts with the datepicker element.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked when the user interacts with the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:callback([fn | nil]) -> datepickerObject | fn | nil",
        "doc" : "Get or set the callback function which will be invoked when the user interacts with the datepicker element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user interacts with the element.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * The callback function should expect arguments as described below and return none:\n   * When the datepicker is becomes active the callback will receive the following arguments:\n     * the datepicker userdata object\n     * the message string \"didBeginEditing\" indicating that the datepicker element has become active\n   * When the user leaves the datepicker element, the callback will receive the following arguments:\n     * the datepicker userdata object\n     * the message string \"didEndEditing\" indicating that the datepicker element is no longer active\n     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)\n   * When the user selects or changes the date or time in the datepicker element, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:\n     * the datepicker userdata object\n     * the message string \"dateDidChange\" indicating that the user has modified the date or time in the datepicker element.\n     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)",
        "notes" : [
          " * The callback function should expect arguments as described below and return none:",
          "   * When the datepicker is becomes active the callback will receive the following arguments:",
          "     * the datepicker userdata object",
          "     * the message string \"didBeginEditing\" indicating that the datepicker element has become active",
          "   * When the user leaves the datepicker element, the callback will receive the following arguments:",
          "     * the datepicker userdata object",
          "     * the message string \"didEndEditing\" indicating that the datepicker element is no longer active",
          "     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)",
          "   * When the user selects or changes the date or time in the datepicker element, and `hs._asm.guitk.element._control:continuous` is true for the element, the callback will receive the following arguments:",
          "     * the datepicker userdata object",
          "     * the message string \"dateDidChange\" indicating that the user has modified the date or time in the datepicker element.",
          "     * a number representing the selected date as the number of seconds since the epoch -- see [hs._asm.guitk.element.datepicker:date](#date)"
        ],
        "signature" : "hs._asm.guitk.element.datepicker:callback([fn | nil]) -> datepickerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user interacts with the element.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the datepicker element has a rectangular border around it.",
        "stripped_doc" : [
          "Get or set whether the datepicker element has a rectangular border around it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:bordered([enabled]) -> datepickerObject | boolean",
        "doc" : "Get or set whether the datepicker element has a rectangular border around it.\n\nParameters:\n * `enabled` - an optional boolean, default false, specifying whether or not a border should be drawn around the element.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true will set [hs._asm.guitk.element.datepicker:bezeled](#bezeled) to false.",
        "notes" : [
          " * Setting this to true will set [hs._asm.guitk.element.datepicker:bezeled](#bezeled) to false."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:bordered([enabled]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "bordered",
        "parameters" : [
          " * `enabled` - an optional boolean, default false, specifying whether or not a border should be drawn around the element.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the datepicker element has a bezeled border around it.",
        "stripped_doc" : [
          "Get or set whether or not the datepicker element has a bezeled border around it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:bezeled([flag]) -> datepickerObject | boolean",
        "doc" : "Get or set whether or not the datepicker element has a bezeled border around it.\n\nParameters:\n * `flag` - an optional boolean, default true, indicating whether or not the element's frame is bezeled.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true will set [hs._asm.guitk.element.datepicker:bordered](#bordered) to false.",
        "notes" : [
          " * Setting this to true will set [hs._asm.guitk.element.datepicker:bordered](#bordered) to false."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:bezeled([flag]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "bezeled",
        "parameters" : [
          " * `flag` - an optional boolean, default true, indicating whether or not the element's frame is bezeled.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the datepicker element draws its background.",
        "stripped_doc" : [
          "Get or set whether or not the datepicker element draws its background.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:drawsBackground([flag]) -> datepickerObject | boolean",
        "doc" : "Get or set whether or not the datepicker element draws its background.\n\nParameters:\n * `flag` - an optional boolean, default false, indicating whether or not the element's background is drawn.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true will draw the background of the element with the color specified with [hs._asm.guitk.element.datepicker:backgroundColor](#backgroundColor).",
        "notes" : [
          " * Setting this to true will draw the background of the element with the color specified with [hs._asm.guitk.element.datepicker:backgroundColor](#backgroundColor)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:drawsBackground([flag]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "drawsBackground",
        "parameters" : [
          " * `flag` - an optional boolean, default false, indicating whether or not the element's background is drawn.",
          ""
        ]
      },
      {
        "desc" : "Get or set the color for the background of datepicker element.",
        "stripped_doc" : [
          "Get or set the color for the background of datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:backgroundColor([color]) -> datepickerObject | color table",
        "doc" : "Get or set the color for the background of datepicker element.\n\nParameters:\n* `color` - an optional table containing color keys as described in `hs.drawing.color`\n\nReturns:\n * If an argument is provided, the datepickerObject; otherwise the current value.\n\nNotes:\n * The background color will only be drawn when [hs._asm.guitk.element.datepicker:drawsBackground](#drawsBackground) is true.\n * If [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\", this will set the background of the text field. If it is \"clockAndColor\", only the calendar's background color will be set.",
        "notes" : [
          " * The background color will only be drawn when [hs._asm.guitk.element.datepicker:drawsBackground](#drawsBackground) is true.",
          " * If [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\", this will set the background of the text field. If it is \"clockAndColor\", only the calendar's background color will be set."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:backgroundColor([color]) -> datepickerObject | color table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the datepickerObject; otherwise the current value.",
          ""
        ],
        "name" : "backgroundColor",
        "parameters" : [
          "* `color` - an optional table containing color keys as described in `hs.drawing.color`",
          ""
        ]
      },
      {
        "desc" : "Get or set the color for the text of the datepicker element.",
        "stripped_doc" : [
          "Get or set the color for the text of the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:textColor([color]) -> datepickerObject | color table",
        "doc" : "Get or set the color for the text of the datepicker element.\n\nParameters:\n* `color` - an optional table containing color keys as described in `hs.drawing.color`\n\nReturns:\n * If an argument is provided, the datepickerObject; otherwise the current value.\n\nNotes:\n * This method only affects the text color when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\".",
        "notes" : [
          " * This method only affects the text color when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"textField\" or \"textFieldAndStepper\"."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:textColor([color]) -> datepickerObject | color table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the datepickerObject; otherwise the current value.",
          ""
        ],
        "name" : "textColor",
        "parameters" : [
          "* `color` - an optional table containing color keys as described in `hs.drawing.color`",
          ""
        ]
      },
      {
        "desc" : "Get or set whether a date range can be selected by the datepicker object",
        "stripped_doc" : [
          "Get or set whether a date range can be selected by the datepicker object",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:dateRangeMode([flag]) -> datepickerObject | boolean",
        "doc" : "Get or set whether a date range can be selected by the datepicker object\n\nParameters:\n * `flag` - an optional boolean, default false, indicating whether or not the datepicker allows a single date (false) or a date range (true) to be selected.\n\nReturns:\n * If an argument is provided, the datepickerObject; otherwise the current value.\n\nNotes:\n * A date range can only be selected by the user when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".\n\n * When the user has selected a date range, the first date in the range will be available in [hs._asm.guitk.element.datepicker:date](#date) and the interval between the start and end date will be the number of seconds returned by [hs._asm.guitk.element.datepicker:timeInterval](#timeInterval)",
        "notes" : [
          " * A date range can only be selected by the user when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".",
          "",
          " * When the user has selected a date range, the first date in the range will be available in [hs._asm.guitk.element.datepicker:date](#date) and the interval between the start and end date will be the number of seconds returned by [hs._asm.guitk.element.datepicker:timeInterval](#timeInterval)"
        ],
        "signature" : "hs._asm.guitk.element.datepicker:dateRangeMode([flag]) -> datepickerObject | boolean",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the datepickerObject; otherwise the current value.",
          ""
        ],
        "name" : "dateRangeMode",
        "parameters" : [
          " * `flag` - an optional boolean, default false, indicating whether or not the datepicker allows a single date (false) or a date range (true) to be selected.",
          ""
        ]
      },
      {
        "desc" : "Get or set the style of datepicker element displayed.",
        "stripped_doc" : [
          "Get or set the style of datepicker element displayed.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:pickerStyle([style]) -> datepickerObject | string",
        "doc" : "Get or set the style of datepicker element displayed.\n\nParameters:\n * `style` - an optional string, default \"textFieldAndStepper\", specifying the images alignment within the element frame. Valid strings are as follows:\n   * \"textFieldAndStepper\" - displays the date in an editable textfield with stepper arrows\n   * \"clockAndCalendar\"    - displays a calendar and\/or clock, depending upon the value of [hs._asm.guitk.element.datepicker:pickerElements](#pickerElements).\n   * \"textField\"           - displays the date in an editable textfield\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker:pickerStyle([style]) -> datepickerObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value."
        ],
        "name" : "pickerStyle",
        "parameters" : [
          " * `style` - an optional string, default \"textFieldAndStepper\", specifying the images alignment within the element frame. Valid strings are as follows:",
          "   * \"textFieldAndStepper\" - displays the date in an editable textfield with stepper arrows",
          "   * \"clockAndCalendar\"    - displays a calendar and\/or clock, depending upon the value of [hs._asm.guitk.element.datepicker:pickerElements](#pickerElements).",
          "   * \"textField\"           - displays the date in an editable textfield",
          ""
        ]
      },
      {
        "desc" : "Get or set what date and time components the datepicker element presents to the user for modification",
        "stripped_doc" : [
          "Get or set what date and time components the datepicker element presents to the user for modification",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker.pickerElements([elements]) -> datepickerObject | table",
        "doc" : "Get or set what date and time components the datepicker element presents to the user for modification\n\nParameters:\n * `elements` - an optional table containing the following key-value pairs:\n   * `timeElement` - a string, default \"HMS\", specifying what time components to display. Valid strings are:\n     * \"HMS\" - allows setting the hour, minute, and seconds of the time. This is the default.\n     * \"HM\"  - allows setting the hour and minute of the time\n     * \"off\" - do not present the time for modification; can also be nil (i.e. if the `timeElement` key is not provided)\n   * `dateElement` - a string, default \"YMD\", specifying what date components to display. Valid strings are:\n     * \"YMD\" - allows setting the year, month, and day of the date. This is the default.\n     * \"YM\"  - allows setting the year and month; not valid when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\" and will be reset to \"YMD\".\n     * \"off\" - do not present the date for modification; can also be nil (i.e. if the `dateElement` key is not provided)\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.datepicker.pickerElements([elements]) -> datepickerObject | table",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value."
        ],
        "name" : "pickerElements",
        "parameters" : [
          " * `elements` - an optional table containing the following key-value pairs:",
          "   * `timeElement` - a string, default \"HMS\", specifying what time components to display. Valid strings are:",
          "     * \"HMS\" - allows setting the hour, minute, and seconds of the time. This is the default.",
          "     * \"HM\"  - allows setting the hour and minute of the time",
          "     * \"off\" - do not present the time for modification; can also be nil (i.e. if the `timeElement` key is not provided)",
          "   * `dateElement` - a string, default \"YMD\", specifying what date components to display. Valid strings are:",
          "     * \"YMD\" - allows setting the year, month, and day of the date. This is the default.",
          "     * \"YM\"  - allows setting the year and month; not valid when [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\" and will be reset to \"YMD\".",
          "     * \"off\" - do not present the date for modification; can also be nil (i.e. if the `dateElement` key is not provided)",
          ""
        ]
      },
      {
        "desc" : "Get or set the current locale used for displaying the datepicker element.",
        "stripped_doc" : [
          "Get or set the current locale used for displaying the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:locale([locale]) -> datepickerObject | string | nil",
        "doc" : "Get or set the current locale used for displaying the datepicker element.\n\nParameters:\n * `locale` - an optional string specifying the locale that determines how the datepicker should be displayed. Specify nil, the default value, to use the current system locale.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * See `hs.host.locale.availableLocales` for a list of locales available.",
        "notes" : [
          " * See `hs.host.locale.availableLocales` for a list of locales available."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:locale([locale]) -> datepickerObject | string | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "locale",
        "parameters" : [
          " * `locale` - an optional string specifying the locale that determines how the datepicker should be displayed. Specify nil, the default value, to use the current system locale.",
          ""
        ]
      },
      {
        "desc" : "Get or set the current timezone used for displaying the time in the datepicker element.",
        "stripped_doc" : [
          "Get or set the current timezone used for displaying the time in the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:timezone([timezone]) -> datepickerObject | string | integer | nil",
        "doc" : "Get or set the current timezone used for displaying the time in the datepicker element.\n\nParameters:\n * `timezone` - an optional string or integer specifying the timezone used when displaying the time in the element. Specify nil, the default value, to use the current system timezone. If specified as an integer, the integer represents the number of seconds offset from GMT.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * See [hs._asm.guitk.element.datepicker.timezoneNames](#timezoneNames) and [hs._asm.guitk.element.datepicker.timezoneAbbreviations](#timezoneAbbreviations) for valid strings that can be used with this method.",
        "notes" : [
          " * See [hs._asm.guitk.element.datepicker.timezoneNames](#timezoneNames) and [hs._asm.guitk.element.datepicker.timezoneAbbreviations](#timezoneAbbreviations) for valid strings that can be used with this method."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:timezone([timezone]) -> datepickerObject | string | integer | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "timezone",
        "parameters" : [
          " * `timezone` - an optional string or integer specifying the timezone used when displaying the time in the element. Specify nil, the default value, to use the current system timezone. If specified as an integer, the integer represents the number of seconds offset from GMT.",
          ""
        ]
      },
      {
        "desc" : "Get or set the current calendar used for displaying the date in the datepicker element.",
        "stripped_doc" : [
          "Get or set the current calendar used for displaying the date in the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:calendar([calendar]) -> datepickerObject | string | nil",
        "doc" : "Get or set the current calendar used for displaying the date in the datepicker element.\n\nParameters:\n * `calendar` - an optional string specifying the calendar used when displaying the date in the element. Specify nil, the default value, to use the current system calendar.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * See [hs._asm.guitk.element.datepicker.calendarIdentifiers](#calendarIdentifiers) for valid strings that can be used with this method.",
        "notes" : [
          " * See [hs._asm.guitk.element.datepicker.calendarIdentifiers](#calendarIdentifiers) for valid strings that can be used with this method."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:calendar([calendar]) -> datepickerObject | string | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "calendar",
        "parameters" : [
          " * `calendar` - an optional string specifying the calendar used when displaying the date in the element. Specify nil, the default value, to use the current system calendar.",
          ""
        ]
      },
      {
        "desc" : "Get or set the interval between the start date and the end date when a range of dates is specified by the datepicker element.",
        "stripped_doc" : [
          "Get or set the interval between the start date and the end date when a range of dates is specified by the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:timeInterval([interval]) -> datepickerObject | integer",
        "doc" : "Get or set the interval between the start date and the end date when a range of dates is specified by the datepicker element.\n\nParameters:\n * `interval` - an optional integer specifying the interval between a the range of dates represented by the datepicker element.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * This value is only relevant when [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true and [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".\n\n * If the user selects a range of dates in the calendar portion of the datepicker element, this number will be a multiple of 86400, the number of seconds in a day.\n * If you set a value with this method, it should be a multiple of 86400 - fractions of a day will not be visible or adjustable within the datepicker element.",
        "notes" : [
          " * This value is only relevant when [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true and [hs._asm.guitk.element.datepicker:pickerStyle](#pickerStyle) is \"clockAndCalendar\".",
          "",
          " * If the user selects a range of dates in the calendar portion of the datepicker element, this number will be a multiple of 86400, the number of seconds in a day.",
          " * If you set a value with this method, it should be a multiple of 86400 - fractions of a day will not be visible or adjustable within the datepicker element."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:timeInterval([interval]) -> datepickerObject | integer",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "timeInterval",
        "parameters" : [
          " * `interval` - an optional integer specifying the interval between a the range of dates represented by the datepicker element.",
          ""
        ]
      },
      {
        "desc" : "Get or set the date, or initial date when dateRangeMode is true, and time displayed by the datepicker element.",
        "stripped_doc" : [
          "Get or set the date, or initial date when dateRangeMode is true, and time displayed by the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:date([date]) -> datepickerObject | number",
        "doc" : "Get or set the date, or initial date when dateRangeMode is true, and time displayed by the datepicker element.\n\nParameters:\n * `date` - an optional number representing a date and time as the number of seconds from 00:00:00 GMT on 1 January 1970. The default value will be the number representing the date and time when the element was constructed with [hs._asm.guitk.element.datepicker.new](#new).\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * Lua's `os.date` function can only handle integer values; this method returns fractions of a second in the decimal portion of the number, so you will need to convert the number to an integer first, e.g. `os.date(\"%c\", math.floor(hs._asm.guitk.element.datepicker:date()))`\n\n * When [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true, the end date of the range can be calculated as `hs._asm.guitk.element.datepicker:date() + hs._asm.guitk.element.datepicker:timeInterval()`.",
        "notes" : [
          " * Lua's `os.date` function can only handle integer values; this method returns fractions of a second in the decimal portion of the number, so you will need to convert the number to an integer first, e.g. `os.date(\"%c\", math.floor(hs._asm.guitk.element.datepicker:date()))`",
          "",
          " * When [hs._asm.guitk.element.datepicker:dateRangeMode](#dateRangeMode) is true, the end date of the range can be calculated as `hs._asm.guitk.element.datepicker:date() + hs._asm.guitk.element.datepicker:timeInterval()`."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:date([date]) -> datepickerObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "date",
        "parameters" : [
          " * `date` - an optional number representing a date and time as the number of seconds from 00:00:00 GMT on 1 January 1970. The default value will be the number representing the date and time when the element was constructed with [hs._asm.guitk.element.datepicker.new](#new).",
          ""
        ]
      },
      {
        "desc" : "Get or set the maximum date and time the user is allowed to select with the datepicker element.",
        "stripped_doc" : [
          "Get or set the maximum date and time the user is allowed to select with the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:maxDate([date]) -> datepickerObject | number",
        "doc" : "Get or set the maximum date and time the user is allowed to select with the datepicker element.\n\nParameters:\n * `date` - an optional number representing the maximum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no maximum valid date and time.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * The behavior is undefined If a value is set with this method and it is less than the value of [hs._asm.guitk.element.datepicker:minDate](#minDate).",
        "notes" : [
          " * The behavior is undefined If a value is set with this method and it is less than the value of [hs._asm.guitk.element.datepicker:minDate](#minDate)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:maxDate([date]) -> datepickerObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "maxDate",
        "parameters" : [
          " * `date` - an optional number representing the maximum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no maximum valid date and time.",
          ""
        ]
      },
      {
        "desc" : "Get or set the minimum date and time the user is allowed to select with the datepicker element.",
        "stripped_doc" : [
          "Get or set the minimum date and time the user is allowed to select with the datepicker element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.datepicker:minDate([date]) -> datepickerObject | number",
        "doc" : "Get or set the minimum date and time the user is allowed to select with the datepicker element.\n\nParameters:\n * `date` - an optional number representing the minimum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no minimum valid date and time.\n\nReturns:\n * if a value is provided, returns the datepickerObject ; otherwise returns the current value.\n\nNotes:\n * The behavior is undefined If a value is set with this method and it is greater than the value of [hs._asm.guitk.element.datepicker:maxDate](#maxDate).",
        "notes" : [
          " * The behavior is undefined If a value is set with this method and it is greater than the value of [hs._asm.guitk.element.datepicker:maxDate](#maxDate)."
        ],
        "signature" : "hs._asm.guitk.element.datepicker:minDate([date]) -> datepickerObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the datepickerObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "minDate",
        "parameters" : [
          " * `date` - an optional number representing the minimum date and time that the user is allowed to select with the datepicker element. Set to nil, the default value, to specify that there is no minimum valid date and time.",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "name" : "hs._asm.guitk.element.datepicker"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Provides an image holder element `hs._asm.guitk`. The image can be static, specified by you, or it can be an editable element, allowing the user to change the image through drag-and-drop or cut-and-paste.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [
      {
        "desc" : "Creates a new image holder element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new image holder element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image.new([frame]) -> imageObject",
        "doc" : "Creates a new image holder element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for element.\n\nReturns:\n * the imageObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * If you do not assign an image to the element with [hs._asm.guitk.element.image:image](#image) after creating a new image element, the element will not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible.",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * If you do not assign an image to the element with [hs._asm.guitk.element.image:image](#image) after creating a new image element, the element will not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.image.new([frame]) -> imageObject",
        "type" : "Constructor",
        "returns" : [
          " * the imageObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for element.",
          ""
        ]
      }
    ],
    "doc" : "Provides an image holder element `hs._asm.guitk`. The image can be static, specified by you, or it can be an editable element, allowing the user to change the image through drag-and-drop or cut-and-paste.\n\n* This submodule inherits methods from `hs._asm.guitk.element._control` and you should consult its documentation for additional methods which may be used.\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "items" : [
      {
        "desc" : "Creates a new image holder element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new image holder element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image.new([frame]) -> imageObject",
        "doc" : "Creates a new image holder element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for element.\n\nReturns:\n * the imageObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * If you do not assign an image to the element with [hs._asm.guitk.element.image:image](#image) after creating a new image element, the element will not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible.",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * If you do not assign an image to the element with [hs._asm.guitk.element.image:image](#image) after creating a new image element, the element will not have a default height or width; when assigning the element to an `hs._asm.guitk.manager`, be sure to specify them in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.image.new([frame]) -> imageObject",
        "type" : "Constructor",
        "returns" : [
          " * the imageObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for element.",
          ""
        ]
      },
      {
        "desc" : "Get or set the callback function which will be invoked whenever the user changes the image of the element by dragging or pasting an image into it.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked whenever the user changes the image of the element by dragging or pasting an image into it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:callback([fn | nil]) -> imageObject | fn | nil",
        "doc" : "Get or set the callback function which will be invoked whenever the user changes the image of the element by dragging or pasting an image into it.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the image inside the element is changed by the user.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.\n\nNotes:\n * The image callback will receive one argument and should return none. The argument will be the imageObject userdata.\n   * Use [hs._asm.guitk.element.image:image](#image) on the argument to get the new image.",
        "notes" : [
          " * The image callback will receive one argument and should return none. The argument will be the imageObject userdata.",
          "   * Use [hs._asm.guitk.element.image:image](#image) on the argument to get the new image."
        ],
        "signature" : "hs._asm.guitk.element.image:callback([fn | nil]) -> imageObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the image inside the element is changed by the user.",
          ""
        ]
      },
      {
        "desc" : "Get or set the image currently being displayed in the image element.",
        "stripped_doc" : [
          "Get or set the image currently being displayed in the image element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:image([image]) -> imageObject | hs.image | nil",
        "doc" : "Get or set the image currently being displayed in the image element.\n\nParameters:\n * `image` - an optional `hs.image` object, or explicit nil to remove, representing the image currently being displayed by the image element.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.\n\nNotes:\n * If the element is editable or supports cut-and-paste, any change made by the user to the image will be available to Hammerspoon through this method.",
        "notes" : [
          " * If the element is editable or supports cut-and-paste, any change made by the user to the image will be available to Hammerspoon through this method."
        ],
        "signature" : "hs._asm.guitk.element.image:image([image]) -> imageObject | hs.image | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "image",
        "parameters" : [
          " * `image` - an optional `hs.image` object, or explicit nil to remove, representing the image currently being displayed by the image element.",
          ""
        ]
      },
      {
        "desc" : "Get or set the alignment of the image within the image element.",
        "stripped_doc" : [
          "Get or set the alignment of the image within the image element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:imageAlignment([alignment]) -> imageObject | string",
        "doc" : "Get or set the alignment of the image within the image element.\n\nParameters:\n * `alignment` - an optional string, default \"center\", specifying the images alignment within the element frame. Valid strings are as follows:\n   * \"topLeft\"     - the image's top left corner will match the element frame's top left corner\n   * \"top\"         - the image's top match the element frame's top and will be centered horizontally\n   * \"topRight\"    - the image's top right corner will match the element frame's top right corner\n   * \"left\"        - the image's left side will match the element frame's left side and will be centered vertically\n   * \"center\"      - the image will be centered vertically and horizontally within the element frame\n   * \"right\"       - the image's right side will match the element frame's right side and will be centered vertically\n   * \"bottomLeft\"  - the image's bottom left corner will match the element frame's bottom left corner\n   * \"bottom\"      - the image's bottom match the element frame's bottom and will be centered horizontally\n   * \"bottomRight\" - the image's bottom right corner will match the element frame's bottom right corner\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.image:imageAlignment([alignment]) -> imageObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "name" : "imageAlignment",
        "parameters" : [
          " * `alignment` - an optional string, default \"center\", specifying the images alignment within the element frame. Valid strings are as follows:",
          "   * \"topLeft\"     - the image's top left corner will match the element frame's top left corner",
          "   * \"top\"         - the image's top match the element frame's top and will be centered horizontally",
          "   * \"topRight\"    - the image's top right corner will match the element frame's top right corner",
          "   * \"left\"        - the image's left side will match the element frame's left side and will be centered vertically",
          "   * \"center\"      - the image will be centered vertically and horizontally within the element frame",
          "   * \"right\"       - the image's right side will match the element frame's right side and will be centered vertically",
          "   * \"bottomLeft\"  - the image's bottom left corner will match the element frame's bottom left corner",
          "   * \"bottom\"      - the image's bottom match the element frame's bottom and will be centered horizontally",
          "   * \"bottomRight\" - the image's bottom right corner will match the element frame's bottom right corner",
          ""
        ]
      },
      {
        "desc" : "Get or set the visual frame drawn around the image element area.",
        "stripped_doc" : [
          "Get or set the visual frame drawn around the image element area.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:imageFrameStyle([style]) -> imageObject | string",
        "doc" : "Get or set the visual frame drawn around the image element area.\n\nParameters:\n * `style` - an optional string, default \"none\", specifying the frame to draw around the image element area. Valid strings are as follows:\n   * \"none\"   - no frame is drawing around the image element frame\n   * \"photo\"  - a thin black outline with a white background and a dropped shadow.\n   * \"bezel\"  - a gray, concave bezel with no background that makes the image look sunken\n   * \"groove\" - a thin groove with a gray background that looks etched around the image\n   * \"button\" - a convex bezel with a gray background that makes the image stand out in relief, like a butto\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.\n\nNotes:\n * Apple considers the photo, groove, and button style frames \"stylistically obsolete\" and if a frame is required, recommend that you use the bezel style or draw your own to more closely match the OS look and feel.",
        "notes" : [
          " * Apple considers the photo, groove, and button style frames \"stylistically obsolete\" and if a frame is required, recommend that you use the bezel style or draw your own to more closely match the OS look and feel."
        ],
        "signature" : "hs._asm.guitk.element.image:imageFrameStyle([style]) -> imageObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "imageFrameStyle",
        "parameters" : [
          " * `style` - an optional string, default \"none\", specifying the frame to draw around the image element area. Valid strings are as follows:",
          "   * \"none\"   - no frame is drawing around the image element frame",
          "   * \"photo\"  - a thin black outline with a white background and a dropped shadow.",
          "   * \"bezel\"  - a gray, concave bezel with no background that makes the image look sunken",
          "   * \"groove\" - a thin groove with a gray background that looks etched around the image",
          "   * \"button\" - a convex bezel with a gray background that makes the image stand out in relief, like a butto",
          ""
        ]
      },
      {
        "desc" : "Get or set the scaling applied to the image if it doesn't fit the image element area exactly",
        "stripped_doc" : [
          "Get or set the scaling applied to the image if it doesn't fit the image element area exactly",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:imageScaling([scale]) -> imageObject | string",
        "doc" : "Get or set the scaling applied to the image if it doesn't fit the image element area exactly\n\nParameters:\n * `scale` - an optional string, default \"proportionallyDown\", specifying how to scale the image when it doesn't fit the element area exactly. Valid strings are as follows:\n   * \"proportionallyDown\"     - shrink the image, preserving the aspect ratio, to fit the element frame if the image is larger than the element frame\n   * \"axesIndependently\"      - shrink or expand the image to fully fill the element frame. This does not preserve the aspect ratio\n   * \"none\"                   - perform no scaling or resizing of the image\n   * \"proportionallyUpOrDown\" - shrink or expand the image to fully fill the element frame, preserving the aspect ration\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.image:imageScaling([scale]) -> imageObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "name" : "imageScaling",
        "parameters" : [
          " * `scale` - an optional string, default \"proportionallyDown\", specifying how to scale the image when it doesn't fit the element area exactly. Valid strings are as follows:",
          "   * \"proportionallyDown\"     - shrink the image, preserving the aspect ratio, to fit the element frame if the image is larger than the element frame",
          "   * \"axesIndependently\"      - shrink or expand the image to fully fill the element frame. This does not preserve the aspect ratio",
          "   * \"none\"                   - perform no scaling or resizing of the image",
          "   * \"proportionallyUpOrDown\" - shrink or expand the image to fully fill the element frame, preserving the aspect ration",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Get or set the alignment of the image within the image element.",
        "stripped_doc" : [
          "Get or set the alignment of the image within the image element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:imageAlignment([alignment]) -> imageObject | string",
        "doc" : "Get or set the alignment of the image within the image element.\n\nParameters:\n * `alignment` - an optional string, default \"center\", specifying the images alignment within the element frame. Valid strings are as follows:\n   * \"topLeft\"     - the image's top left corner will match the element frame's top left corner\n   * \"top\"         - the image's top match the element frame's top and will be centered horizontally\n   * \"topRight\"    - the image's top right corner will match the element frame's top right corner\n   * \"left\"        - the image's left side will match the element frame's left side and will be centered vertically\n   * \"center\"      - the image will be centered vertically and horizontally within the element frame\n   * \"right\"       - the image's right side will match the element frame's right side and will be centered vertically\n   * \"bottomLeft\"  - the image's bottom left corner will match the element frame's bottom left corner\n   * \"bottom\"      - the image's bottom match the element frame's bottom and will be centered horizontally\n   * \"bottomRight\" - the image's bottom right corner will match the element frame's bottom right corner\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.image:imageAlignment([alignment]) -> imageObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "name" : "imageAlignment",
        "parameters" : [
          " * `alignment` - an optional string, default \"center\", specifying the images alignment within the element frame. Valid strings are as follows:",
          "   * \"topLeft\"     - the image's top left corner will match the element frame's top left corner",
          "   * \"top\"         - the image's top match the element frame's top and will be centered horizontally",
          "   * \"topRight\"    - the image's top right corner will match the element frame's top right corner",
          "   * \"left\"        - the image's left side will match the element frame's left side and will be centered vertically",
          "   * \"center\"      - the image will be centered vertically and horizontally within the element frame",
          "   * \"right\"       - the image's right side will match the element frame's right side and will be centered vertically",
          "   * \"bottomLeft\"  - the image's bottom left corner will match the element frame's bottom left corner",
          "   * \"bottom\"      - the image's bottom match the element frame's bottom and will be centered horizontally",
          "   * \"bottomRight\" - the image's bottom right corner will match the element frame's bottom right corner",
          ""
        ]
      },
      {
        "desc" : "Get or set the visual frame drawn around the image element area.",
        "stripped_doc" : [
          "Get or set the visual frame drawn around the image element area.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:imageFrameStyle([style]) -> imageObject | string",
        "doc" : "Get or set the visual frame drawn around the image element area.\n\nParameters:\n * `style` - an optional string, default \"none\", specifying the frame to draw around the image element area. Valid strings are as follows:\n   * \"none\"   - no frame is drawing around the image element frame\n   * \"photo\"  - a thin black outline with a white background and a dropped shadow.\n   * \"bezel\"  - a gray, concave bezel with no background that makes the image look sunken\n   * \"groove\" - a thin groove with a gray background that looks etched around the image\n   * \"button\" - a convex bezel with a gray background that makes the image stand out in relief, like a butto\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.\n\nNotes:\n * Apple considers the photo, groove, and button style frames \"stylistically obsolete\" and if a frame is required, recommend that you use the bezel style or draw your own to more closely match the OS look and feel.",
        "notes" : [
          " * Apple considers the photo, groove, and button style frames \"stylistically obsolete\" and if a frame is required, recommend that you use the bezel style or draw your own to more closely match the OS look and feel."
        ],
        "signature" : "hs._asm.guitk.element.image:imageFrameStyle([style]) -> imageObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "imageFrameStyle",
        "parameters" : [
          " * `style` - an optional string, default \"none\", specifying the frame to draw around the image element area. Valid strings are as follows:",
          "   * \"none\"   - no frame is drawing around the image element frame",
          "   * \"photo\"  - a thin black outline with a white background and a dropped shadow.",
          "   * \"bezel\"  - a gray, concave bezel with no background that makes the image look sunken",
          "   * \"groove\" - a thin groove with a gray background that looks etched around the image",
          "   * \"button\" - a convex bezel with a gray background that makes the image stand out in relief, like a butto",
          ""
        ]
      },
      {
        "desc" : "Get or set the scaling applied to the image if it doesn't fit the image element area exactly",
        "stripped_doc" : [
          "Get or set the scaling applied to the image if it doesn't fit the image element area exactly",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:imageScaling([scale]) -> imageObject | string",
        "doc" : "Get or set the scaling applied to the image if it doesn't fit the image element area exactly\n\nParameters:\n * `scale` - an optional string, default \"proportionallyDown\", specifying how to scale the image when it doesn't fit the element area exactly. Valid strings are as follows:\n   * \"proportionallyDown\"     - shrink the image, preserving the aspect ratio, to fit the element frame if the image is larger than the element frame\n   * \"axesIndependently\"      - shrink or expand the image to fully fill the element frame. This does not preserve the aspect ratio\n   * \"none\"                   - perform no scaling or resizing of the image\n   * \"proportionallyUpOrDown\" - shrink or expand the image to fully fill the element frame, preserving the aspect ration\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.image:imageScaling([scale]) -> imageObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value."
        ],
        "name" : "imageScaling",
        "parameters" : [
          " * `scale` - an optional string, default \"proportionallyDown\", specifying how to scale the image when it doesn't fit the element area exactly. Valid strings are as follows:",
          "   * \"proportionallyDown\"     - shrink the image, preserving the aspect ratio, to fit the element frame if the image is larger than the element frame",
          "   * \"axesIndependently\"      - shrink or expand the image to fully fill the element frame. This does not preserve the aspect ratio",
          "   * \"none\"                   - perform no scaling or resizing of the image",
          "   * \"proportionallyUpOrDown\" - shrink or expand the image to fully fill the element frame, preserving the aspect ration",
          ""
        ]
      },
      {
        "desc" : "Get or set the image currently being displayed in the image element.",
        "stripped_doc" : [
          "Get or set the image currently being displayed in the image element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:image([image]) -> imageObject | hs.image | nil",
        "doc" : "Get or set the image currently being displayed in the image element.\n\nParameters:\n * `image` - an optional `hs.image` object, or explicit nil to remove, representing the image currently being displayed by the image element.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.\n\nNotes:\n * If the element is editable or supports cut-and-paste, any change made by the user to the image will be available to Hammerspoon through this method.",
        "notes" : [
          " * If the element is editable or supports cut-and-paste, any change made by the user to the image will be available to Hammerspoon through this method."
        ],
        "signature" : "hs._asm.guitk.element.image:image([image]) -> imageObject | hs.image | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "image",
        "parameters" : [
          " * `image` - an optional `hs.image` object, or explicit nil to remove, representing the image currently being displayed by the image element.",
          ""
        ]
      },
      {
        "desc" : "Get or set the callback function which will be invoked whenever the user changes the image of the element by dragging or pasting an image into it.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked whenever the user changes the image of the element by dragging or pasting an image into it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.image:callback([fn | nil]) -> imageObject | fn | nil",
        "doc" : "Get or set the callback function which will be invoked whenever the user changes the image of the element by dragging or pasting an image into it.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the image inside the element is changed by the user.\n\nReturns:\n * if a value is provided, returns the imageObject ; otherwise returns the current value.\n\nNotes:\n * The image callback will receive one argument and should return none. The argument will be the imageObject userdata.\n   * Use [hs._asm.guitk.element.image:image](#image) on the argument to get the new image.",
        "notes" : [
          " * The image callback will receive one argument and should return none. The argument will be the imageObject userdata.",
          "   * Use [hs._asm.guitk.element.image:image](#image) on the argument to get the new image."
        ],
        "signature" : "hs._asm.guitk.element.image:callback([fn | nil]) -> imageObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the imageObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the image inside the element is changed by the user.",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "name" : "hs._asm.guitk.element.image"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Provides spinning and bar progress indicator elements for use with `hs._asm.guitk`.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [
      {
        "desc" : "Creates a new Progress Indicator element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new Progress Indicator element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress.new([frame]) -> progressIndicatorObject",
        "doc" : "Creates a new Progress Indicator element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the progress indicator object.\n\nReturns:\n * the progressIndicatorObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The bar progress indicator type does not have a default width; if you are assigning the progress element to an `hs._asm.guitk.manager`, be sure to specify a width in the frame details or the element may not be visible.",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The bar progress indicator type does not have a default width; if you are assigning the progress element to an `hs._asm.guitk.manager`, be sure to specify a width in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.progress.new([frame]) -> progressIndicatorObject",
        "type" : "Constructor",
        "returns" : [
          " * the progressIndicatorObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the progress indicator object.",
          ""
        ]
      }
    ],
    "doc" : "Provides spinning and bar progress indicator elements for use with `hs._asm.guitk`.\n\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "items" : [
      {
        "desc" : "Creates a new Progress Indicator element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new Progress Indicator element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress.new([frame]) -> progressIndicatorObject",
        "doc" : "Creates a new Progress Indicator element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the progress indicator object.\n\nReturns:\n * the progressIndicatorObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The bar progress indicator type does not have a default width; if you are assigning the progress element to an `hs._asm.guitk.manager`, be sure to specify a width in the frame details or the element may not be visible.",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The bar progress indicator type does not have a default width; if you are assigning the progress element to an `hs._asm.guitk.manager`, be sure to specify a width in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.progress.new([frame]) -> progressIndicatorObject",
        "type" : "Constructor",
        "returns" : [
          " * the progressIndicatorObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the progress indicator object.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the progress indicator’s frame has a three-dimensional bezel.",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator’s frame has a three-dimensional bezel.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:bezeled([flag]) -> progressObject | boolean",
        "doc" : "Get or set whether or not the progress indicator’s frame has a three-dimensional bezel.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the indicator's frame is bezeled.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.\n * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had a greater effect in previous versions).",
        "notes" : [
          " * The default setting for this is true.",
          " * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had a greater effect in previous versions)."
        ],
        "signature" : "hs._asm.guitk.element.progress:bezeled([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "bezeled",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the indicator's frame is bezeled.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the progress indicator is circular or a in the form of a progress bar.",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator is circular or a in the form of a progress bar.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:circular([flag]) -> progressObject | boolean",
        "doc" : "Get or set whether or not the progress indicator is circular or a in the form of a progress bar.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the indicator is circular (true) or a progress bar (false)\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is false.\n * An indeterminate circular indicator is displayed as the spinning star seen during system startup.\n * A determinate circular indicator is displayed as a pie chart which fills up as its value increases.\n * An indeterminate progress indicator is displayed as a rounded rectangle with a moving pulse.\n * A determinate progress indicator is displayed as a rounded rectangle that fills up as its value increases.",
        "notes" : [
          " * The default setting for this is false.",
          " * An indeterminate circular indicator is displayed as the spinning star seen during system startup.",
          " * A determinate circular indicator is displayed as a pie chart which fills up as its value increases.",
          " * An indeterminate progress indicator is displayed as a rounded rectangle with a moving pulse.",
          " * A determinate progress indicator is displayed as a rounded rectangle that fills up as its value increases."
        ],
        "signature" : "hs._asm.guitk.element.progress:circular([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "circular",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the indicator is circular (true) or a progress bar (false)",
          ""
        ]
      },
      {
        "desc" : "Get or set the fill color for a progress indicator.",
        "stripped_doc" : [
          "Get or set the fill color for a progress indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:color(color) -> progressObject | table | nil",
        "doc" : "Get or set the fill color for a progress indicator.\n\nParameters:\n * `color` - an optional table specifying a color as defined in `hs.drawing.color` indicating the color to use for the progress indicator, or an explicit nil to reset the behavior to macOS default.\n\nReturns:\n * the progress indicator object\n\nNotes:\n * This method is not based upon the methods inherent in the NSProgressIndicator Objective-C class, but rather on code found at http:\/\/stackoverflow.com\/a\/32396595 utilizing a CIFilter object to adjust the view's output.\n * When a color is applied to a bar indicator, the visible pulsing of the bar is no longer visible; this is a side effect of applying the filter to the view and no workaround is currently known.",
        "notes" : [
          " * This method is not based upon the methods inherent in the NSProgressIndicator Objective-C class, but rather on code found at http:\/\/stackoverflow.com\/a\/32396595 utilizing a CIFilter object to adjust the view's output.",
          " * When a color is applied to a bar indicator, the visible pulsing of the bar is no longer visible; this is a side effect of applying the filter to the view and no workaround is currently known."
        ],
        "signature" : "hs._asm.guitk.element.progress:color(color) -> progressObject | table | nil",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "name" : "color",
        "parameters" : [
          " * `color` - an optional table specifying a color as defined in `hs.drawing.color` indicating the color to use for the progress indicator, or an explicit nil to reset the behavior to macOS default.",
          ""
        ]
      },
      {
        "desc" : "Increment the current value of a progress indicator's progress by the amount specified.",
        "stripped_doc" : [
          "Increment the current value of a progress indicator's progress by the amount specified.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:increment(value) -> progressObject",
        "doc" : "Increment the current value of a progress indicator's progress by the amount specified.\n\nParameters:\n * `value` - the value by which to increment the progress indicator's current value.\n\nReturns:\n * the progress indicator object\n\nNotes:\n * Programmatically, this is equivalent to `hs._asm.guitk.element.progress:value(hs._asm.guitk.element.progress:value() + value)`, but is faster.",
        "notes" : [
          " * Programmatically, this is equivalent to `hs._asm.guitk.element.progress:value(hs._asm.guitk.element.progress:value() + value)`, but is faster."
        ],
        "signature" : "hs._asm.guitk.element.progress:increment(value) -> progressObject",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "name" : "increment",
        "parameters" : [
          " * `value` - the value by which to increment the progress indicator's current value.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the progress indicator is indeterminate.  A determinate indicator displays how much of the task has been completed. An indeterminate indicator shows simply that the application is busy.",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator is indeterminate.  A determinate indicator displays how much of the task has been completed. An indeterminate indicator shows simply that the application is busy.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:indeterminate([flag]) -> progressObject | boolean",
        "doc" : "Get or set whether or not the progress indicator is indeterminate.  A determinate indicator displays how much of the task has been completed. An indeterminate indicator shows simply that the application is busy.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the indicator is indeterminate.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.\n * If this setting is set to false, you should also take a look at [hs._asm.guitk.element.progress:min](#min) and [hs._asm.guitk.element.progress:max](#max), and periodically update the status with [hs._asm.guitk.element.progress:value](#value) or [hs._asm.guitk.element.progress:increment](#increment)",
        "notes" : [
          " * The default setting for this is true.",
          " * If this setting is set to false, you should also take a look at [hs._asm.guitk.element.progress:min](#min) and [hs._asm.guitk.element.progress:max](#max), and periodically update the status with [hs._asm.guitk.element.progress:value](#value) or [hs._asm.guitk.element.progress:increment](#increment)"
        ],
        "signature" : "hs._asm.guitk.element.progress:indeterminate([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "indeterminate",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the indicator is indeterminate.",
          ""
        ]
      },
      {
        "desc" : "Get or set the indicator's size.",
        "stripped_doc" : [
          "Get or set the indicator's size.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:indicatorSize([size]) -> progressObject | string",
        "doc" : "Get or set the indicator's size.\n\nParameters:\n * `size` - an optional string specifying the size of the progress indicator object.  May be one of \"regular\", \"small\", or \"mini\".\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is \"regular\".\n * For circular indicators, the sizes seem to be 32x32, 16x16, and 10x10 in 10.11.\n * For bar indicators, the height seems to be 20 and 12; the mini size seems to be ignored, at least in 10.11.",
        "notes" : [
          " * The default setting for this is \"regular\".",
          " * For circular indicators, the sizes seem to be 32x32, 16x16, and 10x10 in 10.11.",
          " * For bar indicators, the height seems to be 20 and 12; the mini size seems to be ignored, at least in 10.11."
        ],
        "signature" : "hs._asm.guitk.element.progress:indicatorSize([size]) -> progressObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "indicatorSize",
        "parameters" : [
          " * `size` - an optional string specifying the size of the progress indicator object.  May be one of \"regular\", \"small\", or \"mini\".",
          ""
        ]
      },
      {
        "desc" : "Get or set the maximum value (the value at which the progress indicator should display as full) for the progress indicator.",
        "stripped_doc" : [
          "Get or set the maximum value (the value at which the progress indicator should display as full) for the progress indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:max([value]) -> progressObject | number",
        "doc" : "Get or set the maximum value (the value at which the progress indicator should display as full) for the progress indicator.\n\nParameters:\n * `value` - an optional number indicating the maximum value.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default value for this is 100.0\n * This value has no effect on the display of an indeterminate progress indicator.\n * For a determinate indicator, the behavior is undefined if this value is less than [hs._asm.guitk.element.progress:min](#min).",
        "notes" : [
          " * The default value for this is 100.0",
          " * This value has no effect on the display of an indeterminate progress indicator.",
          " * For a determinate indicator, the behavior is undefined if this value is less than [hs._asm.guitk.element.progress:min](#min)."
        ],
        "signature" : "hs._asm.guitk.element.progress:max([value]) -> progressObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "max",
        "parameters" : [
          " * `value` - an optional number indicating the maximum value.",
          ""
        ]
      },
      {
        "desc" : "Get or set the minimum value (the value at which the progress indicator should display as empty) for the progress indicator.",
        "stripped_doc" : [
          "Get or set the minimum value (the value at which the progress indicator should display as empty) for the progress indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:min([value]) -> progressObject | number",
        "doc" : "Get or set the minimum value (the value at which the progress indicator should display as empty) for the progress indicator.\n\nParameters:\n * `value` - an optional number indicating the minimum value.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default value for this is 0.0\n * This value has no effect on the display of an indeterminate progress indicator.\n * For a determinate indicator, the behavior is undefined if this value is greater than [hs._asm.guitk.element.progress:max](#max).",
        "notes" : [
          " * The default value for this is 0.0",
          " * This value has no effect on the display of an indeterminate progress indicator.",
          " * For a determinate indicator, the behavior is undefined if this value is greater than [hs._asm.guitk.element.progress:max](#max)."
        ],
        "signature" : "hs._asm.guitk.element.progress:min([value]) -> progressObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "min",
        "parameters" : [
          " * `value` - an optional number indicating the minimum value.",
          ""
        ]
      },
      {
        "desc" : "If the progress indicator is indeterminate, starts the animation for the indicator.",
        "stripped_doc" : [
          "If the progress indicator is indeterminate, starts the animation for the indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:start() -> progressObject",
        "doc" : "If the progress indicator is indeterminate, starts the animation for the indicator.\n\nParameters:\n * None\n\nReturns:\n * the progress indicator object\n\nNotes:\n * This method has no effect if the indicator is not indeterminate.",
        "notes" : [
          " * This method has no effect if the indicator is not indeterminate."
        ],
        "signature" : "hs._asm.guitk.element.progress:start() -> progressObject",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "name" : "start",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "If the progress indicator is indeterminate, stops the animation for the indicator.",
        "stripped_doc" : [
          "If the progress indicator is indeterminate, stops the animation for the indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:stop() -> progressObject",
        "doc" : "If the progress indicator is indeterminate, stops the animation for the indicator.\n\nParameters:\n * None\n\nReturns:\n * the progress indicator object\n\nNotes:\n * This method has no effect if the indicator is not indeterminate.",
        "notes" : [
          " * This method has no effect if the indicator is not indeterminate."
        ],
        "signature" : "hs._asm.guitk.element.progress:stop() -> progressObject",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "name" : "stop",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the animation for an indicator occurs in a separate process thread.",
        "stripped_doc" : [
          "Get or set whether or not the animation for an indicator occurs in a separate process thread.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:threaded([flag]) -> progressObject | boolean",
        "doc" : "Get or set whether or not the animation for an indicator occurs in a separate process thread.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the animation for the indicator should occur in a separate thread.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.\n * If this flag is set to false, the indicator animation speed may fluctuate as Hammerspoon performs other activities, though not reliably enough to provide an \"activity level\" feedback indicator.",
        "notes" : [
          " * The default setting for this is true.",
          " * If this flag is set to false, the indicator animation speed may fluctuate as Hammerspoon performs other activities, though not reliably enough to provide an \"activity level\" feedback indicator."
        ],
        "signature" : "hs._asm.guitk.element.progress:threaded([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "threaded",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the animation for the indicator should occur in a separate thread.",
          ""
        ]
      },
      {
        "desc" : "Get or set the indicator's tint.",
        "stripped_doc" : [
          "Get or set the indicator's tint.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:tint([tint]) -> progressObject | string",
        "doc" : "Get or set the indicator's tint.\n\nParameters:\n * `tint` - an optional string specifying the tint of the progress indicator.  May be one of \"default\", \"blue\", \"graphite\", or \"clear\".\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is \"default\".\n * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had an effect in previous versions).",
        "notes" : [
          " * The default setting for this is \"default\".",
          " * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had an effect in previous versions)."
        ],
        "signature" : "hs._asm.guitk.element.progress:tint([tint]) -> progressObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "tint",
        "parameters" : [
          " * `tint` - an optional string specifying the tint of the progress indicator.  May be one of \"default\", \"blue\", \"graphite\", or \"clear\".",
          ""
        ]
      },
      {
        "desc" : "Get or set the current value of the progress indicator's completion status.",
        "stripped_doc" : [
          "Get or set the current value of the progress indicator's completion status.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:value([value]) -> progressObject | number",
        "doc" : "Get or set the current value of the progress indicator's completion status.\n\nParameters:\n * `value` - an optional number indicating the current extent of the progress.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default value for this is 0.0\n * This value has no effect on the display of an indeterminate progress indicator.\n * For a determinate indicator, this will affect how \"filled\" the bar or circle is.  If the value is lower than [hs._asm.guitk.element.progress:min](#min), then it will be set to the current minimum value.  If the value is greater than [hs._asm.guitk.element.progress:max](#max), then it will be set to the current maximum value.",
        "notes" : [
          " * The default value for this is 0.0",
          " * This value has no effect on the display of an indeterminate progress indicator.",
          " * For a determinate indicator, this will affect how \"filled\" the bar or circle is.  If the value is lower than [hs._asm.guitk.element.progress:min](#min), then it will be set to the current minimum value.  If the value is greater than [hs._asm.guitk.element.progress:max](#max), then it will be set to the current maximum value."
        ],
        "signature" : "hs._asm.guitk.element.progress:value([value]) -> progressObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "value",
        "parameters" : [
          " * `value` - an optional number indicating the current extent of the progress.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the progress indicator is visible when animation has been stopped.",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator is visible when animation has been stopped.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:visibleWhenStopped([flag]) -> progressObject | boolean",
        "doc" : "Get or set whether or not the progress indicator is visible when animation has been stopped.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the progress indicator is visible when animation has stopped.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.",
        "notes" : [
          " * The default setting for this is true."
        ],
        "signature" : "hs._asm.guitk.element.progress:visibleWhenStopped([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "visibleWhenStopped",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the progress indicator is visible when animation has stopped.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "If the progress indicator is indeterminate, starts the animation for the indicator.",
        "stripped_doc" : [
          "If the progress indicator is indeterminate, starts the animation for the indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:start() -> progressObject",
        "doc" : "If the progress indicator is indeterminate, starts the animation for the indicator.\n\nParameters:\n * None\n\nReturns:\n * the progress indicator object\n\nNotes:\n * This method has no effect if the indicator is not indeterminate.",
        "notes" : [
          " * This method has no effect if the indicator is not indeterminate."
        ],
        "signature" : "hs._asm.guitk.element.progress:start() -> progressObject",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "name" : "start",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "If the progress indicator is indeterminate, stops the animation for the indicator.",
        "stripped_doc" : [
          "If the progress indicator is indeterminate, stops the animation for the indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:stop() -> progressObject",
        "doc" : "If the progress indicator is indeterminate, stops the animation for the indicator.\n\nParameters:\n * None\n\nReturns:\n * the progress indicator object\n\nNotes:\n * This method has no effect if the indicator is not indeterminate.",
        "notes" : [
          " * This method has no effect if the indicator is not indeterminate."
        ],
        "signature" : "hs._asm.guitk.element.progress:stop() -> progressObject",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "name" : "stop",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the animation for an indicator occurs in a separate process thread.",
        "stripped_doc" : [
          "Get or set whether or not the animation for an indicator occurs in a separate process thread.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:threaded([flag]) -> progressObject | boolean",
        "doc" : "Get or set whether or not the animation for an indicator occurs in a separate process thread.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the animation for the indicator should occur in a separate thread.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.\n * If this flag is set to false, the indicator animation speed may fluctuate as Hammerspoon performs other activities, though not reliably enough to provide an \"activity level\" feedback indicator.",
        "notes" : [
          " * The default setting for this is true.",
          " * If this flag is set to false, the indicator animation speed may fluctuate as Hammerspoon performs other activities, though not reliably enough to provide an \"activity level\" feedback indicator."
        ],
        "signature" : "hs._asm.guitk.element.progress:threaded([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "threaded",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the animation for the indicator should occur in a separate thread.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the progress indicator is indeterminate.  A determinate indicator displays how much of the task has been completed. An indeterminate indicator shows simply that the application is busy.",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator is indeterminate.  A determinate indicator displays how much of the task has been completed. An indeterminate indicator shows simply that the application is busy.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:indeterminate([flag]) -> progressObject | boolean",
        "doc" : "Get or set whether or not the progress indicator is indeterminate.  A determinate indicator displays how much of the task has been completed. An indeterminate indicator shows simply that the application is busy.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the indicator is indeterminate.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.\n * If this setting is set to false, you should also take a look at [hs._asm.guitk.element.progress:min](#min) and [hs._asm.guitk.element.progress:max](#max), and periodically update the status with [hs._asm.guitk.element.progress:value](#value) or [hs._asm.guitk.element.progress:increment](#increment)",
        "notes" : [
          " * The default setting for this is true.",
          " * If this setting is set to false, you should also take a look at [hs._asm.guitk.element.progress:min](#min) and [hs._asm.guitk.element.progress:max](#max), and periodically update the status with [hs._asm.guitk.element.progress:value](#value) or [hs._asm.guitk.element.progress:increment](#increment)"
        ],
        "signature" : "hs._asm.guitk.element.progress:indeterminate([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "indeterminate",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the indicator is indeterminate.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the progress indicator’s frame has a three-dimensional bezel.",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator’s frame has a three-dimensional bezel.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:bezeled([flag]) -> progressObject | boolean",
        "doc" : "Get or set whether or not the progress indicator’s frame has a three-dimensional bezel.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the indicator's frame is bezeled.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.\n * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had a greater effect in previous versions).",
        "notes" : [
          " * The default setting for this is true.",
          " * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had a greater effect in previous versions)."
        ],
        "signature" : "hs._asm.guitk.element.progress:bezeled([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "bezeled",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the indicator's frame is bezeled.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the progress indicator is visible when animation has been stopped.",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator is visible when animation has been stopped.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:visibleWhenStopped([flag]) -> progressObject | boolean",
        "doc" : "Get or set whether or not the progress indicator is visible when animation has been stopped.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the progress indicator is visible when animation has stopped.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is true.",
        "notes" : [
          " * The default setting for this is true."
        ],
        "signature" : "hs._asm.guitk.element.progress:visibleWhenStopped([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "visibleWhenStopped",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the progress indicator is visible when animation has stopped.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether or not the progress indicator is circular or a in the form of a progress bar.",
        "stripped_doc" : [
          "Get or set whether or not the progress indicator is circular or a in the form of a progress bar.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:circular([flag]) -> progressObject | boolean",
        "doc" : "Get or set whether or not the progress indicator is circular or a in the form of a progress bar.\n\nParameters:\n * `flag` - an optional boolean indicating whether or not the indicator is circular (true) or a progress bar (false)\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is false.\n * An indeterminate circular indicator is displayed as the spinning star seen during system startup.\n * A determinate circular indicator is displayed as a pie chart which fills up as its value increases.\n * An indeterminate progress indicator is displayed as a rounded rectangle with a moving pulse.\n * A determinate progress indicator is displayed as a rounded rectangle that fills up as its value increases.",
        "notes" : [
          " * The default setting for this is false.",
          " * An indeterminate circular indicator is displayed as the spinning star seen during system startup.",
          " * A determinate circular indicator is displayed as a pie chart which fills up as its value increases.",
          " * An indeterminate progress indicator is displayed as a rounded rectangle with a moving pulse.",
          " * A determinate progress indicator is displayed as a rounded rectangle that fills up as its value increases."
        ],
        "signature" : "hs._asm.guitk.element.progress:circular([flag]) -> progressObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "circular",
        "parameters" : [
          " * `flag` - an optional boolean indicating whether or not the indicator is circular (true) or a progress bar (false)",
          ""
        ]
      },
      {
        "desc" : "Get or set the current value of the progress indicator's completion status.",
        "stripped_doc" : [
          "Get or set the current value of the progress indicator's completion status.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:value([value]) -> progressObject | number",
        "doc" : "Get or set the current value of the progress indicator's completion status.\n\nParameters:\n * `value` - an optional number indicating the current extent of the progress.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default value for this is 0.0\n * This value has no effect on the display of an indeterminate progress indicator.\n * For a determinate indicator, this will affect how \"filled\" the bar or circle is.  If the value is lower than [hs._asm.guitk.element.progress:min](#min), then it will be set to the current minimum value.  If the value is greater than [hs._asm.guitk.element.progress:max](#max), then it will be set to the current maximum value.",
        "notes" : [
          " * The default value for this is 0.0",
          " * This value has no effect on the display of an indeterminate progress indicator.",
          " * For a determinate indicator, this will affect how \"filled\" the bar or circle is.  If the value is lower than [hs._asm.guitk.element.progress:min](#min), then it will be set to the current minimum value.  If the value is greater than [hs._asm.guitk.element.progress:max](#max), then it will be set to the current maximum value."
        ],
        "signature" : "hs._asm.guitk.element.progress:value([value]) -> progressObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "value",
        "parameters" : [
          " * `value` - an optional number indicating the current extent of the progress.",
          ""
        ]
      },
      {
        "desc" : "Get or set the minimum value (the value at which the progress indicator should display as empty) for the progress indicator.",
        "stripped_doc" : [
          "Get or set the minimum value (the value at which the progress indicator should display as empty) for the progress indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:min([value]) -> progressObject | number",
        "doc" : "Get or set the minimum value (the value at which the progress indicator should display as empty) for the progress indicator.\n\nParameters:\n * `value` - an optional number indicating the minimum value.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default value for this is 0.0\n * This value has no effect on the display of an indeterminate progress indicator.\n * For a determinate indicator, the behavior is undefined if this value is greater than [hs._asm.guitk.element.progress:max](#max).",
        "notes" : [
          " * The default value for this is 0.0",
          " * This value has no effect on the display of an indeterminate progress indicator.",
          " * For a determinate indicator, the behavior is undefined if this value is greater than [hs._asm.guitk.element.progress:max](#max)."
        ],
        "signature" : "hs._asm.guitk.element.progress:min([value]) -> progressObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "min",
        "parameters" : [
          " * `value` - an optional number indicating the minimum value.",
          ""
        ]
      },
      {
        "desc" : "Get or set the maximum value (the value at which the progress indicator should display as full) for the progress indicator.",
        "stripped_doc" : [
          "Get or set the maximum value (the value at which the progress indicator should display as full) for the progress indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:max([value]) -> progressObject | number",
        "doc" : "Get or set the maximum value (the value at which the progress indicator should display as full) for the progress indicator.\n\nParameters:\n * `value` - an optional number indicating the maximum value.\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default value for this is 100.0\n * This value has no effect on the display of an indeterminate progress indicator.\n * For a determinate indicator, the behavior is undefined if this value is less than [hs._asm.guitk.element.progress:min](#min).",
        "notes" : [
          " * The default value for this is 100.0",
          " * This value has no effect on the display of an indeterminate progress indicator.",
          " * For a determinate indicator, the behavior is undefined if this value is less than [hs._asm.guitk.element.progress:min](#min)."
        ],
        "signature" : "hs._asm.guitk.element.progress:max([value]) -> progressObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "max",
        "parameters" : [
          " * `value` - an optional number indicating the maximum value.",
          ""
        ]
      },
      {
        "desc" : "Increment the current value of a progress indicator's progress by the amount specified.",
        "stripped_doc" : [
          "Increment the current value of a progress indicator's progress by the amount specified.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:increment(value) -> progressObject",
        "doc" : "Increment the current value of a progress indicator's progress by the amount specified.\n\nParameters:\n * `value` - the value by which to increment the progress indicator's current value.\n\nReturns:\n * the progress indicator object\n\nNotes:\n * Programmatically, this is equivalent to `hs._asm.guitk.element.progress:value(hs._asm.guitk.element.progress:value() + value)`, but is faster.",
        "notes" : [
          " * Programmatically, this is equivalent to `hs._asm.guitk.element.progress:value(hs._asm.guitk.element.progress:value() + value)`, but is faster."
        ],
        "signature" : "hs._asm.guitk.element.progress:increment(value) -> progressObject",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "name" : "increment",
        "parameters" : [
          " * `value` - the value by which to increment the progress indicator's current value.",
          ""
        ]
      },
      {
        "desc" : "Get or set the indicator's tint.",
        "stripped_doc" : [
          "Get or set the indicator's tint.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:tint([tint]) -> progressObject | string",
        "doc" : "Get or set the indicator's tint.\n\nParameters:\n * `tint` - an optional string specifying the tint of the progress indicator.  May be one of \"default\", \"blue\", \"graphite\", or \"clear\".\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is \"default\".\n * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had an effect in previous versions).",
        "notes" : [
          " * The default setting for this is \"default\".",
          " * In my testing, this setting does not seem to have much, if any, effect on the visual aspect of the indicator and is provided in this module in case this changes in a future OS X update (there are some indications that it may have had an effect in previous versions)."
        ],
        "signature" : "hs._asm.guitk.element.progress:tint([tint]) -> progressObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "tint",
        "parameters" : [
          " * `tint` - an optional string specifying the tint of the progress indicator.  May be one of \"default\", \"blue\", \"graphite\", or \"clear\".",
          ""
        ]
      },
      {
        "desc" : "Get or set the indicator's size.",
        "stripped_doc" : [
          "Get or set the indicator's size.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:indicatorSize([size]) -> progressObject | string",
        "doc" : "Get or set the indicator's size.\n\nParameters:\n * `size` - an optional string specifying the size of the progress indicator object.  May be one of \"regular\", \"small\", or \"mini\".\n\nReturns:\n * if a value is provided, returns the progress indicator object ; otherwise returns the current value.\n\nNotes:\n * The default setting for this is \"regular\".\n * For circular indicators, the sizes seem to be 32x32, 16x16, and 10x10 in 10.11.\n * For bar indicators, the height seems to be 20 and 12; the mini size seems to be ignored, at least in 10.11.",
        "notes" : [
          " * The default setting for this is \"regular\".",
          " * For circular indicators, the sizes seem to be 32x32, 16x16, and 10x10 in 10.11.",
          " * For bar indicators, the height seems to be 20 and 12; the mini size seems to be ignored, at least in 10.11."
        ],
        "signature" : "hs._asm.guitk.element.progress:indicatorSize([size]) -> progressObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the progress indicator object ; otherwise returns the current value.",
          ""
        ],
        "name" : "indicatorSize",
        "parameters" : [
          " * `size` - an optional string specifying the size of the progress indicator object.  May be one of \"regular\", \"small\", or \"mini\".",
          ""
        ]
      },
      {
        "desc" : "Get or set the fill color for a progress indicator.",
        "stripped_doc" : [
          "Get or set the fill color for a progress indicator.",
          ""
        ],
        "def" : "hs._asm.guitk.element.progress:color(color) -> progressObject | table | nil",
        "doc" : "Get or set the fill color for a progress indicator.\n\nParameters:\n * `color` - an optional table specifying a color as defined in `hs.drawing.color` indicating the color to use for the progress indicator, or an explicit nil to reset the behavior to macOS default.\n\nReturns:\n * the progress indicator object\n\nNotes:\n * This method is not based upon the methods inherent in the NSProgressIndicator Objective-C class, but rather on code found at http:\/\/stackoverflow.com\/a\/32396595 utilizing a CIFilter object to adjust the view's output.\n * When a color is applied to a bar indicator, the visible pulsing of the bar is no longer visible; this is a side effect of applying the filter to the view and no workaround is currently known.",
        "notes" : [
          " * This method is not based upon the methods inherent in the NSProgressIndicator Objective-C class, but rather on code found at http:\/\/stackoverflow.com\/a\/32396595 utilizing a CIFilter object to adjust the view's output.",
          " * When a color is applied to a bar indicator, the visible pulsing of the bar is no longer visible; this is a side effect of applying the filter to the view and no workaround is currently known."
        ],
        "signature" : "hs._asm.guitk.element.progress:color(color) -> progressObject | table | nil",
        "type" : "Method",
        "returns" : [
          " * the progress indicator object",
          ""
        ],
        "name" : "color",
        "parameters" : [
          " * `color` - an optional table specifying a color as defined in `hs.drawing.color` indicating the color to use for the progress indicator, or an explicit nil to reset the behavior to macOS default.",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "name" : "hs._asm.guitk.element.progress"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Provides a slider element for use with `hs._asm.guitk`. Sliders are horizontal or vertical bars representing a range of numeric values which can be selected by adjusting the position of the knob on the slider.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [
      {
        "desc" : "Creates a new slider element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new slider element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider.new([frame]) -> sliderObject",
        "doc" : "Creates a new slider element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the element.\n\nReturns:\n * the sliderObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window."
        ],
        "signature" : "hs._asm.guitk.element.slider.new([frame]) -> sliderObject",
        "type" : "Constructor",
        "returns" : [
          " * the sliderObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the element.",
          ""
        ]
      }
    ],
    "doc" : "Provides a slider element for use with `hs._asm.guitk`. Sliders are horizontal or vertical bars representing a range of numeric values which can be selected by adjusting the position of the knob on the slider.\n\n* This submodule inherits methods from `hs._asm.guitk.element._control` and you should consult its documentation for additional methods which may be used.\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "items" : [
      {
        "desc" : "Creates a new slider element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new slider element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider.new([frame]) -> sliderObject",
        "doc" : "Creates a new slider element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the element.\n\nReturns:\n * the sliderObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window."
        ],
        "signature" : "hs._asm.guitk.element.slider.new([frame]) -> sliderObject",
        "type" : "Constructor",
        "returns" : [
          " * the sliderObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the element.",
          ""
        ]
      },
      {
        "desc" : "Get or set the amount the slider will move if the user holds down the alt (option) key while clicking on it.",
        "stripped_doc" : [
          "Get or set the amount the slider will move if the user holds down the alt (option) key while clicking on it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:altClickIncrement([value]) -> sliderObject | number",
        "doc" : "Get or set the amount the slider will move if the user holds down the alt (option) key while clicking on it.\n\nParameters:\n * `value` - an optional number greater than or equal to 0 specifying the amount the slider will move when the user holds down the alt (option) key while clicking on it.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * If this value is 0, holding down the alt (option) key while clicking on the slider has the same effect that not holding down the modifier does: the slider jumps to the position where the click occurs.",
        "notes" : [
          " * If this value is 0, holding down the alt (option) key while clicking on the slider has the same effect that not holding down the modifier does: the slider jumps to the position where the click occurs."
        ],
        "signature" : "hs._asm.guitk.element.slider:altClickIncrement([value]) -> sliderObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "altClickIncrement",
        "parameters" : [
          " * `value` - an optional number greater than or equal to 0 specifying the amount the slider will move when the user holds down the alt (option) key while clicking on it.",
          ""
        ]
      },
      {
        "desc" : "Get or set the callback function which will be invoked whenever the user clicks on the slider element.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked whenever the user clicks on the slider element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:callback([fn | nil]) -> sliderObject | fn | nil",
        "doc" : "Get or set the callback function which will be invoked whenever the user clicks on the slider element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user clicks on the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * The slider callback will receive two arguments and should return none. The arguments will be the sliderObject userdata and the value represented by the sliders new position -- see [hs._asm.guitk.element.slider:value](#value)",
        "notes" : [
          " * The slider callback will receive two arguments and should return none. The arguments will be the sliderObject userdata and the value represented by the sliders new position -- see [hs._asm.guitk.element.slider:value](#value)"
        ],
        "signature" : "hs._asm.guitk.element.slider:callback([fn | nil]) -> sliderObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user clicks on the slider.",
          ""
        ]
      },
      {
        "desc" : "Get the index of the tick mark closest to the specified value.",
        "stripped_doc" : [
          "Get the index of the tick mark closest to the specified value.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:closestTickMark(value) -> integer",
        "doc" : "Get the index of the tick mark closest to the specified value.\n\nParameters:\n * `value` - the number to find the closest tick mark to.\n\nReturns:\n * the index of the the tick mark closest to the value provided to this method.\n\nNotes:\n * Returns 0 if the slider has no tick marks\n * See also [hs._asm.guitk.element.slider:closestTickMarkValue](#closestTickMarkValue)",
        "notes" : [
          " * Returns 0 if the slider has no tick marks",
          " * See also [hs._asm.guitk.element.slider:closestTickMarkValue](#closestTickMarkValue)"
        ],
        "signature" : "hs._asm.guitk.element.slider:closestTickMark(value) -> integer",
        "type" : "Method",
        "returns" : [
          " * the index of the the tick mark closest to the value provided to this method.",
          ""
        ],
        "name" : "closestTickMark",
        "parameters" : [
          " * `value` - the number to find the closest tick mark to.",
          ""
        ]
      },
      {
        "desc" : "Get the value of the tick mark closest to the specified value.",
        "stripped_doc" : [
          "Get the value of the tick mark closest to the specified value.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:closestTickMarkValue(value) -> number",
        "doc" : "Get the value of the tick mark closest to the specified value.\n\nParameters:\n * `value` - the number to find the closest tick mark to.\n\nReturns:\n * the number represented by the tick mark closest to the value provided to this method.\n\nNotes:\n * Returns `value` if the slider has no tick marks\n * See also [hs._asm.guitk.element.slider:closestTickMark](#closestTickMark)",
        "notes" : [
          " * Returns `value` if the slider has no tick marks",
          " * See also [hs._asm.guitk.element.slider:closestTickMark](#closestTickMark)"
        ],
        "signature" : "hs._asm.guitk.element.slider:closestTickMarkValue(value) -> number",
        "type" : "Method",
        "returns" : [
          " * the number represented by the tick mark closest to the value provided to this method.",
          ""
        ],
        "name" : "closestTickMarkValue",
        "parameters" : [
          " * `value` - the number to find the closest tick mark to.",
          ""
        ]
      },
      {
        "desc" : "Get the index of the tick mark closest to the specified point",
        "stripped_doc" : [
          "Get the index of the tick mark closest to the specified point",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:indexOfTickMarkAt(point) -> integer | nil",
        "doc" : "Get the index of the tick mark closest to the specified point\n\nParameters:\n * `point` - a point table containing `x` and `y` coordinates of a point within the slider element's frame\n\nReturns:\n * If the specified point is within the frame of a tick mark, returns the index of the matching tick mark; otherwise returns nil.\n\nNotes:\n * It is currently not possible to invoke mouse tracking on just a single element; instead you must enable it for the manager the slider belongs to and calculate the point to compare by adjusting it to be relative to the slider elements top left point, e.g.\n~~~lua\n   g = require(\"hs._asm.guitk\")\n   w = g.new{ x = 100, y = 100, h = 100, w = 300 }:contentManager(g.manager.new()):show()\n   m = w:contentManager():mouseCallback(function(mgr, message, point)\n                             local geomPoint   = hs.geometry.new(point)\n                             local slider      = mgr(1)\n                             local sliderFrame = slider:frameDetails()._effective\n                             if message == \"move\" and geomPoint:inside(sliderFrame) then\n                                 local index = slider:indexOfTickMarkAt{\n                                     x = point.x - sliderFrame.x,\n                                     y = point.y - sliderFrame.y\n                                 }\n                                 if index then print(\"hovering over\", index) end\n                             end\n                         end):trackMouseMove(true)\n   m[1] = {\n       _element = g.element.slider.new():tickMarks(10),\n       frameDetails = { h = 100, w = 300 }\n   }\n~~~\n * A more efficient solution is being considered that would allow limiting tracking to only those elements one is interested in but there is no specific eta at this point.",
        "notes" : [
          " * It is currently not possible to invoke mouse tracking on just a single element; instead you must enable it for the manager the slider belongs to and calculate the point to compare by adjusting it to be relative to the slider elements top left point, e.g.",
          "~~~lua",
          "   g = require(\"hs._asm.guitk\")",
          "   w = g.new{ x = 100, y = 100, h = 100, w = 300 }:contentManager(g.manager.new()):show()",
          "   m = w:contentManager():mouseCallback(function(mgr, message, point)",
          "                             local geomPoint   = hs.geometry.new(point)",
          "                             local slider      = mgr(1)",
          "                             local sliderFrame = slider:frameDetails()._effective",
          "                             if message == \"move\" and geomPoint:inside(sliderFrame) then",
          "                                 local index = slider:indexOfTickMarkAt{",
          "                                     x = point.x - sliderFrame.x,",
          "                                     y = point.y - sliderFrame.y",
          "                                 }",
          "                                 if index then print(\"hovering over\", index) end",
          "                             end",
          "                         end):trackMouseMove(true)",
          "   m[1] = {",
          "       _element = g.element.slider.new():tickMarks(10),",
          "       frameDetails = { h = 100, w = 300 }",
          "   }",
          "~~~",
          " * A more efficient solution is being considered that would allow limiting tracking to only those elements one is interested in but there is no specific eta at this point."
        ],
        "signature" : "hs._asm.guitk.element.slider:indexOfTickMarkAt(point) -> integer | nil",
        "type" : "Method",
        "returns" : [
          " * If the specified point is within the frame of a tick mark, returns the index of the matching tick mark; otherwise returns nil.",
          ""
        ],
        "name" : "indexOfTickMarkAt",
        "parameters" : [
          " * `point` - a point table containing `x` and `y` coordinates of a point within the slider element's frame",
          ""
        ]
      },
      {
        "desc" : "Get the thickness of the knob on the slider.",
        "stripped_doc" : [
          "Get the thickness of the knob on the slider.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:knobThickness() -> number",
        "doc" : "Get the thickness of the knob on the slider.\n\nParameters:\n * None\n\nReturns:\n * a number specifying the thickness of the slider's knob in pixels.\n\nNotes:\n * The thickness is defined to be the extent of the knob along the long dimension of the bar. In a vertical slider, a knob’s thickness is its height; in a horizontal slider, a knob’s thickness is its width.",
        "notes" : [
          " * The thickness is defined to be the extent of the knob along the long dimension of the bar. In a vertical slider, a knob’s thickness is its height; in a horizontal slider, a knob’s thickness is its width."
        ],
        "signature" : "hs._asm.guitk.element.slider:knobThickness() -> number",
        "type" : "Method",
        "returns" : [
          " * a number specifying the thickness of the slider's knob in pixels.",
          ""
        ],
        "name" : "knobThickness",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set the maximum value the slider can represent.",
        "stripped_doc" : [
          "Get or set the maximum value the slider can represent.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:max([value]) -> sliderObject | number",
        "doc" : "Get or set the maximum value the slider can represent.\n\nParameters:\n * `value` - an optional number (default 1.0) specifying the maximum value for the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * If this value is less than [hs._asm.guitk.element.slider:min](#min), the behavior of the slider is undefined.",
        "notes" : [
          " * If this value is less than [hs._asm.guitk.element.slider:min](#min), the behavior of the slider is undefined."
        ],
        "signature" : "hs._asm.guitk.element.slider:max([value]) -> sliderObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "max",
        "parameters" : [
          " * `value` - an optional number (default 1.0) specifying the maximum value for the slider.",
          ""
        ]
      },
      {
        "desc" : "Get or set the minimum value the slider can represent.",
        "stripped_doc" : [
          "Get or set the minimum value the slider can represent.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:min([value]) -> sliderObject | number",
        "doc" : "Get or set the minimum value the slider can represent.\n\nParameters:\n * `value` - an optional number (default 0.0) specifying the minimum value for the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * If this value is greater than [hs._asm.guitk.element.slider:max](#max), the behavior of the slider is undefined.",
        "notes" : [
          " * If this value is greater than [hs._asm.guitk.element.slider:max](#max), the behavior of the slider is undefined."
        ],
        "signature" : "hs._asm.guitk.element.slider:min([value]) -> sliderObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "min",
        "parameters" : [
          " * `value` - an optional number (default 0.0) specifying the minimum value for the slider.",
          ""
        ]
      },
      {
        "desc" : "Get the frame table of the tick mark at the specified index",
        "stripped_doc" : [
          "Get the frame table of the tick mark at the specified index",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:rectOfTickMark(index) -> table",
        "doc" : "Get the frame table of the tick mark at the specified index\n\nParameters:\n * `index` - an integer specifying the index of the tick mark to get the frame of\n\nReturns:\n * a frame table specifying the tick mark's location within the element's frame. The frame coordinates will be relative to the top left corner of the slider's frame in it's parent.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.slider:rectOfTickMark(index) -> table",
        "type" : "Method",
        "returns" : [
          " * a frame table specifying the tick mark's location within the element's frame. The frame coordinates will be relative to the top left corner of the slider's frame in it's parent."
        ],
        "name" : "rectOfTickMark",
        "parameters" : [
          " * `index` - an integer specifying the index of the tick mark to get the frame of",
          ""
        ]
      },
      {
        "desc" : "Get or set where tick marks are displayed for the slider.",
        "stripped_doc" : [
          "Get or set where tick marks are displayed for the slider.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:tickMarkLocation([location]) -> sliderObject | string",
        "doc" : "Get or set where tick marks are displayed for the slider.\n\nParameters:\n * `location` - an optional string, default \"trailing\", specifying whether the tick marks are displayed to the left\/below (\"trailing\") the slider or to the right\/above (\"leading\") the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * This method has no effect on a circular slider -- see [hs._asm.guitk.element.slider:type](#type).\n * If [hs._asm.guitk.element.slider:tickMarks](#tickMarks) is 0, this method has no effect.",
        "notes" : [
          " * This method has no effect on a circular slider -- see [hs._asm.guitk.element.slider:type](#type).",
          " * If [hs._asm.guitk.element.slider:tickMarks](#tickMarks) is 0, this method has no effect."
        ],
        "signature" : "hs._asm.guitk.element.slider:tickMarkLocation([location]) -> sliderObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "tickMarkLocation",
        "parameters" : [
          " * `location` - an optional string, default \"trailing\", specifying whether the tick marks are displayed to the left\/below (\"trailing\") the slider or to the right\/above (\"leading\") the slider.",
          ""
        ]
      },
      {
        "desc" : "Get the value represented by the specified tick mark.",
        "stripped_doc" : [
          "Get the value represented by the specified tick mark.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:tickMarkValue(mark) -> number",
        "doc" : "Get the value represented by the specified tick mark.\n\nParameters:\n * `mark` - an integer, between 1 and [hs._asm.guitk.element.slider:tickMarks](#tickMarks), specifying the tick mark to get the slider value of.\n\nReturns:\n * the number represented by the specified tick mark.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.slider:tickMarkValue(mark) -> number",
        "type" : "Method",
        "returns" : [
          " * the number represented by the specified tick mark."
        ],
        "name" : "tickMarkValue",
        "parameters" : [
          " * `mark` - an integer, between 1 and [hs._asm.guitk.element.slider:tickMarks](#tickMarks), specifying the tick mark to get the slider value of.",
          ""
        ]
      },
      {
        "desc" : "Get or set the number of tick marks for the slider.",
        "stripped_doc" : [
          "Get or set the number of tick marks for the slider.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:tickMarks([marks]) -> sliderObject | integer",
        "doc" : "Get or set the number of tick marks for the slider.\n\nParameters:\n * `marks` - an optional integer (default 0) specifying the number of tick marks for the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * If the slider is linear, the tick marks will be arranged at equal intervals along the slider. If the slider is circular, a single tick mark will be displayed at the top of the slider for any number passed in that is greater than 0 -- see [hs._asm.guitk.element.slider:type](#type).\n * A circular slider with [hs._asm.guitk.element.slider:tickMarksOnly](#tickMarksOnly) set to true will still be limited to the number of discrete intervals specified by the value set by this method, even though the specific tick marks are not visible.",
        "notes" : [
          " * If the slider is linear, the tick marks will be arranged at equal intervals along the slider. If the slider is circular, a single tick mark will be displayed at the top of the slider for any number passed in that is greater than 0 -- see [hs._asm.guitk.element.slider:type](#type).",
          " * A circular slider with [hs._asm.guitk.element.slider:tickMarksOnly](#tickMarksOnly) set to true will still be limited to the number of discrete intervals specified by the value set by this method, even though the specific tick marks are not visible."
        ],
        "signature" : "hs._asm.guitk.element.slider:tickMarks([marks]) -> sliderObject | integer",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "tickMarks",
        "parameters" : [
          " * `marks` - an optional integer (default 0) specifying the number of tick marks for the slider.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the slider limits values to those specified by tick marks or allows selecting a value between tick marks.",
        "stripped_doc" : [
          "Get or set whether the slider limits values to those specified by tick marks or allows selecting a value between tick marks.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:tickMarksOnly([state]) -> sliderObject | boolean",
        "doc" : "Get or set whether the slider limits values to those specified by tick marks or allows selecting a value between tick marks.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the slider is limited to discrete values indicated by the tick marks (true) or allows values in between as well (false).\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * has no effect if [hs._asm.guitk.element.slider:tickMarks](#tickMarks) is 0",
        "notes" : [
          " * has no effect if [hs._asm.guitk.element.slider:tickMarks](#tickMarks) is 0"
        ],
        "signature" : "hs._asm.guitk.element.slider:tickMarksOnly([state]) -> sliderObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "tickMarksOnly",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the slider is limited to discrete values indicated by the tick marks (true) or allows values in between as well (false).",
          ""
        ]
      },
      {
        "desc" : "Get or set the color of the slider track in appearances that support it.",
        "stripped_doc" : [
          "Get or set the color of the slider track in appearances that support it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:trackFillColor([color]) -> sliderObject | table",
        "doc" : "Get or set the color of the slider track in appearances that support it.\n\nParameters:\n * `color` - a color table as defined in `hs.drawing.color`, or explicit nil to reset to the default, specifying the color of the track for the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * This method is only available in macOS 10.12.1 and newer.\n * This method currently appears to have no effect on the visual appearance on the slider; as it was added to the macOS API in 10.12.1, it is suspected that this may be supported in the future and is included here for when that happens.",
        "notes" : [
          " * This method is only available in macOS 10.12.1 and newer.",
          " * This method currently appears to have no effect on the visual appearance on the slider; as it was added to the macOS API in 10.12.1, it is suspected that this may be supported in the future and is included here for when that happens."
        ],
        "signature" : "hs._asm.guitk.element.slider:trackFillColor([color]) -> sliderObject | table",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "trackFillColor",
        "parameters" : [
          " * `color` - a color table as defined in `hs.drawing.color`, or explicit nil to reset to the default, specifying the color of the track for the slider.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the slider is linear or circular.",
        "stripped_doc" : [
          "Get or set whether the slider is linear or circular.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:type([type]) -> sliderObject | string",
        "doc" : "Get or set whether the slider is linear or circular.\n\nParameters:\n * `type` - an optional string, default \"linear\", specifying whether the slider is circular (\"circular\") or linear (\"linear\")\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * The length of a linear slider will expand to fill the dimension appropriate based on the value of [hs._asm.guitk.element.slider:vertical](#vertical); a circular slider will be anchored to the lower right corner of the element's frame.",
        "notes" : [
          " * The length of a linear slider will expand to fill the dimension appropriate based on the value of [hs._asm.guitk.element.slider:vertical](#vertical); a circular slider will be anchored to the lower right corner of the element's frame."
        ],
        "signature" : "hs._asm.guitk.element.slider:type([type]) -> sliderObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "type",
        "parameters" : [
          " * `type` - an optional string, default \"linear\", specifying whether the slider is circular (\"circular\") or linear (\"linear\")",
          ""
        ]
      },
      {
        "desc" : "Get or set the current value of the slider, adjusting the knob position if necessary.",
        "stripped_doc" : [
          "Get or set the current value of the slider, adjusting the knob position if necessary.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:value([value]) -> sliderObject | number",
        "doc" : "Get or set the current value of the slider, adjusting the knob position if necessary.\n\nParameters:\n * `value` - an optional number specifying the value for the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * If the value is less than [hs._asm.guitk.element.slider:min](#min), then it will be set to the minimum instead.\n * If the value is greater than [hs._asm.guitk.element.slider:max](#max), then it will be set to the maximum instead.",
        "notes" : [
          " * If the value is less than [hs._asm.guitk.element.slider:min](#min), then it will be set to the minimum instead.",
          " * If the value is greater than [hs._asm.guitk.element.slider:max](#max), then it will be set to the maximum instead."
        ],
        "signature" : "hs._asm.guitk.element.slider:value([value]) -> sliderObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "value",
        "parameters" : [
          " * `value` - an optional number specifying the value for the slider.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether a linear slider is vertical or horizontal.",
        "stripped_doc" : [
          "Get or set whether a linear slider is vertical or horizontal.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:vertical([state]) -> sliderObject | boolean",
        "doc" : "Get or set whether a linear slider is vertical or horizontal.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not a linear slider is vertical (true) or horizontal (false).\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * This method has no effect on a circular slider -- see [hs._asm.guitk.element.slider:type](#type).",
        "notes" : [
          " * This method has no effect on a circular slider -- see [hs._asm.guitk.element.slider:type](#type)."
        ],
        "signature" : "hs._asm.guitk.element.slider:vertical([state]) -> sliderObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "vertical",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not a linear slider is vertical (true) or horizontal (false).",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Get or set the callback function which will be invoked whenever the user clicks on the slider element.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked whenever the user clicks on the slider element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:callback([fn | nil]) -> sliderObject | fn | nil",
        "doc" : "Get or set the callback function which will be invoked whenever the user clicks on the slider element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user clicks on the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * The slider callback will receive two arguments and should return none. The arguments will be the sliderObject userdata and the value represented by the sliders new position -- see [hs._asm.guitk.element.slider:value](#value)",
        "notes" : [
          " * The slider callback will receive two arguments and should return none. The arguments will be the sliderObject userdata and the value represented by the sliders new position -- see [hs._asm.guitk.element.slider:value](#value)"
        ],
        "signature" : "hs._asm.guitk.element.slider:callback([fn | nil]) -> sliderObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user clicks on the slider.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the slider limits values to those specified by tick marks or allows selecting a value between tick marks.",
        "stripped_doc" : [
          "Get or set whether the slider limits values to those specified by tick marks or allows selecting a value between tick marks.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:tickMarksOnly([state]) -> sliderObject | boolean",
        "doc" : "Get or set whether the slider limits values to those specified by tick marks or allows selecting a value between tick marks.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the slider is limited to discrete values indicated by the tick marks (true) or allows values in between as well (false).\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * has no effect if [hs._asm.guitk.element.slider:tickMarks](#tickMarks) is 0",
        "notes" : [
          " * has no effect if [hs._asm.guitk.element.slider:tickMarks](#tickMarks) is 0"
        ],
        "signature" : "hs._asm.guitk.element.slider:tickMarksOnly([state]) -> sliderObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "tickMarksOnly",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the slider is limited to discrete values indicated by the tick marks (true) or allows values in between as well (false).",
          ""
        ]
      },
      {
        "desc" : "Get or set the amount the slider will move if the user holds down the alt (option) key while clicking on it.",
        "stripped_doc" : [
          "Get or set the amount the slider will move if the user holds down the alt (option) key while clicking on it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:altClickIncrement([value]) -> sliderObject | number",
        "doc" : "Get or set the amount the slider will move if the user holds down the alt (option) key while clicking on it.\n\nParameters:\n * `value` - an optional number greater than or equal to 0 specifying the amount the slider will move when the user holds down the alt (option) key while clicking on it.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * If this value is 0, holding down the alt (option) key while clicking on the slider has the same effect that not holding down the modifier does: the slider jumps to the position where the click occurs.",
        "notes" : [
          " * If this value is 0, holding down the alt (option) key while clicking on the slider has the same effect that not holding down the modifier does: the slider jumps to the position where the click occurs."
        ],
        "signature" : "hs._asm.guitk.element.slider:altClickIncrement([value]) -> sliderObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "altClickIncrement",
        "parameters" : [
          " * `value` - an optional number greater than or equal to 0 specifying the amount the slider will move when the user holds down the alt (option) key while clicking on it.",
          ""
        ]
      },
      {
        "desc" : "Get or set the current value of the slider, adjusting the knob position if necessary.",
        "stripped_doc" : [
          "Get or set the current value of the slider, adjusting the knob position if necessary.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:value([value]) -> sliderObject | number",
        "doc" : "Get or set the current value of the slider, adjusting the knob position if necessary.\n\nParameters:\n * `value` - an optional number specifying the value for the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * If the value is less than [hs._asm.guitk.element.slider:min](#min), then it will be set to the minimum instead.\n * If the value is greater than [hs._asm.guitk.element.slider:max](#max), then it will be set to the maximum instead.",
        "notes" : [
          " * If the value is less than [hs._asm.guitk.element.slider:min](#min), then it will be set to the minimum instead.",
          " * If the value is greater than [hs._asm.guitk.element.slider:max](#max), then it will be set to the maximum instead."
        ],
        "signature" : "hs._asm.guitk.element.slider:value([value]) -> sliderObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "value",
        "parameters" : [
          " * `value` - an optional number specifying the value for the slider.",
          ""
        ]
      },
      {
        "desc" : "Get or set the maximum value the slider can represent.",
        "stripped_doc" : [
          "Get or set the maximum value the slider can represent.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:max([value]) -> sliderObject | number",
        "doc" : "Get or set the maximum value the slider can represent.\n\nParameters:\n * `value` - an optional number (default 1.0) specifying the maximum value for the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * If this value is less than [hs._asm.guitk.element.slider:min](#min), the behavior of the slider is undefined.",
        "notes" : [
          " * If this value is less than [hs._asm.guitk.element.slider:min](#min), the behavior of the slider is undefined."
        ],
        "signature" : "hs._asm.guitk.element.slider:max([value]) -> sliderObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "max",
        "parameters" : [
          " * `value` - an optional number (default 1.0) specifying the maximum value for the slider.",
          ""
        ]
      },
      {
        "desc" : "Get or set the minimum value the slider can represent.",
        "stripped_doc" : [
          "Get or set the minimum value the slider can represent.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:min([value]) -> sliderObject | number",
        "doc" : "Get or set the minimum value the slider can represent.\n\nParameters:\n * `value` - an optional number (default 0.0) specifying the minimum value for the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * If this value is greater than [hs._asm.guitk.element.slider:max](#max), the behavior of the slider is undefined.",
        "notes" : [
          " * If this value is greater than [hs._asm.guitk.element.slider:max](#max), the behavior of the slider is undefined."
        ],
        "signature" : "hs._asm.guitk.element.slider:min([value]) -> sliderObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "min",
        "parameters" : [
          " * `value` - an optional number (default 0.0) specifying the minimum value for the slider.",
          ""
        ]
      },
      {
        "desc" : "Get or set the number of tick marks for the slider.",
        "stripped_doc" : [
          "Get or set the number of tick marks for the slider.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:tickMarks([marks]) -> sliderObject | integer",
        "doc" : "Get or set the number of tick marks for the slider.\n\nParameters:\n * `marks` - an optional integer (default 0) specifying the number of tick marks for the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * If the slider is linear, the tick marks will be arranged at equal intervals along the slider. If the slider is circular, a single tick mark will be displayed at the top of the slider for any number passed in that is greater than 0 -- see [hs._asm.guitk.element.slider:type](#type).\n * A circular slider with [hs._asm.guitk.element.slider:tickMarksOnly](#tickMarksOnly) set to true will still be limited to the number of discrete intervals specified by the value set by this method, even though the specific tick marks are not visible.",
        "notes" : [
          " * If the slider is linear, the tick marks will be arranged at equal intervals along the slider. If the slider is circular, a single tick mark will be displayed at the top of the slider for any number passed in that is greater than 0 -- see [hs._asm.guitk.element.slider:type](#type).",
          " * A circular slider with [hs._asm.guitk.element.slider:tickMarksOnly](#tickMarksOnly) set to true will still be limited to the number of discrete intervals specified by the value set by this method, even though the specific tick marks are not visible."
        ],
        "signature" : "hs._asm.guitk.element.slider:tickMarks([marks]) -> sliderObject | integer",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "tickMarks",
        "parameters" : [
          " * `marks` - an optional integer (default 0) specifying the number of tick marks for the slider.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the slider is linear or circular.",
        "stripped_doc" : [
          "Get or set whether the slider is linear or circular.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:type([type]) -> sliderObject | string",
        "doc" : "Get or set whether the slider is linear or circular.\n\nParameters:\n * `type` - an optional string, default \"linear\", specifying whether the slider is circular (\"circular\") or linear (\"linear\")\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * The length of a linear slider will expand to fill the dimension appropriate based on the value of [hs._asm.guitk.element.slider:vertical](#vertical); a circular slider will be anchored to the lower right corner of the element's frame.",
        "notes" : [
          " * The length of a linear slider will expand to fill the dimension appropriate based on the value of [hs._asm.guitk.element.slider:vertical](#vertical); a circular slider will be anchored to the lower right corner of the element's frame."
        ],
        "signature" : "hs._asm.guitk.element.slider:type([type]) -> sliderObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "type",
        "parameters" : [
          " * `type` - an optional string, default \"linear\", specifying whether the slider is circular (\"circular\") or linear (\"linear\")",
          ""
        ]
      },
      {
        "desc" : "Get or set where tick marks are displayed for the slider.",
        "stripped_doc" : [
          "Get or set where tick marks are displayed for the slider.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:tickMarkLocation([location]) -> sliderObject | string",
        "doc" : "Get or set where tick marks are displayed for the slider.\n\nParameters:\n * `location` - an optional string, default \"trailing\", specifying whether the tick marks are displayed to the left\/below (\"trailing\") the slider or to the right\/above (\"leading\") the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * This method has no effect on a circular slider -- see [hs._asm.guitk.element.slider:type](#type).\n * If [hs._asm.guitk.element.slider:tickMarks](#tickMarks) is 0, this method has no effect.",
        "notes" : [
          " * This method has no effect on a circular slider -- see [hs._asm.guitk.element.slider:type](#type).",
          " * If [hs._asm.guitk.element.slider:tickMarks](#tickMarks) is 0, this method has no effect."
        ],
        "signature" : "hs._asm.guitk.element.slider:tickMarkLocation([location]) -> sliderObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "tickMarkLocation",
        "parameters" : [
          " * `location` - an optional string, default \"trailing\", specifying whether the tick marks are displayed to the left\/below (\"trailing\") the slider or to the right\/above (\"leading\") the slider.",
          ""
        ]
      },
      {
        "desc" : "Get or set the color of the slider track in appearances that support it.",
        "stripped_doc" : [
          "Get or set the color of the slider track in appearances that support it.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:trackFillColor([color]) -> sliderObject | table",
        "doc" : "Get or set the color of the slider track in appearances that support it.\n\nParameters:\n * `color` - a color table as defined in `hs.drawing.color`, or explicit nil to reset to the default, specifying the color of the track for the slider.\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * This method is only available in macOS 10.12.1 and newer.\n * This method currently appears to have no effect on the visual appearance on the slider; as it was added to the macOS API in 10.12.1, it is suspected that this may be supported in the future and is included here for when that happens.",
        "notes" : [
          " * This method is only available in macOS 10.12.1 and newer.",
          " * This method currently appears to have no effect on the visual appearance on the slider; as it was added to the macOS API in 10.12.1, it is suspected that this may be supported in the future and is included here for when that happens."
        ],
        "signature" : "hs._asm.guitk.element.slider:trackFillColor([color]) -> sliderObject | table",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "trackFillColor",
        "parameters" : [
          " * `color` - a color table as defined in `hs.drawing.color`, or explicit nil to reset to the default, specifying the color of the track for the slider.",
          ""
        ]
      },
      {
        "desc" : "Get the thickness of the knob on the slider.",
        "stripped_doc" : [
          "Get the thickness of the knob on the slider.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:knobThickness() -> number",
        "doc" : "Get the thickness of the knob on the slider.\n\nParameters:\n * None\n\nReturns:\n * a number specifying the thickness of the slider's knob in pixels.\n\nNotes:\n * The thickness is defined to be the extent of the knob along the long dimension of the bar. In a vertical slider, a knob’s thickness is its height; in a horizontal slider, a knob’s thickness is its width.",
        "notes" : [
          " * The thickness is defined to be the extent of the knob along the long dimension of the bar. In a vertical slider, a knob’s thickness is its height; in a horizontal slider, a knob’s thickness is its width."
        ],
        "signature" : "hs._asm.guitk.element.slider:knobThickness() -> number",
        "type" : "Method",
        "returns" : [
          " * a number specifying the thickness of the slider's knob in pixels.",
          ""
        ],
        "name" : "knobThickness",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set whether a linear slider is vertical or horizontal.",
        "stripped_doc" : [
          "Get or set whether a linear slider is vertical or horizontal.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:vertical([state]) -> sliderObject | boolean",
        "doc" : "Get or set whether a linear slider is vertical or horizontal.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not a linear slider is vertical (true) or horizontal (false).\n\nReturns:\n * if a value is provided, returns the sliderObject ; otherwise returns the current value.\n\nNotes:\n * This method has no effect on a circular slider -- see [hs._asm.guitk.element.slider:type](#type).",
        "notes" : [
          " * This method has no effect on a circular slider -- see [hs._asm.guitk.element.slider:type](#type)."
        ],
        "signature" : "hs._asm.guitk.element.slider:vertical([state]) -> sliderObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the sliderObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "vertical",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not a linear slider is vertical (true) or horizontal (false).",
          ""
        ]
      },
      {
        "desc" : "Get the value represented by the specified tick mark.",
        "stripped_doc" : [
          "Get the value represented by the specified tick mark.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:tickMarkValue(mark) -> number",
        "doc" : "Get the value represented by the specified tick mark.\n\nParameters:\n * `mark` - an integer, between 1 and [hs._asm.guitk.element.slider:tickMarks](#tickMarks), specifying the tick mark to get the slider value of.\n\nReturns:\n * the number represented by the specified tick mark.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.slider:tickMarkValue(mark) -> number",
        "type" : "Method",
        "returns" : [
          " * the number represented by the specified tick mark."
        ],
        "name" : "tickMarkValue",
        "parameters" : [
          " * `mark` - an integer, between 1 and [hs._asm.guitk.element.slider:tickMarks](#tickMarks), specifying the tick mark to get the slider value of.",
          ""
        ]
      },
      {
        "desc" : "Get the value of the tick mark closest to the specified value.",
        "stripped_doc" : [
          "Get the value of the tick mark closest to the specified value.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:closestTickMarkValue(value) -> number",
        "doc" : "Get the value of the tick mark closest to the specified value.\n\nParameters:\n * `value` - the number to find the closest tick mark to.\n\nReturns:\n * the number represented by the tick mark closest to the value provided to this method.\n\nNotes:\n * Returns `value` if the slider has no tick marks\n * See also [hs._asm.guitk.element.slider:closestTickMark](#closestTickMark)",
        "notes" : [
          " * Returns `value` if the slider has no tick marks",
          " * See also [hs._asm.guitk.element.slider:closestTickMark](#closestTickMark)"
        ],
        "signature" : "hs._asm.guitk.element.slider:closestTickMarkValue(value) -> number",
        "type" : "Method",
        "returns" : [
          " * the number represented by the tick mark closest to the value provided to this method.",
          ""
        ],
        "name" : "closestTickMarkValue",
        "parameters" : [
          " * `value` - the number to find the closest tick mark to.",
          ""
        ]
      },
      {
        "desc" : "Get the index of the tick mark closest to the specified value.",
        "stripped_doc" : [
          "Get the index of the tick mark closest to the specified value.",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:closestTickMark(value) -> integer",
        "doc" : "Get the index of the tick mark closest to the specified value.\n\nParameters:\n * `value` - the number to find the closest tick mark to.\n\nReturns:\n * the index of the the tick mark closest to the value provided to this method.\n\nNotes:\n * Returns 0 if the slider has no tick marks\n * See also [hs._asm.guitk.element.slider:closestTickMarkValue](#closestTickMarkValue)",
        "notes" : [
          " * Returns 0 if the slider has no tick marks",
          " * See also [hs._asm.guitk.element.slider:closestTickMarkValue](#closestTickMarkValue)"
        ],
        "signature" : "hs._asm.guitk.element.slider:closestTickMark(value) -> integer",
        "type" : "Method",
        "returns" : [
          " * the index of the the tick mark closest to the value provided to this method.",
          ""
        ],
        "name" : "closestTickMark",
        "parameters" : [
          " * `value` - the number to find the closest tick mark to.",
          ""
        ]
      },
      {
        "desc" : "Get the frame table of the tick mark at the specified index",
        "stripped_doc" : [
          "Get the frame table of the tick mark at the specified index",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:rectOfTickMark(index) -> table",
        "doc" : "Get the frame table of the tick mark at the specified index\n\nParameters:\n * `index` - an integer specifying the index of the tick mark to get the frame of\n\nReturns:\n * a frame table specifying the tick mark's location within the element's frame. The frame coordinates will be relative to the top left corner of the slider's frame in it's parent.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.slider:rectOfTickMark(index) -> table",
        "type" : "Method",
        "returns" : [
          " * a frame table specifying the tick mark's location within the element's frame. The frame coordinates will be relative to the top left corner of the slider's frame in it's parent."
        ],
        "name" : "rectOfTickMark",
        "parameters" : [
          " * `index` - an integer specifying the index of the tick mark to get the frame of",
          ""
        ]
      },
      {
        "desc" : "Get the index of the tick mark closest to the specified point",
        "stripped_doc" : [
          "Get the index of the tick mark closest to the specified point",
          ""
        ],
        "def" : "hs._asm.guitk.element.slider:indexOfTickMarkAt(point) -> integer | nil",
        "doc" : "Get the index of the tick mark closest to the specified point\n\nParameters:\n * `point` - a point table containing `x` and `y` coordinates of a point within the slider element's frame\n\nReturns:\n * If the specified point is within the frame of a tick mark, returns the index of the matching tick mark; otherwise returns nil.\n\nNotes:\n * It is currently not possible to invoke mouse tracking on just a single element; instead you must enable it for the manager the slider belongs to and calculate the point to compare by adjusting it to be relative to the slider elements top left point, e.g.\n~~~lua\n   g = require(\"hs._asm.guitk\")\n   w = g.new{ x = 100, y = 100, h = 100, w = 300 }:contentManager(g.manager.new()):show()\n   m = w:contentManager():mouseCallback(function(mgr, message, point)\n                             local geomPoint   = hs.geometry.new(point)\n                             local slider      = mgr(1)\n                             local sliderFrame = slider:frameDetails()._effective\n                             if message == \"move\" and geomPoint:inside(sliderFrame) then\n                                 local index = slider:indexOfTickMarkAt{\n                                     x = point.x - sliderFrame.x,\n                                     y = point.y - sliderFrame.y\n                                 }\n                                 if index then print(\"hovering over\", index) end\n                             end\n                         end):trackMouseMove(true)\n   m[1] = {\n       _element = g.element.slider.new():tickMarks(10),\n       frameDetails = { h = 100, w = 300 }\n   }\n~~~\n * A more efficient solution is being considered that would allow limiting tracking to only those elements one is interested in but there is no specific eta at this point.",
        "notes" : [
          " * It is currently not possible to invoke mouse tracking on just a single element; instead you must enable it for the manager the slider belongs to and calculate the point to compare by adjusting it to be relative to the slider elements top left point, e.g.",
          "~~~lua",
          "   g = require(\"hs._asm.guitk\")",
          "   w = g.new{ x = 100, y = 100, h = 100, w = 300 }:contentManager(g.manager.new()):show()",
          "   m = w:contentManager():mouseCallback(function(mgr, message, point)",
          "                             local geomPoint   = hs.geometry.new(point)",
          "                             local slider      = mgr(1)",
          "                             local sliderFrame = slider:frameDetails()._effective",
          "                             if message == \"move\" and geomPoint:inside(sliderFrame) then",
          "                                 local index = slider:indexOfTickMarkAt{",
          "                                     x = point.x - sliderFrame.x,",
          "                                     y = point.y - sliderFrame.y",
          "                                 }",
          "                                 if index then print(\"hovering over\", index) end",
          "                             end",
          "                         end):trackMouseMove(true)",
          "   m[1] = {",
          "       _element = g.element.slider.new():tickMarks(10),",
          "       frameDetails = { h = 100, w = 300 }",
          "   }",
          "~~~",
          " * A more efficient solution is being considered that would allow limiting tracking to only those elements one is interested in but there is no specific eta at this point."
        ],
        "signature" : "hs._asm.guitk.element.slider:indexOfTickMarkAt(point) -> integer | nil",
        "type" : "Method",
        "returns" : [
          " * If the specified point is within the frame of a tick mark, returns the index of the matching tick mark; otherwise returns nil.",
          ""
        ],
        "name" : "indexOfTickMarkAt",
        "parameters" : [
          " * `point` - a point table containing `x` and `y` coordinates of a point within the slider element's frame",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "name" : "hs._asm.guitk.element.slider"
  },
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "Provides text label and input field elements for use with `hs._asm.guitk`.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [
      {
        "desc" : "Creates a new textfield element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new textfield element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield.new([frame]) -> textfieldObject",
        "doc" : "Creates a new textfield element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the element.\n\nReturns:\n * the textfieldObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The textfield element does not have a default width unless you assign a value to it with [hs._asm.guitk.element.textfield:value](#value); if you are assigning an empty textfield element to an `hs._asm.guitk.manager`, be sure to specify a width in the frame details or the element may not be visible.",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The textfield element does not have a default width unless you assign a value to it with [hs._asm.guitk.element.textfield:value](#value); if you are assigning an empty textfield element to an `hs._asm.guitk.manager`, be sure to specify a width in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.textfield.new([frame]) -> textfieldObject",
        "type" : "Constructor",
        "returns" : [
          " * the textfieldObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the element.",
          ""
        ]
      },
      {
        "desc" : "Creates a new textfield element usable as a label for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new textfield element usable as a label for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield.newLabel(text) -> textfieldObject",
        "doc" : "Creates a new textfield element usable as a label for `hs._asm.guitk`.\n\nParameters:\n * `text` - a string or `hs.styledtext` object specifying the text to assign to the label.\n\nReturns:\n * the textfieldObject\n\nNotes:\n * This constructor creates a non-editable, non-selectable text field, often used as a label for another element.\n   * If you specify `text` as a string, the label is non-wrapping and appears in the default system font.\n   * If you specify `text` as an `hs.styledtext` object, the line break mode and font are determined by the style attributes of the object.",
        "notes" : [
          " * This constructor creates a non-editable, non-selectable text field, often used as a label for another element.",
          "   * If you specify `text` as a string, the label is non-wrapping and appears in the default system font.",
          "   * If you specify `text` as an `hs.styledtext` object, the line break mode and font are determined by the style attributes of the object."
        ],
        "signature" : "hs._asm.guitk.element.textfield.newLabel(text) -> textfieldObject",
        "type" : "Constructor",
        "returns" : [
          " * the textfieldObject",
          ""
        ],
        "name" : "newLabel",
        "parameters" : [
          " * `text` - a string or `hs.styledtext` object specifying the text to assign to the label.",
          ""
        ]
      },
      {
        "desc" : "Creates a new editable textfield element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new editable textfield element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield.newTextField([text]) -> textfieldObject",
        "doc" : "Creates a new editable textfield element for `hs._asm.guitk`.\n\nParameters:\n * `text` - an optional string specifying the text to assign to the text field.\n\nReturns:\n * the textfieldObject\n\nNotes:\n * This constructor creates a non-wrapping, editable text field, suitable for accepting user input.",
        "notes" : [
          " * This constructor creates a non-wrapping, editable text field, suitable for accepting user input."
        ],
        "signature" : "hs._asm.guitk.element.textfield.newTextField([text]) -> textfieldObject",
        "type" : "Constructor",
        "returns" : [
          " * the textfieldObject",
          ""
        ],
        "name" : "newTextField",
        "parameters" : [
          " * `text` - an optional string specifying the text to assign to the text field.",
          ""
        ]
      },
      {
        "desc" : "Creates a new textfield element usable as a label for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new textfield element usable as a label for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield.newWrappingLabel(text) -> textfieldObject",
        "doc" : "Creates a new textfield element usable as a label for `hs._asm.guitk`.\n\nParameters:\n * `text` - a string specifying the text to assign to the label.\n\nReturns:\n * the textfieldObject\n\nNotes:\n * This constructor creates a wrapping, selectable, non-editable text field, that is suitable for use as a label or informative text. The text defaults to the system font.",
        "notes" : [
          " * This constructor creates a wrapping, selectable, non-editable text field, that is suitable for use as a label or informative text. The text defaults to the system font."
        ],
        "signature" : "hs._asm.guitk.element.textfield.newWrappingLabel(text) -> textfieldObject",
        "type" : "Constructor",
        "returns" : [
          " * the textfieldObject",
          ""
        ],
        "name" : "newWrappingLabel",
        "parameters" : [
          " * `text` - a string specifying the text to assign to the label.",
          ""
        ]
      }
    ],
    "doc" : "Provides text label and input field elements for use with `hs._asm.guitk`.\n\n* This submodule inherits methods from `hs._asm.guitk.element._control` and you should consult its documentation for additional methods which may be used.\n* This submodule inherits methods from `hs._asm.guitk.element._view` and you should consult its documentation for additional methods which may be used.",
    "items" : [
      {
        "desc" : "Creates a new textfield element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new textfield element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield.new([frame]) -> textfieldObject",
        "doc" : "Creates a new textfield element for `hs._asm.guitk`.\n\nParameters:\n * `frame` - an optional frame table specifying the position and size of the frame for the element.\n\nReturns:\n * the textfieldObject\n\nNotes:\n * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.\n\n * The textfield element does not have a default width unless you assign a value to it with [hs._asm.guitk.element.textfield:value](#value); if you are assigning an empty textfield element to an `hs._asm.guitk.manager`, be sure to specify a width in the frame details or the element may not be visible.",
        "notes" : [
          " * In most cases, setting the frame is not necessary and will be overridden when the element is assigned to a manager or to a `hs._asm.guitk` window.",
          "",
          " * The textfield element does not have a default width unless you assign a value to it with [hs._asm.guitk.element.textfield:value](#value); if you are assigning an empty textfield element to an `hs._asm.guitk.manager`, be sure to specify a width in the frame details or the element may not be visible."
        ],
        "signature" : "hs._asm.guitk.element.textfield.new([frame]) -> textfieldObject",
        "type" : "Constructor",
        "returns" : [
          " * the textfieldObject",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `frame` - an optional frame table specifying the position and size of the frame for the element.",
          ""
        ]
      },
      {
        "desc" : "Creates a new textfield element usable as a label for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new textfield element usable as a label for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield.newLabel(text) -> textfieldObject",
        "doc" : "Creates a new textfield element usable as a label for `hs._asm.guitk`.\n\nParameters:\n * `text` - a string or `hs.styledtext` object specifying the text to assign to the label.\n\nReturns:\n * the textfieldObject\n\nNotes:\n * This constructor creates a non-editable, non-selectable text field, often used as a label for another element.\n   * If you specify `text` as a string, the label is non-wrapping and appears in the default system font.\n   * If you specify `text` as an `hs.styledtext` object, the line break mode and font are determined by the style attributes of the object.",
        "notes" : [
          " * This constructor creates a non-editable, non-selectable text field, often used as a label for another element.",
          "   * If you specify `text` as a string, the label is non-wrapping and appears in the default system font.",
          "   * If you specify `text` as an `hs.styledtext` object, the line break mode and font are determined by the style attributes of the object."
        ],
        "signature" : "hs._asm.guitk.element.textfield.newLabel(text) -> textfieldObject",
        "type" : "Constructor",
        "returns" : [
          " * the textfieldObject",
          ""
        ],
        "name" : "newLabel",
        "parameters" : [
          " * `text` - a string or `hs.styledtext` object specifying the text to assign to the label.",
          ""
        ]
      },
      {
        "desc" : "Creates a new editable textfield element for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new editable textfield element for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield.newTextField([text]) -> textfieldObject",
        "doc" : "Creates a new editable textfield element for `hs._asm.guitk`.\n\nParameters:\n * `text` - an optional string specifying the text to assign to the text field.\n\nReturns:\n * the textfieldObject\n\nNotes:\n * This constructor creates a non-wrapping, editable text field, suitable for accepting user input.",
        "notes" : [
          " * This constructor creates a non-wrapping, editable text field, suitable for accepting user input."
        ],
        "signature" : "hs._asm.guitk.element.textfield.newTextField([text]) -> textfieldObject",
        "type" : "Constructor",
        "returns" : [
          " * the textfieldObject",
          ""
        ],
        "name" : "newTextField",
        "parameters" : [
          " * `text` - an optional string specifying the text to assign to the text field.",
          ""
        ]
      },
      {
        "desc" : "Creates a new textfield element usable as a label for `hs._asm.guitk`.",
        "stripped_doc" : [
          "Creates a new textfield element usable as a label for `hs._asm.guitk`.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield.newWrappingLabel(text) -> textfieldObject",
        "doc" : "Creates a new textfield element usable as a label for `hs._asm.guitk`.\n\nParameters:\n * `text` - a string specifying the text to assign to the label.\n\nReturns:\n * the textfieldObject\n\nNotes:\n * This constructor creates a wrapping, selectable, non-editable text field, that is suitable for use as a label or informative text. The text defaults to the system font.",
        "notes" : [
          " * This constructor creates a wrapping, selectable, non-editable text field, that is suitable for use as a label or informative text. The text defaults to the system font."
        ],
        "signature" : "hs._asm.guitk.element.textfield.newWrappingLabel(text) -> textfieldObject",
        "type" : "Constructor",
        "returns" : [
          " * the textfieldObject",
          ""
        ],
        "name" : "newWrappingLabel",
        "parameters" : [
          " * `text` - a string specifying the text to assign to the label.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the textfield allows the use of the touchbar character picker when the textfield is editable and is being edited.",
        "stripped_doc" : [
          "Get or set whether the textfield allows the use of the touchbar character picker when the textfield is editable and is being edited.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:allowsCharacterPicker([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the textfield allows the use of the touchbar character picker when the textfield is editable and is being edited.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether the textfield allows the use of the touchbar character picker when the textfield is editable and is being edited.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * This method is only available in macOS 10.12.1 and newer",
        "notes" : [
          " * This method is only available in macOS 10.12.1 and newer"
        ],
        "signature" : "hs._asm.guitk.element.textfield:allowsCharacterPicker([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "allowsCharacterPicker",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether the textfield allows the use of the touchbar character picker when the textfield is editable and is being edited.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether automatic text completion is enabled when the textfield is being edited.",
        "stripped_doc" : [
          "Get or set whether automatic text completion is enabled when the textfield is being edited.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:automaticTextCompletion([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether automatic text completion is enabled when the textfield is being edited.\n\nParameters:\n * `state` - an optional boolean, default true, specifying whether automatic text completion is enabled when the textfield is being edited.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * This method is only available in macOS 10.12.2 and newer",
        "notes" : [
          " * This method is only available in macOS 10.12.2 and newer"
        ],
        "signature" : "hs._asm.guitk.element.textfield:automaticTextCompletion([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "automaticTextCompletion",
        "parameters" : [
          " * `state` - an optional boolean, default true, specifying whether automatic text completion is enabled when the textfield is being edited.",
          ""
        ]
      },
      {
        "desc" : "Get or set the color for the background of the textfield element.",
        "stripped_doc" : [
          "Get or set the color for the background of the textfield element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:backgroundColor([color]) -> textfieldObject | color table",
        "doc" : "Get or set the color for the background of the textfield element.\n\nParameters:\n* `color` - an optional table containing color keys as described in `hs.drawing.color`\n\nReturns:\n * If an argument is provided, the textfieldObject; otherwise the current value.\n\nNotes:\n * The background color will only be drawn when [hs._asm.guitk.element.textfield:drawsBackground](#drawsBackground) is true.",
        "notes" : [
          " * The background color will only be drawn when [hs._asm.guitk.element.textfield:drawsBackground](#drawsBackground) is true."
        ],
        "signature" : "hs._asm.guitk.element.textfield:backgroundColor([color]) -> textfieldObject | color table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the textfieldObject; otherwise the current value.",
          ""
        ],
        "name" : "backgroundColor",
        "parameters" : [
          "* `color` - an optional table containing color keys as described in `hs.drawing.color`",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the corners of a bezeled textfield are rounded or square",
        "stripped_doc" : [
          "Get or set whether the corners of a bezeled textfield are rounded or square",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:bezelStyle([style]) -> textfieldObject | string",
        "doc" : "Get or set whether the corners of a bezeled textfield are rounded or square\n\nParameters:\n * `style` - an optional string, default \"square\", specifying whether the corners of a bezeled textfield are rounded or square. Must be one of \"square\" or \"round\".\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * only has an effect if [hs._asm.guitk.element.textfield:bezeled](#bezeled) is true.",
        "notes" : [
          " * only has an effect if [hs._asm.guitk.element.textfield:bezeled](#bezeled) is true."
        ],
        "signature" : "hs._asm.guitk.element.textfield:bezelStyle([style]) -> textfieldObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "bezelStyle",
        "parameters" : [
          " * `style` - an optional string, default \"square\", specifying whether the corners of a bezeled textfield are rounded or square. Must be one of \"square\" or \"round\".",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the textfield draws a bezeled border around its contents.",
        "stripped_doc" : [
          "Get or set whether the textfield draws a bezeled border around its contents.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:bezeled([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the textfield draws a bezeled border around its contents.\n\nParameters:\n * `state` - an optional boolean specifying whether the textfield draws a bezeled border around its contents. Defaults to `true` for editable textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField), otherwise false.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * If you set this to true, [hs._asm.guitk.element.textfield:bordered](#bordered) is set to false.",
        "notes" : [
          " * If you set this to true, [hs._asm.guitk.element.textfield:bordered](#bordered) is set to false."
        ],
        "signature" : "hs._asm.guitk.element.textfield:bezeled([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "bezeled",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the textfield draws a bezeled border around its contents. Defaults to `true` for editable textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField), otherwise false.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the textfield draws a black border around its contents.",
        "stripped_doc" : [
          "Get or set whether the textfield draws a black border around its contents.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:bordered([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the textfield draws a black border around its contents.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether the textfield draws a black border around its contents.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * If you set this to true, [hs._asm.guitk.element.textfield:bezeled](#bezeled) is set to false.",
        "notes" : [
          " * If you set this to true, [hs._asm.guitk.element.textfield:bezeled](#bezeled) is set to false."
        ],
        "signature" : "hs._asm.guitk.element.textfield:bordered([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "bordered",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether the textfield draws a black border around its contents.",
          ""
        ]
      },
      {
        "desc" : "Get or set the callback function which will be invoked whenever the user interacts with the textfield element.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked whenever the user interacts with the textfield element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:callback([fn | nil]) -> textfieldObject | fn | nil",
        "doc" : "Get or set the callback function which will be invoked whenever the user interacts with the textfield element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user interacts with the textfield\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * The callback function should expect arguments as described below and return none:\n   * When the user starts typing in the text field, the callback will receive the following arguments:\n     * the textfield userdata object\n     * the message string \"didBeginEditing\" indicating that the user has started editing the textfield element\n   * When the focus leaves the text field element, the callback will receive the following arguments (note that it is possible to receive this callback without a corresponding \"didBeginEditing\" callback if the user makes no changes to the textfield):\n     * the textfield userdata object\n     * the message string \"didEndEditing\" indicating that the textfield element is no longer active\n     * the current string value of the textfield -- see [hs._asm.guitk.element.textfield:value](#value)\n     * a string specifying why editing terminated:\n       * \"other\"    - another element has taken focus or the user has clicked outside of the text field\n       * \"return\"   - the user has hit the enter or return key. Note that this does not take focus away from the textfield by default so if the user types again, another \"didBeginEditing\" callback for the textfield will be generated.\n       * \"tab\"      - the user used the tab key to move to the next textfield element\n       * \"shiftTab\" - the user user the tab key with the shift modifier to move to the previous textfield element\n       * the specification allows for other possible reasons for ending the editing of a textfield, but so far it is not known how to enable these and they may apply to other text based elements which have not yet been implemented.  These are \"cancel\", \"left\", \"right\", \"up\", and \"down\". If you do see one of these reasons in your use of the textfield element, please submit an issue with sample code so it can be determined how to properly document this.\n   * If the `hs._asm.guitk.element._control:continuous` is set to true for the textfield element, a callback with the following arguments will occur each time the user presses a key:\n     * the textfield userdata object\n     * the string \"textDidChange\" indicating that the user has typed or deleted something in the textfield\n     * the current string value of the textfield -- see [hs._asm.guitk.element.textfield:value](#value)",
        "notes" : [
          " * The callback function should expect arguments as described below and return none:",
          "   * When the user starts typing in the text field, the callback will receive the following arguments:",
          "     * the textfield userdata object",
          "     * the message string \"didBeginEditing\" indicating that the user has started editing the textfield element",
          "   * When the focus leaves the text field element, the callback will receive the following arguments (note that it is possible to receive this callback without a corresponding \"didBeginEditing\" callback if the user makes no changes to the textfield):",
          "     * the textfield userdata object",
          "     * the message string \"didEndEditing\" indicating that the textfield element is no longer active",
          "     * the current string value of the textfield -- see [hs._asm.guitk.element.textfield:value](#value)",
          "     * a string specifying why editing terminated:",
          "       * \"other\"    - another element has taken focus or the user has clicked outside of the text field",
          "       * \"return\"   - the user has hit the enter or return key. Note that this does not take focus away from the textfield by default so if the user types again, another \"didBeginEditing\" callback for the textfield will be generated.",
          "       * \"tab\"      - the user used the tab key to move to the next textfield element",
          "       * \"shiftTab\" - the user user the tab key with the shift modifier to move to the previous textfield element",
          "       * the specification allows for other possible reasons for ending the editing of a textfield, but so far it is not known how to enable these and they may apply to other text based elements which have not yet been implemented.  These are \"cancel\", \"left\", \"right\", \"up\", and \"down\". If you do see one of these reasons in your use of the textfield element, please submit an issue with sample code so it can be determined how to properly document this.",
          "   * If the `hs._asm.guitk.element._control:continuous` is set to true for the textfield element, a callback with the following arguments will occur each time the user presses a key:",
          "     * the textfield userdata object",
          "     * the string \"textDidChange\" indicating that the user has typed or deleted something in the textfield",
          "     * the current string value of the textfield -- see [hs._asm.guitk.element.textfield:value](#value)"
        ],
        "signature" : "hs._asm.guitk.element.textfield:callback([fn | nil]) -> textfieldObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user interacts with the textfield",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the background of the textfield is shown",
        "stripped_doc" : [
          "Get or set whether the background of the textfield is shown",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:drawsBackground([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the background of the textfield is shown\n\nParameters:\n * `state` - an optional boolean specifying whether the background of the textfield is shown (true) or transparent (false). Defaults to `true` for editable textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField), otherwise false.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.textfield:drawsBackground([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value."
        ],
        "name" : "drawsBackground",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the background of the textfield is shown (true) or transparent (false). Defaults to `true` for editable textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField), otherwise false.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the textfield is editable.",
        "stripped_doc" : [
          "Get or set whether the textfield is editable.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:editable([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the textfield is editable.\n\nParameters:\n * `state` - an optional boolean specifying whether the textfield contents are editable. Defaults to `true` for editable textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField), otherwise false.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true automatically sets [hs._asm.guitk.element.textfield:selectable](#selectable) to true.",
        "notes" : [
          " * Setting this to true automatically sets [hs._asm.guitk.element.textfield:selectable](#selectable) to true."
        ],
        "signature" : "hs._asm.guitk.element.textfield:editable([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "editable",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the textfield contents are editable. Defaults to `true` for editable textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField), otherwise false.",
          ""
        ]
      },
      {
        "desc" : "Get or set the callback function which will is invoked to make editing decisions about the textfield",
        "stripped_doc" : [
          "Get or set the callback function which will is invoked to make editing decisions about the textfield",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:editingCallback([fn | nil]) -> textfieldObject | fn | nil",
        "doc" : "Get or set the callback function which will is invoked to make editing decisions about the textfield\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked to make editing decisions about the textfield\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * The callback function should expect multiple arguments and return a boolean as described below (a return value of none or nil will use the default as specified for each callback below):\n   * When the user attempts to edit the textfield, the callback will be invoked with the following arguments and the boolean return value should indicate whether editing is to be allowed:\n     * the textfield userdata object\n     * the string \"shouldBeginEditing\" indicating that the callback is asking permission to allow editing of the textfield at this time\n     * the default return value as determined by the current state of the the textfield and its location in the window\/view hierarchy (usually this will be true)\n   * When the user attempts to finish editing the textfield, the callback will be invoked with the following arguments and the boolean return value should indicate whether focus is allowed to leave the textfield:\n     * the textfield userdata object\n     * the string \"shouldEndEditing\" indicating that the callback is asking permission to complete editing of the textfield at this time\n     * the default return value as determined by the current state of the the textfield and its location in the window\/view hierarchy (usually this will be true)\n   * When the return (or enter) key or escape key are pressed, the callback will be invoked with the following arguments and the return value should indicate whether or not the keypress was handled by the callback or should be passed further up the window\/view hierarchy:\n     * the textfield userdata object\n     * the string \"keyPress\"\n     * the string \"return\" or \"escape\"\n     * the default return value of false indicating that the callback is not interested in this keypress.\n   * Note that the return value is currently ignored when the key pressed is \"escape\".\n   * Note that the specification allows for the additional keys \"left\", \"right\", \"up\", and \"down\" to trigger this callback, but at present it is not known how to enable this for a textfield element. It is surmised that they may be applicable to text based elements that are not currently supported by `hs._asm.guitk`. If you do manage to receive a callback for one of these keys, please submit an issue with sample code so we can determine how to properly document them.",
        "notes" : [
          " * The callback function should expect multiple arguments and return a boolean as described below (a return value of none or nil will use the default as specified for each callback below):",
          "   * When the user attempts to edit the textfield, the callback will be invoked with the following arguments and the boolean return value should indicate whether editing is to be allowed:",
          "     * the textfield userdata object",
          "     * the string \"shouldBeginEditing\" indicating that the callback is asking permission to allow editing of the textfield at this time",
          "     * the default return value as determined by the current state of the the textfield and its location in the window\/view hierarchy (usually this will be true)",
          "   * When the user attempts to finish editing the textfield, the callback will be invoked with the following arguments and the boolean return value should indicate whether focus is allowed to leave the textfield:",
          "     * the textfield userdata object",
          "     * the string \"shouldEndEditing\" indicating that the callback is asking permission to complete editing of the textfield at this time",
          "     * the default return value as determined by the current state of the the textfield and its location in the window\/view hierarchy (usually this will be true)",
          "   * When the return (or enter) key or escape key are pressed, the callback will be invoked with the following arguments and the return value should indicate whether or not the keypress was handled by the callback or should be passed further up the window\/view hierarchy:",
          "     * the textfield userdata object",
          "     * the string \"keyPress\"",
          "     * the string \"return\" or \"escape\"",
          "     * the default return value of false indicating that the callback is not interested in this keypress.",
          "   * Note that the return value is currently ignored when the key pressed is \"escape\".",
          "   * Note that the specification allows for the additional keys \"left\", \"right\", \"up\", and \"down\" to trigger this callback, but at present it is not known how to enable this for a textfield element. It is surmised that they may be applicable to text based elements that are not currently supported by `hs._asm.guitk`. If you do manage to receive a callback for one of these keys, please submit an issue with sample code so we can determine how to properly document them."
        ],
        "signature" : "hs._asm.guitk.element.textfield:editingCallback([fn | nil]) -> textfieldObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "editingCallback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked to make editing decisions about the textfield",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the textfield contents will be expanded into a tooltip if the contents are longer than the textfield is wide and the mouse pointer hovers over the textfield.",
        "stripped_doc" : [
          "Get or set whether the textfield contents will be expanded into a tooltip if the contents are longer than the textfield is wide and the mouse pointer hovers over the textfield.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:expandIntoTooltip([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the textfield contents will be expanded into a tooltip if the contents are longer than the textfield is wide and the mouse pointer hovers over the textfield.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether the textfield contents will be expanded into a tooltip if the contents are longer than the textfield is wide.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * If a tooltip is set with `hs._asm.guitk.element._control:tooltip` then this method has no effect.",
        "notes" : [
          " * If a tooltip is set with `hs._asm.guitk.element._control:tooltip` then this method has no effect."
        ],
        "signature" : "hs._asm.guitk.element.textfield:expandIntoTooltip([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "expandIntoTooltip",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether the textfield contents will be expanded into a tooltip if the contents are longer than the textfield is wide.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether an editable textfield whose style is editable allows image files to be dragged into it",
        "stripped_doc" : [
          "Get or set whether an editable textfield whose style is editable allows image files to be dragged into it",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:importsGraphics([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether an editable textfield whose style is editable allows image files to be dragged into it\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether the textfield allows image files to be dragged into it\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * [hs._asm.guitk.element.textfield:styleEditable](#styleEditable) must also be true for this method to have any effect.",
        "notes" : [
          " * [hs._asm.guitk.element.textfield:styleEditable](#styleEditable) must also be true for this method to have any effect."
        ],
        "signature" : "hs._asm.guitk.element.textfield:importsGraphics([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "importsGraphics",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether the textfield allows image files to be dragged into it",
          ""
        ]
      },
      {
        "desc" : "Get or set the maximum number of lines that can be displayed in the textfield.",
        "stripped_doc" : [
          "Get or set the maximum number of lines that can be displayed in the textfield.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:maximumNumberOfLines([lines]) -> textfieldObject | integer",
        "doc" : "Get or set the maximum number of lines that can be displayed in the textfield.\n\nParameters:\n * `lines` - an optional integer, default 0, specifying the maximum number of lines that can be displayed in the textfield. A value of 0 indicates that there is no limit.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * This method is only available in macOS 10.11 and newer\n * If the text reaches the number of lines allowed, or the height of the container cannot accommodate the number of lines needed, the text will be clipped or truncated.\n   * Affects the default fitting size when the textfield is assigned to an `hs._asm.guitk.manager` object if the textfield element's height and width are not specified when assigned.",
        "notes" : [
          " * This method is only available in macOS 10.11 and newer",
          " * If the text reaches the number of lines allowed, or the height of the container cannot accommodate the number of lines needed, the text will be clipped or truncated.",
          "   * Affects the default fitting size when the textfield is assigned to an `hs._asm.guitk.manager` object if the textfield element's height and width are not specified when assigned."
        ],
        "signature" : "hs._asm.guitk.element.textfield:maximumNumberOfLines([lines]) -> textfieldObject | integer",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "maximumNumberOfLines",
        "parameters" : [
          " * `lines` - an optional integer, default 0, specifying the maximum number of lines that can be displayed in the textfield. A value of 0 indicates that there is no limit.",
          ""
        ]
      },
      {
        "desc" : "Get or set the placeholder string for the textfield.",
        "stripped_doc" : [
          "Get or set the placeholder string for the textfield.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:placeholderString([placeholder]) -> textfieldObject | string",
        "doc" : "Get or set the placeholder string for the textfield.\n\nParameters:\n* `placeholder` - an optional string or `hs.styledtext` object, or an explicit nil to remove, specifying the placeholder string for a textfield. The place holder string is displayed in a light color when the contents of the textfield is empty (i.e. is set to nil or the empty string \"\")\n\nReturns:\n * If an argument is provided, the textfieldObject; otherwise the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.textfield:placeholderString([placeholder]) -> textfieldObject | string",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the textfieldObject; otherwise the current value."
        ],
        "name" : "placeholderString",
        "parameters" : [
          "* `placeholder` - an optional string or `hs.styledtext` object, or an explicit nil to remove, specifying the placeholder string for a textfield. The place holder string is displayed in a light color when the contents of the textfield is empty (i.e. is set to nil or the empty string \"\")",
          ""
        ]
      },
      {
        "desc" : "Get or set the preferred layout width for the textfield",
        "stripped_doc" : [
          "Get or set the preferred layout width for the textfield",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:preferredMaxWidth([width]) -> textfieldObject | number",
        "doc" : "Get or set the preferred layout width for the textfield\n\nParameters:\n * `width` - an optional number, default 0.0, specifying the preferred width of the textfield\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.textfield:preferredMaxWidth([width]) -> textfieldObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value."
        ],
        "name" : "preferredMaxWidth",
        "parameters" : [
          " * `width` - an optional number, default 0.0, specifying the preferred width of the textfield",
          ""
        ]
      },
      {
        "desc" : "Selects the text of a selectable or editable textfield and makes it the active element in the window.",
        "stripped_doc" : [
          "Selects the text of a selectable or editable textfield and makes it the active element in the window.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:selectAll() -> textfieldObject",
        "doc" : "Selects the text of a selectable or editable textfield and makes it the active element in the window.\n\nParameters:\n * None\n\nReturns:\n * the textfieldObject\n\nNotes:\n * This method has no effect if the textfield is not editable or selectable.  Use `hs._asm.guitk:activeElement` if you wish to remove the focus from any textfield that is currently selected.",
        "notes" : [
          " * This method has no effect if the textfield is not editable or selectable.  Use `hs._asm.guitk:activeElement` if you wish to remove the focus from any textfield that is currently selected."
        ],
        "signature" : "hs._asm.guitk.element.textfield:selectAll() -> textfieldObject",
        "type" : "Method",
        "returns" : [
          " * the textfieldObject",
          ""
        ],
        "name" : "selectAll",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the contents of the textfield is selectable.",
        "stripped_doc" : [
          "Get or set whether the contents of the textfield is selectable.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:selectable([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the contents of the textfield is selectable.\n\nParameters:\n * `state` - an optional boolean specifying whether the textfield contents are selectable. Defaults to `true` for textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField) or [hs._asm.guitk.element.textfield.newWrappingLabel](#newWrappingLabel), otherwise false.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to false automatically sets [hs._asm.guitk.element.textfield:editable](#editable) to false.",
        "notes" : [
          " * Setting this to false automatically sets [hs._asm.guitk.element.textfield:editable](#editable) to false."
        ],
        "signature" : "hs._asm.guitk.element.textfield:selectable([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "selectable",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the textfield contents are selectable. Defaults to `true` for textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField) or [hs._asm.guitk.element.textfield.newWrappingLabel](#newWrappingLabel), otherwise false.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the style (font, color, etc.) of the text in an editable textfield can be changed by the user",
        "stripped_doc" : [
          "Get or set whether the style (font, color, etc.) of the text in an editable textfield can be changed by the user",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:styleEditable([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the style (font, color, etc.) of the text in an editable textfield can be changed by the user\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the style of the text can be edited in the textfield\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * If the style of a textfield element can be edited, the user will be able to access the font and color panels by right-clicking in the text field and selecting the Font submenu from the menu that is shown.",
        "notes" : [
          " * If the style of a textfield element can be edited, the user will be able to access the font and color panels by right-clicking in the text field and selecting the Font submenu from the menu that is shown."
        ],
        "signature" : "hs._asm.guitk.element.textfield:styleEditable([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "styleEditable",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the style of the text can be edited in the textfield",
          ""
        ]
      },
      {
        "desc" : "Get or set the color for the the text in a textfield element.",
        "stripped_doc" : [
          "Get or set the color for the the text in a textfield element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:textColor([color]) -> textfieldObject | color table",
        "doc" : "Get or set the color for the the text in a textfield element.\n\nParameters:\n* `color` - an optional table containing color keys as described in `hs.drawing.color`\n\nReturns:\n * If an argument is provided, the textfieldObject; otherwise the current value.\n\nNotes:\n * Has no effect on portions of an `hs.styledtext` value that specifies the text color for the object",
        "notes" : [
          " * Has no effect on portions of an `hs.styledtext` value that specifies the text color for the object"
        ],
        "signature" : "hs._asm.guitk.element.textfield:textColor([color]) -> textfieldObject | color table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the textfieldObject; otherwise the current value.",
          ""
        ],
        "name" : "textColor",
        "parameters" : [
          "* `color` - an optional table containing color keys as described in `hs.drawing.color`",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the system may tighten inter-character spacing in the text field before truncating text.",
        "stripped_doc" : [
          "Get or set whether the system may tighten inter-character spacing in the text field before truncating text.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:tighteningForTruncation([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the system may tighten inter-character spacing in the text field before truncating text.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether the system may tighten inter-character spacing in the text field before truncating text. Has no effect when the textfield is assigned an `hs.styledtext` object.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * This method is only available in macOS 10.11 and newer",
        "notes" : [
          " * This method is only available in macOS 10.11 and newer"
        ],
        "signature" : "hs._asm.guitk.element.textfield:tighteningForTruncation([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "tighteningForTruncation",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether the system may tighten inter-character spacing in the text field before truncating text. Has no effect when the textfield is assigned an `hs.styledtext` object.",
          ""
        ]
      },
      {
        "desc" : "Get or set the contents of the textfield.",
        "stripped_doc" : [
          "Get or set the contents of the textfield.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:value([value] | [type]) -> textfieldObject | string | styledtextObject",
        "doc" : "Get or set the contents of the textfield.\n\nParameters:\n * to set the textfield content:\n   * `value` - an optional string or `hs.styledtext` object specifying the contents to display in the textfield\n * to get the current content of the textfield:\n   * `type`  - an optional boolean specifying if the value retrieved should be as an `hs.styledtext` object (true) or a string (false). If no argument is provided, the value returned will be whatever type was last assigned to the textfield with this method or its constructor.\n\nReturns:\n * If a string or `hs.styledtext` object is assigned with this method, returns the textfieldObject; otherwise returns the value in the type requested or most recently assigned.\n\nNotes:\n * If no argument is provided and [hs._asm.guitk.element.textfield:styleEditable](#styleEditable) is true, if the style has been modified by the user an `hs.styledtext` object will be returned even if the most recent assignment was with a string value.",
        "notes" : [
          " * If no argument is provided and [hs._asm.guitk.element.textfield:styleEditable](#styleEditable) is true, if the style has been modified by the user an `hs.styledtext` object will be returned even if the most recent assignment was with a string value."
        ],
        "signature" : "hs._asm.guitk.element.textfield:value([value] | [type]) -> textfieldObject | string | styledtextObject",
        "type" : "Method",
        "returns" : [
          " * If a string or `hs.styledtext` object is assigned with this method, returns the textfieldObject; otherwise returns the value in the type requested or most recently assigned.",
          ""
        ],
        "name" : "value",
        "parameters" : [
          " * to set the textfield content:",
          "   * `value` - an optional string or `hs.styledtext` object specifying the contents to display in the textfield",
          " * to get the current content of the textfield:",
          "   * `type`  - an optional boolean specifying if the value retrieved should be as an `hs.styledtext` object (true) or a string (false). If no argument is provided, the value returned will be whatever type was last assigned to the textfield with this method or its constructor.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Get or set the callback function which will be invoked whenever the user interacts with the textfield element.",
        "stripped_doc" : [
          "Get or set the callback function which will be invoked whenever the user interacts with the textfield element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:callback([fn | nil]) -> textfieldObject | fn | nil",
        "doc" : "Get or set the callback function which will be invoked whenever the user interacts with the textfield element.\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user interacts with the textfield\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * The callback function should expect arguments as described below and return none:\n   * When the user starts typing in the text field, the callback will receive the following arguments:\n     * the textfield userdata object\n     * the message string \"didBeginEditing\" indicating that the user has started editing the textfield element\n   * When the focus leaves the text field element, the callback will receive the following arguments (note that it is possible to receive this callback without a corresponding \"didBeginEditing\" callback if the user makes no changes to the textfield):\n     * the textfield userdata object\n     * the message string \"didEndEditing\" indicating that the textfield element is no longer active\n     * the current string value of the textfield -- see [hs._asm.guitk.element.textfield:value](#value)\n     * a string specifying why editing terminated:\n       * \"other\"    - another element has taken focus or the user has clicked outside of the text field\n       * \"return\"   - the user has hit the enter or return key. Note that this does not take focus away from the textfield by default so if the user types again, another \"didBeginEditing\" callback for the textfield will be generated.\n       * \"tab\"      - the user used the tab key to move to the next textfield element\n       * \"shiftTab\" - the user user the tab key with the shift modifier to move to the previous textfield element\n       * the specification allows for other possible reasons for ending the editing of a textfield, but so far it is not known how to enable these and they may apply to other text based elements which have not yet been implemented.  These are \"cancel\", \"left\", \"right\", \"up\", and \"down\". If you do see one of these reasons in your use of the textfield element, please submit an issue with sample code so it can be determined how to properly document this.\n   * If the `hs._asm.guitk.element._control:continuous` is set to true for the textfield element, a callback with the following arguments will occur each time the user presses a key:\n     * the textfield userdata object\n     * the string \"textDidChange\" indicating that the user has typed or deleted something in the textfield\n     * the current string value of the textfield -- see [hs._asm.guitk.element.textfield:value](#value)",
        "notes" : [
          " * The callback function should expect arguments as described below and return none:",
          "   * When the user starts typing in the text field, the callback will receive the following arguments:",
          "     * the textfield userdata object",
          "     * the message string \"didBeginEditing\" indicating that the user has started editing the textfield element",
          "   * When the focus leaves the text field element, the callback will receive the following arguments (note that it is possible to receive this callback without a corresponding \"didBeginEditing\" callback if the user makes no changes to the textfield):",
          "     * the textfield userdata object",
          "     * the message string \"didEndEditing\" indicating that the textfield element is no longer active",
          "     * the current string value of the textfield -- see [hs._asm.guitk.element.textfield:value](#value)",
          "     * a string specifying why editing terminated:",
          "       * \"other\"    - another element has taken focus or the user has clicked outside of the text field",
          "       * \"return\"   - the user has hit the enter or return key. Note that this does not take focus away from the textfield by default so if the user types again, another \"didBeginEditing\" callback for the textfield will be generated.",
          "       * \"tab\"      - the user used the tab key to move to the next textfield element",
          "       * \"shiftTab\" - the user user the tab key with the shift modifier to move to the previous textfield element",
          "       * the specification allows for other possible reasons for ending the editing of a textfield, but so far it is not known how to enable these and they may apply to other text based elements which have not yet been implemented.  These are \"cancel\", \"left\", \"right\", \"up\", and \"down\". If you do see one of these reasons in your use of the textfield element, please submit an issue with sample code so it can be determined how to properly document this.",
          "   * If the `hs._asm.guitk.element._control:continuous` is set to true for the textfield element, a callback with the following arguments will occur each time the user presses a key:",
          "     * the textfield userdata object",
          "     * the string \"textDidChange\" indicating that the user has typed or deleted something in the textfield",
          "     * the current string value of the textfield -- see [hs._asm.guitk.element.textfield:value](#value)"
        ],
        "signature" : "hs._asm.guitk.element.textfield:callback([fn | nil]) -> textfieldObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked when the user interacts with the textfield",
          ""
        ]
      },
      {
        "desc" : "Get or set the callback function which will is invoked to make editing decisions about the textfield",
        "stripped_doc" : [
          "Get or set the callback function which will is invoked to make editing decisions about the textfield",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:editingCallback([fn | nil]) -> textfieldObject | fn | nil",
        "doc" : "Get or set the callback function which will is invoked to make editing decisions about the textfield\n\nParameters:\n * `fn` - a lua function, or explicit nil to remove, which will be invoked to make editing decisions about the textfield\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * The callback function should expect multiple arguments and return a boolean as described below (a return value of none or nil will use the default as specified for each callback below):\n   * When the user attempts to edit the textfield, the callback will be invoked with the following arguments and the boolean return value should indicate whether editing is to be allowed:\n     * the textfield userdata object\n     * the string \"shouldBeginEditing\" indicating that the callback is asking permission to allow editing of the textfield at this time\n     * the default return value as determined by the current state of the the textfield and its location in the window\/view hierarchy (usually this will be true)\n   * When the user attempts to finish editing the textfield, the callback will be invoked with the following arguments and the boolean return value should indicate whether focus is allowed to leave the textfield:\n     * the textfield userdata object\n     * the string \"shouldEndEditing\" indicating that the callback is asking permission to complete editing of the textfield at this time\n     * the default return value as determined by the current state of the the textfield and its location in the window\/view hierarchy (usually this will be true)\n   * When the return (or enter) key or escape key are pressed, the callback will be invoked with the following arguments and the return value should indicate whether or not the keypress was handled by the callback or should be passed further up the window\/view hierarchy:\n     * the textfield userdata object\n     * the string \"keyPress\"\n     * the string \"return\" or \"escape\"\n     * the default return value of false indicating that the callback is not interested in this keypress.\n   * Note that the return value is currently ignored when the key pressed is \"escape\".\n   * Note that the specification allows for the additional keys \"left\", \"right\", \"up\", and \"down\" to trigger this callback, but at present it is not known how to enable this for a textfield element. It is surmised that they may be applicable to text based elements that are not currently supported by `hs._asm.guitk`. If you do manage to receive a callback for one of these keys, please submit an issue with sample code so we can determine how to properly document them.",
        "notes" : [
          " * The callback function should expect multiple arguments and return a boolean as described below (a return value of none or nil will use the default as specified for each callback below):",
          "   * When the user attempts to edit the textfield, the callback will be invoked with the following arguments and the boolean return value should indicate whether editing is to be allowed:",
          "     * the textfield userdata object",
          "     * the string \"shouldBeginEditing\" indicating that the callback is asking permission to allow editing of the textfield at this time",
          "     * the default return value as determined by the current state of the the textfield and its location in the window\/view hierarchy (usually this will be true)",
          "   * When the user attempts to finish editing the textfield, the callback will be invoked with the following arguments and the boolean return value should indicate whether focus is allowed to leave the textfield:",
          "     * the textfield userdata object",
          "     * the string \"shouldEndEditing\" indicating that the callback is asking permission to complete editing of the textfield at this time",
          "     * the default return value as determined by the current state of the the textfield and its location in the window\/view hierarchy (usually this will be true)",
          "   * When the return (or enter) key or escape key are pressed, the callback will be invoked with the following arguments and the return value should indicate whether or not the keypress was handled by the callback or should be passed further up the window\/view hierarchy:",
          "     * the textfield userdata object",
          "     * the string \"keyPress\"",
          "     * the string \"return\" or \"escape\"",
          "     * the default return value of false indicating that the callback is not interested in this keypress.",
          "   * Note that the return value is currently ignored when the key pressed is \"escape\".",
          "   * Note that the specification allows for the additional keys \"left\", \"right\", \"up\", and \"down\" to trigger this callback, but at present it is not known how to enable this for a textfield element. It is surmised that they may be applicable to text based elements that are not currently supported by `hs._asm.guitk`. If you do manage to receive a callback for one of these keys, please submit an issue with sample code so we can determine how to properly document them."
        ],
        "signature" : "hs._asm.guitk.element.textfield:editingCallback([fn | nil]) -> textfieldObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "editingCallback",
        "parameters" : [
          " * `fn` - a lua function, or explicit nil to remove, which will be invoked to make editing decisions about the textfield",
          ""
        ]
      },
      {
        "desc" : "Selects the text of a selectable or editable textfield and makes it the active element in the window.",
        "stripped_doc" : [
          "Selects the text of a selectable or editable textfield and makes it the active element in the window.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:selectAll() -> textfieldObject",
        "doc" : "Selects the text of a selectable or editable textfield and makes it the active element in the window.\n\nParameters:\n * None\n\nReturns:\n * the textfieldObject\n\nNotes:\n * This method has no effect if the textfield is not editable or selectable.  Use `hs._asm.guitk:activeElement` if you wish to remove the focus from any textfield that is currently selected.",
        "notes" : [
          " * This method has no effect if the textfield is not editable or selectable.  Use `hs._asm.guitk:activeElement` if you wish to remove the focus from any textfield that is currently selected."
        ],
        "signature" : "hs._asm.guitk.element.textfield:selectAll() -> textfieldObject",
        "type" : "Method",
        "returns" : [
          " * the textfieldObject",
          ""
        ],
        "name" : "selectAll",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the style (font, color, etc.) of the text in an editable textfield can be changed by the user",
        "stripped_doc" : [
          "Get or set whether the style (font, color, etc.) of the text in an editable textfield can be changed by the user",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:styleEditable([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the style (font, color, etc.) of the text in an editable textfield can be changed by the user\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether or not the style of the text can be edited in the textfield\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * If the style of a textfield element can be edited, the user will be able to access the font and color panels by right-clicking in the text field and selecting the Font submenu from the menu that is shown.",
        "notes" : [
          " * If the style of a textfield element can be edited, the user will be able to access the font and color panels by right-clicking in the text field and selecting the Font submenu from the menu that is shown."
        ],
        "signature" : "hs._asm.guitk.element.textfield:styleEditable([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "styleEditable",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether or not the style of the text can be edited in the textfield",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the background of the textfield is shown",
        "stripped_doc" : [
          "Get or set whether the background of the textfield is shown",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:drawsBackground([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the background of the textfield is shown\n\nParameters:\n * `state` - an optional boolean specifying whether the background of the textfield is shown (true) or transparent (false). Defaults to `true` for editable textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField), otherwise false.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.textfield:drawsBackground([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value."
        ],
        "name" : "drawsBackground",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the background of the textfield is shown (true) or transparent (false). Defaults to `true` for editable textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField), otherwise false.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether an editable textfield whose style is editable allows image files to be dragged into it",
        "stripped_doc" : [
          "Get or set whether an editable textfield whose style is editable allows image files to be dragged into it",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:importsGraphics([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether an editable textfield whose style is editable allows image files to be dragged into it\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether the textfield allows image files to be dragged into it\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * [hs._asm.guitk.element.textfield:styleEditable](#styleEditable) must also be true for this method to have any effect.",
        "notes" : [
          " * [hs._asm.guitk.element.textfield:styleEditable](#styleEditable) must also be true for this method to have any effect."
        ],
        "signature" : "hs._asm.guitk.element.textfield:importsGraphics([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "importsGraphics",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether the textfield allows image files to be dragged into it",
          ""
        ]
      },
      {
        "desc" : "Get or set the preferred layout width for the textfield",
        "stripped_doc" : [
          "Get or set the preferred layout width for the textfield",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:preferredMaxWidth([width]) -> textfieldObject | number",
        "doc" : "Get or set the preferred layout width for the textfield\n\nParameters:\n * `width` - an optional number, default 0.0, specifying the preferred width of the textfield\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.textfield:preferredMaxWidth([width]) -> textfieldObject | number",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value."
        ],
        "name" : "preferredMaxWidth",
        "parameters" : [
          " * `width` - an optional number, default 0.0, specifying the preferred width of the textfield",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the corners of a bezeled textfield are rounded or square",
        "stripped_doc" : [
          "Get or set whether the corners of a bezeled textfield are rounded or square",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:bezelStyle([style]) -> textfieldObject | string",
        "doc" : "Get or set whether the corners of a bezeled textfield are rounded or square\n\nParameters:\n * `style` - an optional string, default \"square\", specifying whether the corners of a bezeled textfield are rounded or square. Must be one of \"square\" or \"round\".\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * only has an effect if [hs._asm.guitk.element.textfield:bezeled](#bezeled) is true.",
        "notes" : [
          " * only has an effect if [hs._asm.guitk.element.textfield:bezeled](#bezeled) is true."
        ],
        "signature" : "hs._asm.guitk.element.textfield:bezelStyle([style]) -> textfieldObject | string",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "bezelStyle",
        "parameters" : [
          " * `style` - an optional string, default \"square\", specifying whether the corners of a bezeled textfield are rounded or square. Must be one of \"square\" or \"round\".",
          ""
        ]
      },
      {
        "desc" : "Get or set the color for the background of the textfield element.",
        "stripped_doc" : [
          "Get or set the color for the background of the textfield element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:backgroundColor([color]) -> textfieldObject | color table",
        "doc" : "Get or set the color for the background of the textfield element.\n\nParameters:\n* `color` - an optional table containing color keys as described in `hs.drawing.color`\n\nReturns:\n * If an argument is provided, the textfieldObject; otherwise the current value.\n\nNotes:\n * The background color will only be drawn when [hs._asm.guitk.element.textfield:drawsBackground](#drawsBackground) is true.",
        "notes" : [
          " * The background color will only be drawn when [hs._asm.guitk.element.textfield:drawsBackground](#drawsBackground) is true."
        ],
        "signature" : "hs._asm.guitk.element.textfield:backgroundColor([color]) -> textfieldObject | color table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the textfieldObject; otherwise the current value.",
          ""
        ],
        "name" : "backgroundColor",
        "parameters" : [
          "* `color` - an optional table containing color keys as described in `hs.drawing.color`",
          ""
        ]
      },
      {
        "desc" : "Get or set the color for the the text in a textfield element.",
        "stripped_doc" : [
          "Get or set the color for the the text in a textfield element.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:textColor([color]) -> textfieldObject | color table",
        "doc" : "Get or set the color for the the text in a textfield element.\n\nParameters:\n* `color` - an optional table containing color keys as described in `hs.drawing.color`\n\nReturns:\n * If an argument is provided, the textfieldObject; otherwise the current value.\n\nNotes:\n * Has no effect on portions of an `hs.styledtext` value that specifies the text color for the object",
        "notes" : [
          " * Has no effect on portions of an `hs.styledtext` value that specifies the text color for the object"
        ],
        "signature" : "hs._asm.guitk.element.textfield:textColor([color]) -> textfieldObject | color table",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the textfieldObject; otherwise the current value.",
          ""
        ],
        "name" : "textColor",
        "parameters" : [
          "* `color` - an optional table containing color keys as described in `hs.drawing.color`",
          ""
        ]
      },
      {
        "desc" : "Get or set the placeholder string for the textfield.",
        "stripped_doc" : [
          "Get or set the placeholder string for the textfield.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:placeholderString([placeholder]) -> textfieldObject | string",
        "doc" : "Get or set the placeholder string for the textfield.\n\nParameters:\n* `placeholder` - an optional string or `hs.styledtext` object, or an explicit nil to remove, specifying the placeholder string for a textfield. The place holder string is displayed in a light color when the contents of the textfield is empty (i.e. is set to nil or the empty string \"\")\n\nReturns:\n * If an argument is provided, the textfieldObject; otherwise the current value.",
        "notes" : [

        ],
        "signature" : "hs._asm.guitk.element.textfield:placeholderString([placeholder]) -> textfieldObject | string",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the textfieldObject; otherwise the current value."
        ],
        "name" : "placeholderString",
        "parameters" : [
          "* `placeholder` - an optional string or `hs.styledtext` object, or an explicit nil to remove, specifying the placeholder string for a textfield. The place holder string is displayed in a light color when the contents of the textfield is empty (i.e. is set to nil or the empty string \"\")",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the textfield draws a bezeled border around its contents.",
        "stripped_doc" : [
          "Get or set whether the textfield draws a bezeled border around its contents.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:bezeled([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the textfield draws a bezeled border around its contents.\n\nParameters:\n * `state` - an optional boolean specifying whether the textfield draws a bezeled border around its contents. Defaults to `true` for editable textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField), otherwise false.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * If you set this to true, [hs._asm.guitk.element.textfield:bordered](#bordered) is set to false.",
        "notes" : [
          " * If you set this to true, [hs._asm.guitk.element.textfield:bordered](#bordered) is set to false."
        ],
        "signature" : "hs._asm.guitk.element.textfield:bezeled([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "bezeled",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the textfield draws a bezeled border around its contents. Defaults to `true` for editable textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField), otherwise false.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the textfield draws a black border around its contents.",
        "stripped_doc" : [
          "Get or set whether the textfield draws a black border around its contents.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:bordered([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the textfield draws a black border around its contents.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether the textfield draws a black border around its contents.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * If you set this to true, [hs._asm.guitk.element.textfield:bezeled](#bezeled) is set to false.",
        "notes" : [
          " * If you set this to true, [hs._asm.guitk.element.textfield:bezeled](#bezeled) is set to false."
        ],
        "signature" : "hs._asm.guitk.element.textfield:bordered([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "bordered",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether the textfield draws a black border around its contents.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the textfield contents will be expanded into a tooltip if the contents are longer than the textfield is wide and the mouse pointer hovers over the textfield.",
        "stripped_doc" : [
          "Get or set whether the textfield contents will be expanded into a tooltip if the contents are longer than the textfield is wide and the mouse pointer hovers over the textfield.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:expandIntoTooltip([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the textfield contents will be expanded into a tooltip if the contents are longer than the textfield is wide and the mouse pointer hovers over the textfield.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether the textfield contents will be expanded into a tooltip if the contents are longer than the textfield is wide.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * If a tooltip is set with `hs._asm.guitk.element._control:tooltip` then this method has no effect.",
        "notes" : [
          " * If a tooltip is set with `hs._asm.guitk.element._control:tooltip` then this method has no effect."
        ],
        "signature" : "hs._asm.guitk.element.textfield:expandIntoTooltip([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "expandIntoTooltip",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether the textfield contents will be expanded into a tooltip if the contents are longer than the textfield is wide.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the textfield is editable.",
        "stripped_doc" : [
          "Get or set whether the textfield is editable.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:editable([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the textfield is editable.\n\nParameters:\n * `state` - an optional boolean specifying whether the textfield contents are editable. Defaults to `true` for editable textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField), otherwise false.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to true automatically sets [hs._asm.guitk.element.textfield:selectable](#selectable) to true.",
        "notes" : [
          " * Setting this to true automatically sets [hs._asm.guitk.element.textfield:selectable](#selectable) to true."
        ],
        "signature" : "hs._asm.guitk.element.textfield:editable([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "editable",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the textfield contents are editable. Defaults to `true` for editable textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField), otherwise false.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the contents of the textfield is selectable.",
        "stripped_doc" : [
          "Get or set whether the contents of the textfield is selectable.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:selectable([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the contents of the textfield is selectable.\n\nParameters:\n * `state` - an optional boolean specifying whether the textfield contents are selectable. Defaults to `true` for textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField) or [hs._asm.guitk.element.textfield.newWrappingLabel](#newWrappingLabel), otherwise false.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * Setting this to false automatically sets [hs._asm.guitk.element.textfield:editable](#editable) to false.",
        "notes" : [
          " * Setting this to false automatically sets [hs._asm.guitk.element.textfield:editable](#editable) to false."
        ],
        "signature" : "hs._asm.guitk.element.textfield:selectable([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "selectable",
        "parameters" : [
          " * `state` - an optional boolean specifying whether the textfield contents are selectable. Defaults to `true` for textfields created with [hs._asm.guitk.element.textfield.newTextField](#newTextField) or [hs._asm.guitk.element.textfield.newWrappingLabel](#newWrappingLabel), otherwise false.",
          ""
        ]
      },
      {
        "desc" : "Get or set the contents of the textfield.",
        "stripped_doc" : [
          "Get or set the contents of the textfield.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:value([value] | [type]) -> textfieldObject | string | styledtextObject",
        "doc" : "Get or set the contents of the textfield.\n\nParameters:\n * to set the textfield content:\n   * `value` - an optional string or `hs.styledtext` object specifying the contents to display in the textfield\n * to get the current content of the textfield:\n   * `type`  - an optional boolean specifying if the value retrieved should be as an `hs.styledtext` object (true) or a string (false). If no argument is provided, the value returned will be whatever type was last assigned to the textfield with this method or its constructor.\n\nReturns:\n * If a string or `hs.styledtext` object is assigned with this method, returns the textfieldObject; otherwise returns the value in the type requested or most recently assigned.\n\nNotes:\n * If no argument is provided and [hs._asm.guitk.element.textfield:styleEditable](#styleEditable) is true, if the style has been modified by the user an `hs.styledtext` object will be returned even if the most recent assignment was with a string value.",
        "notes" : [
          " * If no argument is provided and [hs._asm.guitk.element.textfield:styleEditable](#styleEditable) is true, if the style has been modified by the user an `hs.styledtext` object will be returned even if the most recent assignment was with a string value."
        ],
        "signature" : "hs._asm.guitk.element.textfield:value([value] | [type]) -> textfieldObject | string | styledtextObject",
        "type" : "Method",
        "returns" : [
          " * If a string or `hs.styledtext` object is assigned with this method, returns the textfieldObject; otherwise returns the value in the type requested or most recently assigned.",
          ""
        ],
        "name" : "value",
        "parameters" : [
          " * to set the textfield content:",
          "   * `value` - an optional string or `hs.styledtext` object specifying the contents to display in the textfield",
          " * to get the current content of the textfield:",
          "   * `type`  - an optional boolean specifying if the value retrieved should be as an `hs.styledtext` object (true) or a string (false). If no argument is provided, the value returned will be whatever type was last assigned to the textfield with this method or its constructor.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the textfield allows the use of the touchbar character picker when the textfield is editable and is being edited.",
        "stripped_doc" : [
          "Get or set whether the textfield allows the use of the touchbar character picker when the textfield is editable and is being edited.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:allowsCharacterPicker([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the textfield allows the use of the touchbar character picker when the textfield is editable and is being edited.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether the textfield allows the use of the touchbar character picker when the textfield is editable and is being edited.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * This method is only available in macOS 10.12.1 and newer",
        "notes" : [
          " * This method is only available in macOS 10.12.1 and newer"
        ],
        "signature" : "hs._asm.guitk.element.textfield:allowsCharacterPicker([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "allowsCharacterPicker",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether the textfield allows the use of the touchbar character picker when the textfield is editable and is being edited.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether the system may tighten inter-character spacing in the text field before truncating text.",
        "stripped_doc" : [
          "Get or set whether the system may tighten inter-character spacing in the text field before truncating text.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:tighteningForTruncation([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether the system may tighten inter-character spacing in the text field before truncating text.\n\nParameters:\n * `state` - an optional boolean, default false, specifying whether the system may tighten inter-character spacing in the text field before truncating text. Has no effect when the textfield is assigned an `hs.styledtext` object.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * This method is only available in macOS 10.11 and newer",
        "notes" : [
          " * This method is only available in macOS 10.11 and newer"
        ],
        "signature" : "hs._asm.guitk.element.textfield:tighteningForTruncation([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "tighteningForTruncation",
        "parameters" : [
          " * `state` - an optional boolean, default false, specifying whether the system may tighten inter-character spacing in the text field before truncating text. Has no effect when the textfield is assigned an `hs.styledtext` object.",
          ""
        ]
      },
      {
        "desc" : "Get or set the maximum number of lines that can be displayed in the textfield.",
        "stripped_doc" : [
          "Get or set the maximum number of lines that can be displayed in the textfield.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:maximumNumberOfLines([lines]) -> textfieldObject | integer",
        "doc" : "Get or set the maximum number of lines that can be displayed in the textfield.\n\nParameters:\n * `lines` - an optional integer, default 0, specifying the maximum number of lines that can be displayed in the textfield. A value of 0 indicates that there is no limit.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * This method is only available in macOS 10.11 and newer\n * If the text reaches the number of lines allowed, or the height of the container cannot accommodate the number of lines needed, the text will be clipped or truncated.\n   * Affects the default fitting size when the textfield is assigned to an `hs._asm.guitk.manager` object if the textfield element's height and width are not specified when assigned.",
        "notes" : [
          " * This method is only available in macOS 10.11 and newer",
          " * If the text reaches the number of lines allowed, or the height of the container cannot accommodate the number of lines needed, the text will be clipped or truncated.",
          "   * Affects the default fitting size when the textfield is assigned to an `hs._asm.guitk.manager` object if the textfield element's height and width are not specified when assigned."
        ],
        "signature" : "hs._asm.guitk.element.textfield:maximumNumberOfLines([lines]) -> textfieldObject | integer",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "maximumNumberOfLines",
        "parameters" : [
          " * `lines` - an optional integer, default 0, specifying the maximum number of lines that can be displayed in the textfield. A value of 0 indicates that there is no limit.",
          ""
        ]
      },
      {
        "desc" : "Get or set whether automatic text completion is enabled when the textfield is being edited.",
        "stripped_doc" : [
          "Get or set whether automatic text completion is enabled when the textfield is being edited.",
          ""
        ],
        "def" : "hs._asm.guitk.element.textfield:automaticTextCompletion([state]) -> textfieldObject | boolean",
        "doc" : "Get or set whether automatic text completion is enabled when the textfield is being edited.\n\nParameters:\n * `state` - an optional boolean, default true, specifying whether automatic text completion is enabled when the textfield is being edited.\n\nReturns:\n * if a value is provided, returns the textfieldObject ; otherwise returns the current value.\n\nNotes:\n * This method is only available in macOS 10.12.2 and newer",
        "notes" : [
          " * This method is only available in macOS 10.12.2 and newer"
        ],
        "signature" : "hs._asm.guitk.element.textfield:automaticTextCompletion([state]) -> textfieldObject | boolean",
        "type" : "Method",
        "returns" : [
          " * if a value is provided, returns the textfieldObject ; otherwise returns the current value.",
          ""
        ],
        "name" : "automaticTextCompletion",
        "parameters" : [
          " * `state` - an optional boolean, default true, specifying whether automatic text completion is enabled when the textfield is being edited.",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "name" : "hs._asm.guitk.element.textfield"
  }
]
