[
  {
    "Constant" : [
      {
        "doc" : "A table of common accessibility object roles, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "def" : "hs._asm.axuielement.roles[]",
        "stripped_doc" : [
          "A table of common accessibility object roles, provided for reference.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.roles[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "roles",
        "desc" : "A table of common accessibility object roles, provided for reference."
      },
      {
        "doc" : "A table of common accessibility object subroles, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "def" : "hs._asm.axuielement.subroles[]",
        "stripped_doc" : [
          "A table of common accessibility object subroles, provided for reference.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.subroles[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "subroles",
        "desc" : "A table of common accessibility object subroles, provided for reference."
      },
      {
        "doc" : "A table of common accessibility object attribute names, provided for reference. The names are grouped into the following subcategories (keys):\n\n * `application`\n * `dock`\n * `general`\n * `matte`\n * `menu`\n * `misc`\n * `system`\n * `table`\n * `text`\n * `window`\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.\n * the category name indicates the type of accessibility object likely to contain the member elements.",
        "def" : "hs._asm.axuielement.attributes[]",
        "stripped_doc" : [
          "A table of common accessibility object attribute names, provided for reference. The names are grouped into the following subcategories (keys):",
          "",
          " * `application`",
          " * `dock`",
          " * `general`",
          " * `matte`",
          " * `menu`",
          " * `misc`",
          " * `system`",
          " * `table`",
          " * `text`",
          " * `window`",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive.",
          " * the category name indicates the type of accessibility object likely to contain the member elements."
        ],
        "signature" : "hs._asm.axuielement.attributes[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "attributes",
        "desc" : "A table of common accessibility object attribute names, provided for reference. The names are grouped into the following subcategories (keys):"
      },
      {
        "doc" : "A table of common accessibility object parameterized attribute names, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "def" : "hs._asm.axuielement.parameterizedAttributes[]",
        "stripped_doc" : [
          "A table of common accessibility object parameterized attribute names, provided for reference.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.parameterizedAttributes[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "parameterizedAttributes",
        "desc" : "A table of common accessibility object parameterized attribute names, provided for reference."
      },
      {
        "doc" : "A table of common accessibility object action names, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "def" : "hs._asm.axuielement.actions[]",
        "stripped_doc" : [
          "A table of common accessibility object action names, provided for reference.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.actions[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "actions",
        "desc" : "A table of common accessibility object action names, provided for reference."
      },
      {
        "doc" : "A table of common directions which may be specified as the value of an accessibility object property, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "def" : "hs._asm.axuielement.directions[]",
        "stripped_doc" : [
          "A table of common directions which may be specified as the value of an accessibility object property, provided for reference.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.directions[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "directions",
        "desc" : "A table of common directions which may be specified as the value of an accessibility object property, provided for reference."
      }
    ],
    "submodules" : [
      "observer"
    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "This module allows you to access the accessibility objects of running applications, their windows, menus, and other user interface elements that support the OS X accessibility API.",
    "Constructor" : [
      {
        "doc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates.\n\nParameters:\n * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters\n * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.\n\nReturns:\n * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.\n\nNotes:\n * See also [hs._asm.axuielement:elementAtPosition](#elementAtPosition) -- this function is a shortcut for `hs._asm.axuielement.systemWideElement():elementAtPosition(...)`.\n\n * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.",
        "def" : "hs._asm.axuielement.systemElementAtPosition(x, y | { x, y }) -> axuielementObject",
        "stripped_doc" : [
          "Returns the accessibility object at the specified position in top-left relative screen coordinates.",
          ""
        ],
        "parameters" : [
          " * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters",
          " * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.",
          ""
        ],
        "notes" : [
          " * See also [hs._asm.axuielement:elementAtPosition](#elementAtPosition) -- this function is a shortcut for `hs._asm.axuielement.systemWideElement():elementAtPosition(...)`.",
          "",
          " * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location."
        ],
        "signature" : "hs._asm.axuielement.systemElementAtPosition(x, y | { x, y }) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.",
          ""
        ],
        "name" : "systemElementAtPosition",
        "desc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates."
      },
      {
        "doc" : "Returns the accessibility object for the window specified by the `hs.window` object.\n\nParameters:\n * `windowObject` - the `hs.window` object for the window.\n\nReturns:\n * an axuielementObject for the window specified",
        "def" : "hs._asm.axuielement.windowElement(windowObject) -> axuielementObject",
        "stripped_doc" : [
          "Returns the accessibility object for the window specified by the `hs.window` object.",
          ""
        ],
        "parameters" : [
          " * `windowObject` - the `hs.window` object for the window.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.windowElement(windowObject) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the window specified"
        ],
        "name" : "windowElement",
        "desc" : "Returns the accessibility object for the window specified by the `hs.window` object."
      },
      {
        "doc" : "Returns the top-level accessibility object for the application specified by the `hs.application` object.\n\nParameters:\n * `applicationObject` - the `hs.application` object for the Application.\n\nReturns:\n * an axuielementObject for the application specified",
        "def" : "hs._asm.axuielement.applicationElement(applicationObject) -> axuielementObject",
        "stripped_doc" : [
          "Returns the top-level accessibility object for the application specified by the `hs.application` object.",
          ""
        ],
        "parameters" : [
          " * `applicationObject` - the `hs.application` object for the Application.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.applicationElement(applicationObject) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the application specified"
        ],
        "name" : "applicationElement",
        "desc" : "Returns the top-level accessibility object for the application specified by the `hs.application` object."
      },
      {
        "doc" : "Returns an accessibility object that provides access to system attributes.\n\nParameters:\n * None\n\nReturns:\n * the axuielementObject for the system attributes",
        "def" : "hs._asm.axuielement.systemWideElement() -> axuielementObject",
        "stripped_doc" : [
          "Returns an accessibility object that provides access to system attributes.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.systemWideElement() -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * the axuielementObject for the system attributes"
        ],
        "name" : "systemWideElement",
        "desc" : "Returns an accessibility object that provides access to system attributes."
      },
      {
        "doc" : "Returns the top-level accessibility object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * an axuielementObject for the application specified, or nil if it cannot be determined",
        "def" : "hs._asm.axuielement.applicationElementForPID(pid) -> axuielementObject",
        "stripped_doc" : [
          "Returns the top-level accessibility object for the application with the specified process ID.",
          ""
        ],
        "parameters" : [
          " * `pid` - the process ID of the application.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.applicationElementForPID(pid) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the application specified, or nil if it cannot be determined"
        ],
        "name" : "applicationElementForPID",
        "desc" : "Returns the top-level accessibility object for the application with the specified process ID."
      }
    ],
    "doc" : "This module allows you to access the accessibility objects of running applications, their windows, menus, and other user interface elements that support the OS X accessibility API.\n\nThis is very much a work in progress, so bugs and comments are welcome.\n\nThis module works through the use of axuielementObjects, which is the Hammerspoon representation for an accessibility object.  An accessibility object represents any object or component of an OS X application which can be manipulated through the OS X Accessibility API -- it can be an application, a window, a button, selected text, etc.  As such, it can only support those features and objects within an application that the application developers make available through the Accessibility API.\n\nThe basic methods available to determine what attributes and actions are available for a given object are described in this reference documentation.  In addition, the module will dynamically add methods for the attributes and actions appropriate to the object, but these will differ between object roles and applications -- again we are limited by what the target application developers provide us.\n\nThe dynamically generated methods will follow one of the following templates:\n * `object:*attribute*()`         - this will return the value for the specified attribute (see [hs._asm.axuielement:attributeValue](#attributeValue) for the generic function this is based on).\n * `object:set*attribute*(value)` - this will set the specified attribute to the given value (see [hs._asm.axuielement:setAttributeValue](#setAttributeValue) for the generic function this is based on).\n * `object:do*action*()`          - this request that the specified action is performed by the object (see [hs._asm.axuielement:performAction](#performAction) for the generic function this is based on).\n\nWhere *action* and *attribute* can be the formal Accessibility version of the attribute or action name (a string usually prefixed with \"AX\") or without the \"AX\" prefix.  When the prefix is left off, the first letter of the action or attribute can be uppercase or lowercase.\n\nThe module also dynamically supports treating the axuielementObject useradata as an array, to access it's children (i.e. `#object` will return a number, indicating the number of direct children the object has, and `object[1]` is equivalent to `object:children()[1]` or, more formally, `object:attributeValue(\"AXChildren\")[1]`).\n\nYou can also treat the axuielementObject userdata as a table of key-value pairs to generate a list of the dynamically generated functions: `for k, v in pairs(object) do print(k, v) end` (this is essentially what [hs._asm.axuielement:dynamicMethods](#dynamicMethods) does).\n\n\nLimited support for parameterized attributes is provided, but is not yet complete.  This is expected to see updates in the future.",
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "A table of common accessibility object action names, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "def" : "hs._asm.axuielement.actions[]",
        "stripped_doc" : [
          "A table of common accessibility object action names, provided for reference.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.actions[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "actions",
        "desc" : "A table of common accessibility object action names, provided for reference."
      },
      {
        "doc" : "A table of common accessibility object attribute names, provided for reference. The names are grouped into the following subcategories (keys):\n\n * `application`\n * `dock`\n * `general`\n * `matte`\n * `menu`\n * `misc`\n * `system`\n * `table`\n * `text`\n * `window`\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.\n * the category name indicates the type of accessibility object likely to contain the member elements.",
        "def" : "hs._asm.axuielement.attributes[]",
        "stripped_doc" : [
          "A table of common accessibility object attribute names, provided for reference. The names are grouped into the following subcategories (keys):",
          "",
          " * `application`",
          " * `dock`",
          " * `general`",
          " * `matte`",
          " * `menu`",
          " * `misc`",
          " * `system`",
          " * `table`",
          " * `text`",
          " * `window`",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive.",
          " * the category name indicates the type of accessibility object likely to contain the member elements."
        ],
        "signature" : "hs._asm.axuielement.attributes[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "attributes",
        "desc" : "A table of common accessibility object attribute names, provided for reference. The names are grouped into the following subcategories (keys):"
      },
      {
        "doc" : "A table of common directions which may be specified as the value of an accessibility object property, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "def" : "hs._asm.axuielement.directions[]",
        "stripped_doc" : [
          "A table of common directions which may be specified as the value of an accessibility object property, provided for reference.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.directions[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "directions",
        "desc" : "A table of common directions which may be specified as the value of an accessibility object property, provided for reference."
      },
      {
        "doc" : "A table of common accessibility object parameterized attribute names, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "def" : "hs._asm.axuielement.parameterizedAttributes[]",
        "stripped_doc" : [
          "A table of common accessibility object parameterized attribute names, provided for reference.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.parameterizedAttributes[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "parameterizedAttributes",
        "desc" : "A table of common accessibility object parameterized attribute names, provided for reference."
      },
      {
        "doc" : "A table of common accessibility object roles, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "def" : "hs._asm.axuielement.roles[]",
        "stripped_doc" : [
          "A table of common accessibility object roles, provided for reference.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.roles[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "roles",
        "desc" : "A table of common accessibility object roles, provided for reference."
      },
      {
        "doc" : "A table of common accessibility object subroles, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "def" : "hs._asm.axuielement.subroles[]",
        "stripped_doc" : [
          "A table of common accessibility object subroles, provided for reference.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.subroles[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "subroles",
        "desc" : "A table of common accessibility object subroles, provided for reference."
      },
      {
        "doc" : "Returns the top-level accessibility object for the application specified by the `hs.application` object.\n\nParameters:\n * `applicationObject` - the `hs.application` object for the Application.\n\nReturns:\n * an axuielementObject for the application specified",
        "def" : "hs._asm.axuielement.applicationElement(applicationObject) -> axuielementObject",
        "stripped_doc" : [
          "Returns the top-level accessibility object for the application specified by the `hs.application` object.",
          ""
        ],
        "parameters" : [
          " * `applicationObject` - the `hs.application` object for the Application.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.applicationElement(applicationObject) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the application specified"
        ],
        "name" : "applicationElement",
        "desc" : "Returns the top-level accessibility object for the application specified by the `hs.application` object."
      },
      {
        "doc" : "Returns the top-level accessibility object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * an axuielementObject for the application specified, or nil if it cannot be determined",
        "def" : "hs._asm.axuielement.applicationElementForPID(pid) -> axuielementObject",
        "stripped_doc" : [
          "Returns the top-level accessibility object for the application with the specified process ID.",
          ""
        ],
        "parameters" : [
          " * `pid` - the process ID of the application.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.applicationElementForPID(pid) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the application specified, or nil if it cannot be determined"
        ],
        "name" : "applicationElementForPID",
        "desc" : "Returns the top-level accessibility object for the application with the specified process ID."
      },
      {
        "doc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates.\n\nParameters:\n * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters\n * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.\n\nReturns:\n * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.\n\nNotes:\n * See also [hs._asm.axuielement:elementAtPosition](#elementAtPosition) -- this function is a shortcut for `hs._asm.axuielement.systemWideElement():elementAtPosition(...)`.\n\n * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.",
        "def" : "hs._asm.axuielement.systemElementAtPosition(x, y | { x, y }) -> axuielementObject",
        "stripped_doc" : [
          "Returns the accessibility object at the specified position in top-left relative screen coordinates.",
          ""
        ],
        "parameters" : [
          " * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters",
          " * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.",
          ""
        ],
        "notes" : [
          " * See also [hs._asm.axuielement:elementAtPosition](#elementAtPosition) -- this function is a shortcut for `hs._asm.axuielement.systemWideElement():elementAtPosition(...)`.",
          "",
          " * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location."
        ],
        "signature" : "hs._asm.axuielement.systemElementAtPosition(x, y | { x, y }) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.",
          ""
        ],
        "name" : "systemElementAtPosition",
        "desc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates."
      },
      {
        "doc" : "Returns an accessibility object that provides access to system attributes.\n\nParameters:\n * None\n\nReturns:\n * the axuielementObject for the system attributes",
        "def" : "hs._asm.axuielement.systemWideElement() -> axuielementObject",
        "stripped_doc" : [
          "Returns an accessibility object that provides access to system attributes.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.systemWideElement() -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * the axuielementObject for the system attributes"
        ],
        "name" : "systemWideElement",
        "desc" : "Returns an accessibility object that provides access to system attributes."
      },
      {
        "doc" : "Returns the accessibility object for the window specified by the `hs.window` object.\n\nParameters:\n * `windowObject` - the `hs.window` object for the window.\n\nReturns:\n * an axuielementObject for the window specified",
        "def" : "hs._asm.axuielement.windowElement(windowObject) -> axuielementObject",
        "stripped_doc" : [
          "Returns the accessibility object for the window specified by the `hs.window` object.",
          ""
        ],
        "parameters" : [
          " * `windowObject` - the `hs.window` object for the window.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.windowElement(windowObject) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the window specified"
        ],
        "name" : "windowElement",
        "desc" : "Returns the accessibility object for the window specified by the `hs.window` object."
      },
      {
        "doc" : "Returns a localized description of the specified accessibility object's action.\n\nParameters:\n * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).\n\nReturns:\n * a string containing a description of the object's action\n\nNotes:\n * The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers.",
        "def" : "hs._asm.axuielement:actionDescription(action) -> string",
        "stripped_doc" : [
          "Returns a localized description of the specified accessibility object's action.",
          ""
        ],
        "parameters" : [
          " * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).",
          ""
        ],
        "notes" : [
          " * The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers."
        ],
        "signature" : "hs._asm.axuielement:actionDescription(action) -> string",
        "type" : "Method",
        "returns" : [
          " * a string containing a description of the object's action",
          ""
        ],
        "name" : "actionDescription",
        "desc" : "Returns a localized description of the specified accessibility object's action."
      },
      {
        "doc" : "Returns a list of all the actions the specified accessibility object can perform.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all actions supported by the axuielementObject\n\nNotes:\n * Common action names can be found in the [hs._asm.axuielement.actions](#actions) table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table.",
        "def" : "hs._asm.axuielement:actionNames() -> table",
        "stripped_doc" : [
          "Returns a list of all the actions the specified accessibility object can perform.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * Common action names can be found in the [hs._asm.axuielement.actions](#actions) table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."
        ],
        "signature" : "hs._asm.axuielement:actionNames() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all actions supported by the axuielementObject",
          ""
        ],
        "name" : "actionNames",
        "desc" : "Returns a list of all the actions the specified accessibility object can perform."
      },
      {
        "doc" : "Returns a table containing key-value pairs for all attributes of the accessibility object.\n\nParameters:\n * `includeErrors` - an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.\n\nReturns:\n * a table with key-value pairs corresponding to the attributes of the accessibility object.",
        "def" : "hs._asm.axuielement:allAttributeValues([includeErrors]) -> table",
        "stripped_doc" : [
          "Returns a table containing key-value pairs for all attributes of the accessibility object.",
          ""
        ],
        "parameters" : [
          " * `includeErrors` - an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:allAttributeValues([includeErrors]) -> table",
        "type" : "Method",
        "returns" : [
          " * a table with key-value pairs corresponding to the attributes of the accessibility object."
        ],
        "name" : "allAttributeValues",
        "desc" : "Returns a table containing key-value pairs for all attributes of the accessibility object."
      },
      {
        "doc" : "If the element referes to an application, return an `hs.application` object for the element.\n\nParameters:\n * None\n\nReturns:\n * if the element refers to an application, return an `hs.application` object for the element ; otherwise return nil\n\nNotes:\n * An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid).",
        "def" : "hs._asm.axuielement:asHSApplication() -> hs.application object | nil",
        "stripped_doc" : [
          "If the element referes to an application, return an `hs.application` object for the element.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid)."
        ],
        "signature" : "hs._asm.axuielement:asHSApplication() -> hs.application object | nil",
        "type" : "Method",
        "returns" : [
          " * if the element refers to an application, return an `hs.application` object for the element ; otherwise return nil",
          ""
        ],
        "name" : "asHSApplication",
        "desc" : "If the element referes to an application, return an `hs.application` object for the element."
      },
      {
        "doc" : "If the element referes to a window, return an `hs.window` object for the element.\n\nParameters:\n * None\n\nReturns:\n * if the element refers to a window, return an `hs.window` object for the element ; otherwise return nil\n\nNotes:\n * An element is considered a window by this method if it has an AXRole of AXWindow.",
        "def" : "hs._asm.axuielement:asHSWindow() -> hs.window object | nil",
        "stripped_doc" : [
          "If the element referes to a window, return an `hs.window` object for the element.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * An element is considered a window by this method if it has an AXRole of AXWindow."
        ],
        "signature" : "hs._asm.axuielement:asHSWindow() -> hs.window object | nil",
        "type" : "Method",
        "returns" : [
          " * if the element refers to a window, return an `hs.window` object for the element ; otherwise return nil",
          ""
        ],
        "name" : "asHSWindow",
        "desc" : "If the element referes to a window, return an `hs.window` object for the element."
      },
      {
        "doc" : "Returns a list of all the attributes supported by the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all attributes supported by the axuielementObject\n\nNotes:\n * Common attribute names can be found in the [hs._asm.axuielement.attributes](#attributes) tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table.",
        "def" : "hs._asm.axuielement:attributeNames() -> table",
        "stripped_doc" : [
          "Returns a list of all the attributes supported by the specified accessibility object.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * Common attribute names can be found in the [hs._asm.axuielement.attributes](#attributes) tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."
        ],
        "signature" : "hs._asm.axuielement:attributeNames() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all attributes supported by the axuielementObject",
          ""
        ],
        "name" : "attributeNames",
        "desc" : "Returns a list of all the attributes supported by the specified accessibility object."
      },
      {
        "doc" : "Returns the value of an accessibility object's attribute.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * the current value of the attribute, or nil if the attribute has no value",
        "def" : "hs._asm.axuielement:attributeValue(attribute) -> value",
        "stripped_doc" : [
          "Returns the value of an accessibility object's attribute.",
          ""
        ],
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:attributeValue(attribute) -> value",
        "type" : "Method",
        "returns" : [
          " * the current value of the attribute, or nil if the attribute has no value"
        ],
        "name" : "attributeValue",
        "desc" : "Returns the value of an accessibility object's attribute."
      },
      {
        "doc" : "Returns the count of the array of an accessibility object's attribute value.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * the number of items in the value for the attribute, if it is an array, or nil if the value is not an array.",
        "def" : "hs._asm.axuielement:attributeValueCount(attribute) -> integer",
        "stripped_doc" : [
          "Returns the count of the array of an accessibility object's attribute value.",
          ""
        ],
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:attributeValueCount(attribute) -> integer",
        "type" : "Method",
        "returns" : [
          " * the number of items in the value for the attribute, if it is an array, or nil if the value is not an array."
        ],
        "name" : "attributeValueCount",
        "desc" : "Returns the count of the array of an accessibility object's attribute value."
      },
      {
        "doc" : "Captures all of the available information for the accessibility object and its children and returns it in a table for inspection.\n\nParameters:\n * `callback` - a required function which should expect two arguments: a `msg` string specifying how the search ended, and a table contiaining the recorded information. `msg` will be \"completed\" when the search has completed normally (or reached the specified depth) and will contain a string starting with \"**\" if it terminates early for some reason (see Returns: section)\n * `depth`    - an optional integer, default `math.huge`, specifying the maximum depth from the intial accessibility object that should be visited to identify child elements and their attributes.\n * `withParents` - an optional boolean, default false, specifying whether or not an element's (or child's) attributes for `AXParent` and `AXTopLevelUIElement` should also be visited when identifying additional elements to include in the results table.\n\nReturns:\n * a `buildTreeObject` which contains metamethods allowing you to check to see if the build process has completed and cancel it early if desired:\n   * `buildTreeObject:isRunning()` - will return true if the traversal is still ongoing, or false if it has completed or been cancelled\n   * `buildTreeObject:cancel()`    - will cancel the currently running search and invoke the callback with the partial results already collected. The `msg` parameter for the calback will be \"** cancelled\".\n\nNotes:\n * this method utilizes coroutines to keep Hammerspoon responsive, but can be slow to complete if you do not specifiy a depth or start from an element that has a lot of children or has children with many elements (e.g. the application element for a web browser).\n\n * The results of this method are not generally intended to be used in production programs; it is organized more for exploratory purposes when trying to understand how elements are related within a given application or to determine what elements might be worth targetting with more specific queries.",
        "def" : "hs._asm.axuielement:buildTree(callback, [depth], [withParents]) -> buildTreeObject",
        "stripped_doc" : [
          "Captures all of the available information for the accessibility object and its children and returns it in a table for inspection.",
          ""
        ],
        "parameters" : [
          " * `callback` - a required function which should expect two arguments: a `msg` string specifying how the search ended, and a table contiaining the recorded information. `msg` will be \"completed\" when the search has completed normally (or reached the specified depth) and will contain a string starting with \"**\" if it terminates early for some reason (see Returns: section)",
          " * `depth`    - an optional integer, default `math.huge`, specifying the maximum depth from the intial accessibility object that should be visited to identify child elements and their attributes.",
          " * `withParents` - an optional boolean, default false, specifying whether or not an element's (or child's) attributes for `AXParent` and `AXTopLevelUIElement` should also be visited when identifying additional elements to include in the results table.",
          ""
        ],
        "notes" : [
          " * this method utilizes coroutines to keep Hammerspoon responsive, but can be slow to complete if you do not specifiy a depth or start from an element that has a lot of children or has children with many elements (e.g. the application element for a web browser).",
          "",
          " * The results of this method are not generally intended to be used in production programs; it is organized more for exploratory purposes when trying to understand how elements are related within a given application or to determine what elements might be worth targetting with more specific queries."
        ],
        "signature" : "hs._asm.axuielement:buildTree(callback, [depth], [withParents]) -> buildTreeObject",
        "type" : "Method",
        "returns" : [
          " * a `buildTreeObject` which contains metamethods allowing you to check to see if the build process has completed and cancel it early if desired:",
          "   * `buildTreeObject:isRunning()` - will return true if the traversal is still ongoing, or false if it has completed or been cancelled",
          "   * `buildTreeObject:cancel()`    - will cancel the currently running search and invoke the callback with the partial results already collected. The `msg` parameter for the calback will be \"** cancelled\".",
          ""
        ],
        "name" : "buildTree",
        "desc" : "Captures all of the available information for the accessibility object and its children and returns it in a table for inspection."
      },
      {
        "doc" : "Return a duplicate userdata reference to the Accessibility object.\n\nParameters:\n * None\n\nReturns:\n * a new userdata object representing a new reference to the Accessibility object.",
        "def" : "hs._asm.axuielement:copy() -> axuielementObject",
        "stripped_doc" : [
          "Return a duplicate userdata reference to the Accessibility object.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:copy() -> axuielementObject",
        "type" : "Method",
        "returns" : [
          " * a new userdata object representing a new reference to the Accessibility object."
        ],
        "name" : "copy",
        "desc" : "Return a duplicate userdata reference to the Accessibility object."
      },
      {
        "doc" : "Returns a list of the dynamic methods (short cuts) created by this module for the object\n\nParameters:\n * `keyValueTable` - an optional boolean, default false, indicating whether or not the result should be an array or a table of key-value pairs.\n\nReturns:\n * If `keyValueTable` is true, this method returns a table of key-value pairs with each key being the name of a dynamically generated method, and the value being the corresponding function.  Otherwise, this method returns an array of the dynamically generated method names.\n\nNotes:\n * the dynamically generated methods are described more fully in the reference documentation header, but basically provide shortcuts for getting and setting attribute values as well as perform actions supported by the Accessibility object the axuielementObject represents.",
        "def" : "hs._asm.axuielement:dynamicMethods([keyValueTable]) -> table",
        "stripped_doc" : [
          "Returns a list of the dynamic methods (short cuts) created by this module for the object",
          ""
        ],
        "parameters" : [
          " * `keyValueTable` - an optional boolean, default false, indicating whether or not the result should be an array or a table of key-value pairs.",
          ""
        ],
        "notes" : [
          " * the dynamically generated methods are described more fully in the reference documentation header, but basically provide shortcuts for getting and setting attribute values as well as perform actions supported by the Accessibility object the axuielementObject represents."
        ],
        "signature" : "hs._asm.axuielement:dynamicMethods([keyValueTable]) -> table",
        "type" : "Method",
        "returns" : [
          " * If `keyValueTable` is true, this method returns a table of key-value pairs with each key being the name of a dynamically generated method, and the value being the corresponding function.  Otherwise, this method returns an array of the dynamically generated method names.",
          ""
        ],
        "name" : "dynamicMethods",
        "desc" : "Returns a list of the dynamic methods (short cuts) created by this module for the object"
      },
      {
        "doc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates.\n\nParameters:\n * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters\n * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.\n\nReturns:\n * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.\n\nNotes:\n * This method can only be called on an axuielementObject that represents an application or the system-wide element (see [hs._asm.axuielement.systemWideElement](#systemWideElement)).\n\n * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.\n * If this method is called on an axuielementObject representing an application, the search is restricted to the application.\n * If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application.  See [hs._asm.axuielement.systemElementAtPosition](#systemElementAtPosition).",
        "def" : "hs._asm.axuielement:elementAtPosition(x, y | { x, y }) -> axuielementObject",
        "stripped_doc" : [
          "Returns the accessibility object at the specified position in top-left relative screen coordinates.",
          ""
        ],
        "parameters" : [
          " * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters",
          " * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.",
          ""
        ],
        "notes" : [
          " * This method can only be called on an axuielementObject that represents an application or the system-wide element (see [hs._asm.axuielement.systemWideElement](#systemWideElement)).",
          "",
          " * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.",
          " * If this method is called on an axuielementObject representing an application, the search is restricted to the application.",
          " * If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application.  See [hs._asm.axuielement.systemElementAtPosition](#systemElementAtPosition)."
        ],
        "signature" : "hs._asm.axuielement:elementAtPosition(x, y | { x, y }) -> axuielementObject",
        "type" : "Method",
        "returns" : [
          " * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.",
          ""
        ],
        "name" : "elementAtPosition",
        "desc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates."
      },
      {
        "doc" : "Returns whether the specified accessibility object's attribute can be modified.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * a boolean value indicating whether or not the value of the parameter can be modified.",
        "def" : "hs._asm.axuielement:isAttributeSettable(attribute) -> boolean",
        "stripped_doc" : [
          "Returns whether the specified accessibility object's attribute can be modified.",
          ""
        ],
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:isAttributeSettable(attribute) -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the value of the parameter can be modified."
        ],
        "name" : "isAttributeSettable",
        "desc" : "Returns whether the specified accessibility object's attribute can be modified."
      },
      {
        "doc" : "Returns whether the specified accessibility object is still valid.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the accessibility object is still valid.",
        "def" : "hs._asm.axuielement:isValid() -> boolean",
        "stripped_doc" : [
          "Returns whether the specified accessibility object is still valid.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:isValid() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the accessibility object is still valid."
        ],
        "name" : "isValid",
        "desc" : "Returns whether the specified accessibility object is still valid."
      },
      {
        "doc" : "Returns a list of all the parameterized attributes supported by the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all parameterized attributes supported by the axuielementObject",
        "def" : "hs._asm.axuielement:parameterizedAttributeNames() -> table",
        "stripped_doc" : [
          "Returns a list of all the parameterized attributes supported by the specified accessibility object.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:parameterizedAttributeNames() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all parameterized attributes supported by the axuielementObject"
        ],
        "name" : "parameterizedAttributeNames",
        "desc" : "Returns a list of all the parameterized attributes supported by the specified accessibility object."
      },
      {
        "doc" : "Returns the value of an accessibility object's parameterized attribute.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames).\n * `parameter` - the parameter\n\nReturns:\n * the current value of the parameterized attribute, or nil if it has no value\n\nNotes:\n * Parameterized attribute support is still considered experimental and not fully supported yet.  Use with caution.",
        "def" : "hs._asm.axuielement:parameterizedAttributeValue(attribute, parameter) -> value",
        "stripped_doc" : [
          "Returns the value of an accessibility object's parameterized attribute.",
          ""
        ],
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames).",
          " * `parameter` - the parameter",
          ""
        ],
        "notes" : [
          " * Parameterized attribute support is still considered experimental and not fully supported yet.  Use with caution."
        ],
        "signature" : "hs._asm.axuielement:parameterizedAttributeValue(attribute, parameter) -> value",
        "type" : "Method",
        "returns" : [
          " * the current value of the parameterized attribute, or nil if it has no value",
          ""
        ],
        "name" : "parameterizedAttributeValue",
        "desc" : "Returns the value of an accessibility object's parameterized attribute."
      },
      {
        "doc" : "Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object.\n\nParameters:\n * None\n\nReturns:\n * a table containing this object and 0 or more parent objects representing the path from the root object to this element.\n\nNotes:\n * this object will always exist as the last element in the table (e.g. at `table[#table]`) with its most imemdiate parent at `#table - 1`, etc. until the rootmost object for this element is reached at index position 1.\n\n * an axuielement object representing an application or the system wide object is its own rootmost object and will return a table containing only itself (i.e. `#table` will equal 1)",
        "def" : "hs._asm.axuielement:path() -> table",
        "stripped_doc" : [
          "Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * this object will always exist as the last element in the table (e.g. at `table[#table]`) with its most imemdiate parent at `#table - 1`, etc. until the rootmost object for this element is reached at index position 1.",
          "",
          " * an axuielement object representing an application or the system wide object is its own rootmost object and will return a table containing only itself (i.e. `#table` will equal 1)"
        ],
        "signature" : "hs._asm.axuielement:path() -> table",
        "type" : "Method",
        "returns" : [
          " * a table containing this object and 0 or more parent objects representing the path from the root object to this element.",
          ""
        ],
        "name" : "path",
        "desc" : "Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object."
      },
      {
        "doc" : "Requests that the specified accessibility object perform the specified action.\n\nParameters:\n * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).\n\nReturns:\n * if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false, otherwise returns nil on error.\n\nNotes:\n * The return value only suggests success or failure, but is not a guarantee.  The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject).  Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil.",
        "def" : "hs._asm.axuielement:performAction(action) -> axuielement | false | nil",
        "stripped_doc" : [
          "Requests that the specified accessibility object perform the specified action.",
          ""
        ],
        "parameters" : [
          " * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).",
          ""
        ],
        "notes" : [
          " * The return value only suggests success or failure, but is not a guarantee.  The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject).  Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil."
        ],
        "signature" : "hs._asm.axuielement:performAction(action) -> axuielement | false | nil",
        "type" : "Method",
        "returns" : [
          " * if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false, otherwise returns nil on error.",
          ""
        ],
        "name" : "performAction",
        "desc" : "Requests that the specified accessibility object perform the specified action."
      },
      {
        "doc" : "Returns the process ID associated with the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * the process ID for the application to which the accessibility object ultimately belongs.",
        "def" : "hs._asm.axuielement:pid() -> integer",
        "stripped_doc" : [
          "Returns the process ID associated with the specified accessibility object.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:pid() -> integer",
        "type" : "Method",
        "returns" : [
          " * the process ID for the application to which the accessibility object ultimately belongs."
        ],
        "name" : "pid",
        "desc" : "Returns the process ID associated with the specified accessibility object."
      },
      {
        "doc" : "Sets the accessibility object's attribute to the specified value.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n * `value`     - the value to assign to the attribute\n\nReturns:\n * the axuielementObject on success; nil if the attribute could not be set.\n\nNotes:\n * This is still somewhat experimental and needs more testing; use with caution.",
        "def" : "hs._asm.axuielement:setAttributeValue(attribute, value) -> axuielementObject | nil",
        "stripped_doc" : [
          "Sets the accessibility object's attribute to the specified value.",
          ""
        ],
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          " * `value`     - the value to assign to the attribute",
          ""
        ],
        "notes" : [
          " * This is still somewhat experimental and needs more testing; use with caution."
        ],
        "signature" : "hs._asm.axuielement:setAttributeValue(attribute, value) -> axuielementObject | nil",
        "type" : "Method",
        "returns" : [
          " * the axuielementObject on success; nil if the attribute could not be set.",
          ""
        ],
        "name" : "setAttributeValue",
        "desc" : "Sets the accessibility object's attribute to the specified value."
      },
      {
        "doc" : "Sets the timeout value used accessibility queries performed from this element.\n\nParameters:\n * `value` - the number of seconds for the new timeout value. Must be 0 or positive.\n\nReturns:\n * the axuielementObject\n\nNotes:\n * To change the global timeout affecting all queries on elements which do not have a specific timeout set, use this method on the systemwide element (see [hs._asm.axuielement.systemWideElement](#systemWideElement).\n * Changing the timeout value for an axuielement object only changes the value for that specific element -- other axuieleement objects that may refere to the identical accessibiity item are not affected.\n\n * Setting the value to 0.0 resets the timeout -- if applied to the `systemWideElement`, the global default will be reset to its default value; if applied to another axuielement object, the timeout will be reset to the current global value as applied to the systemWideElement.",
        "def" : "hs._asm.axuielement:setTimeout(value) -> axuielementObject",
        "stripped_doc" : [
          "Sets the timeout value used accessibility queries performed from this element.",
          ""
        ],
        "parameters" : [
          " * `value` - the number of seconds for the new timeout value. Must be 0 or positive.",
          ""
        ],
        "notes" : [
          " * To change the global timeout affecting all queries on elements which do not have a specific timeout set, use this method on the systemwide element (see [hs._asm.axuielement.systemWideElement](#systemWideElement).",
          " * Changing the timeout value for an axuielement object only changes the value for that specific element -- other axuieleement objects that may refere to the identical accessibiity item are not affected.",
          "",
          " * Setting the value to 0.0 resets the timeout -- if applied to the `systemWideElement`, the global default will be reset to its default value; if applied to another axuielement object, the timeout will be reset to the current global value as applied to the systemWideElement."
        ],
        "signature" : "hs._asm.axuielement:setTimeout(value) -> axuielementObject",
        "type" : "Method",
        "returns" : [
          " * the axuielementObject",
          ""
        ],
        "name" : "setTimeout",
        "desc" : "Sets the timeout value used accessibility queries performed from this element."
      }
    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "Returns a list of the dynamic methods (short cuts) created by this module for the object\n\nParameters:\n * `keyValueTable` - an optional boolean, default false, indicating whether or not the result should be an array or a table of key-value pairs.\n\nReturns:\n * If `keyValueTable` is true, this method returns a table of key-value pairs with each key being the name of a dynamically generated method, and the value being the corresponding function.  Otherwise, this method returns an array of the dynamically generated method names.\n\nNotes:\n * the dynamically generated methods are described more fully in the reference documentation header, but basically provide shortcuts for getting and setting attribute values as well as perform actions supported by the Accessibility object the axuielementObject represents.",
        "def" : "hs._asm.axuielement:dynamicMethods([keyValueTable]) -> table",
        "stripped_doc" : [
          "Returns a list of the dynamic methods (short cuts) created by this module for the object",
          ""
        ],
        "parameters" : [
          " * `keyValueTable` - an optional boolean, default false, indicating whether or not the result should be an array or a table of key-value pairs.",
          ""
        ],
        "notes" : [
          " * the dynamically generated methods are described more fully in the reference documentation header, but basically provide shortcuts for getting and setting attribute values as well as perform actions supported by the Accessibility object the axuielementObject represents."
        ],
        "signature" : "hs._asm.axuielement:dynamicMethods([keyValueTable]) -> table",
        "type" : "Method",
        "returns" : [
          " * If `keyValueTable` is true, this method returns a table of key-value pairs with each key being the name of a dynamically generated method, and the value being the corresponding function.  Otherwise, this method returns an array of the dynamically generated method names.",
          ""
        ],
        "name" : "dynamicMethods",
        "desc" : "Returns a list of the dynamic methods (short cuts) created by this module for the object"
      },
      {
        "doc" : "Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object.\n\nParameters:\n * None\n\nReturns:\n * a table containing this object and 0 or more parent objects representing the path from the root object to this element.\n\nNotes:\n * this object will always exist as the last element in the table (e.g. at `table[#table]`) with its most imemdiate parent at `#table - 1`, etc. until the rootmost object for this element is reached at index position 1.\n\n * an axuielement object representing an application or the system wide object is its own rootmost object and will return a table containing only itself (i.e. `#table` will equal 1)",
        "def" : "hs._asm.axuielement:path() -> table",
        "stripped_doc" : [
          "Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * this object will always exist as the last element in the table (e.g. at `table[#table]`) with its most imemdiate parent at `#table - 1`, etc. until the rootmost object for this element is reached at index position 1.",
          "",
          " * an axuielement object representing an application or the system wide object is its own rootmost object and will return a table containing only itself (i.e. `#table` will equal 1)"
        ],
        "signature" : "hs._asm.axuielement:path() -> table",
        "type" : "Method",
        "returns" : [
          " * a table containing this object and 0 or more parent objects representing the path from the root object to this element.",
          ""
        ],
        "name" : "path",
        "desc" : "Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object."
      },
      {
        "doc" : "Captures all of the available information for the accessibility object and its children and returns it in a table for inspection.\n\nParameters:\n * `callback` - a required function which should expect two arguments: a `msg` string specifying how the search ended, and a table contiaining the recorded information. `msg` will be \"completed\" when the search has completed normally (or reached the specified depth) and will contain a string starting with \"**\" if it terminates early for some reason (see Returns: section)\n * `depth`    - an optional integer, default `math.huge`, specifying the maximum depth from the intial accessibility object that should be visited to identify child elements and their attributes.\n * `withParents` - an optional boolean, default false, specifying whether or not an element's (or child's) attributes for `AXParent` and `AXTopLevelUIElement` should also be visited when identifying additional elements to include in the results table.\n\nReturns:\n * a `buildTreeObject` which contains metamethods allowing you to check to see if the build process has completed and cancel it early if desired:\n   * `buildTreeObject:isRunning()` - will return true if the traversal is still ongoing, or false if it has completed or been cancelled\n   * `buildTreeObject:cancel()`    - will cancel the currently running search and invoke the callback with the partial results already collected. The `msg` parameter for the calback will be \"** cancelled\".\n\nNotes:\n * this method utilizes coroutines to keep Hammerspoon responsive, but can be slow to complete if you do not specifiy a depth or start from an element that has a lot of children or has children with many elements (e.g. the application element for a web browser).\n\n * The results of this method are not generally intended to be used in production programs; it is organized more for exploratory purposes when trying to understand how elements are related within a given application or to determine what elements might be worth targetting with more specific queries.",
        "def" : "hs._asm.axuielement:buildTree(callback, [depth], [withParents]) -> buildTreeObject",
        "stripped_doc" : [
          "Captures all of the available information for the accessibility object and its children and returns it in a table for inspection.",
          ""
        ],
        "parameters" : [
          " * `callback` - a required function which should expect two arguments: a `msg` string specifying how the search ended, and a table contiaining the recorded information. `msg` will be \"completed\" when the search has completed normally (or reached the specified depth) and will contain a string starting with \"**\" if it terminates early for some reason (see Returns: section)",
          " * `depth`    - an optional integer, default `math.huge`, specifying the maximum depth from the intial accessibility object that should be visited to identify child elements and their attributes.",
          " * `withParents` - an optional boolean, default false, specifying whether or not an element's (or child's) attributes for `AXParent` and `AXTopLevelUIElement` should also be visited when identifying additional elements to include in the results table.",
          ""
        ],
        "notes" : [
          " * this method utilizes coroutines to keep Hammerspoon responsive, but can be slow to complete if you do not specifiy a depth or start from an element that has a lot of children or has children with many elements (e.g. the application element for a web browser).",
          "",
          " * The results of this method are not generally intended to be used in production programs; it is organized more for exploratory purposes when trying to understand how elements are related within a given application or to determine what elements might be worth targetting with more specific queries."
        ],
        "signature" : "hs._asm.axuielement:buildTree(callback, [depth], [withParents]) -> buildTreeObject",
        "type" : "Method",
        "returns" : [
          " * a `buildTreeObject` which contains metamethods allowing you to check to see if the build process has completed and cancel it early if desired:",
          "   * `buildTreeObject:isRunning()` - will return true if the traversal is still ongoing, or false if it has completed or been cancelled",
          "   * `buildTreeObject:cancel()`    - will cancel the currently running search and invoke the callback with the partial results already collected. The `msg` parameter for the calback will be \"** cancelled\".",
          ""
        ],
        "name" : "buildTree",
        "desc" : "Captures all of the available information for the accessibility object and its children and returns it in a table for inspection."
      },
      {
        "doc" : "Return a duplicate userdata reference to the Accessibility object.\n\nParameters:\n * None\n\nReturns:\n * a new userdata object representing a new reference to the Accessibility object.",
        "def" : "hs._asm.axuielement:copy() -> axuielementObject",
        "stripped_doc" : [
          "Return a duplicate userdata reference to the Accessibility object.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:copy() -> axuielementObject",
        "type" : "Method",
        "returns" : [
          " * a new userdata object representing a new reference to the Accessibility object."
        ],
        "name" : "copy",
        "desc" : "Return a duplicate userdata reference to the Accessibility object."
      },
      {
        "doc" : "Returns a list of all the attributes supported by the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all attributes supported by the axuielementObject\n\nNotes:\n * Common attribute names can be found in the [hs._asm.axuielement.attributes](#attributes) tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table.",
        "def" : "hs._asm.axuielement:attributeNames() -> table",
        "stripped_doc" : [
          "Returns a list of all the attributes supported by the specified accessibility object.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * Common attribute names can be found in the [hs._asm.axuielement.attributes](#attributes) tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."
        ],
        "signature" : "hs._asm.axuielement:attributeNames() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all attributes supported by the axuielementObject",
          ""
        ],
        "name" : "attributeNames",
        "desc" : "Returns a list of all the attributes supported by the specified accessibility object."
      },
      {
        "doc" : "Returns a list of all the actions the specified accessibility object can perform.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all actions supported by the axuielementObject\n\nNotes:\n * Common action names can be found in the [hs._asm.axuielement.actions](#actions) table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table.",
        "def" : "hs._asm.axuielement:actionNames() -> table",
        "stripped_doc" : [
          "Returns a list of all the actions the specified accessibility object can perform.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * Common action names can be found in the [hs._asm.axuielement.actions](#actions) table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."
        ],
        "signature" : "hs._asm.axuielement:actionNames() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all actions supported by the axuielementObject",
          ""
        ],
        "name" : "actionNames",
        "desc" : "Returns a list of all the actions the specified accessibility object can perform."
      },
      {
        "doc" : "Returns a localized description of the specified accessibility object's action.\n\nParameters:\n * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).\n\nReturns:\n * a string containing a description of the object's action\n\nNotes:\n * The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers.",
        "def" : "hs._asm.axuielement:actionDescription(action) -> string",
        "stripped_doc" : [
          "Returns a localized description of the specified accessibility object's action.",
          ""
        ],
        "parameters" : [
          " * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).",
          ""
        ],
        "notes" : [
          " * The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers."
        ],
        "signature" : "hs._asm.axuielement:actionDescription(action) -> string",
        "type" : "Method",
        "returns" : [
          " * a string containing a description of the object's action",
          ""
        ],
        "name" : "actionDescription",
        "desc" : "Returns a localized description of the specified accessibility object's action."
      },
      {
        "doc" : "Returns the value of an accessibility object's attribute.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * the current value of the attribute, or nil if the attribute has no value",
        "def" : "hs._asm.axuielement:attributeValue(attribute) -> value",
        "stripped_doc" : [
          "Returns the value of an accessibility object's attribute.",
          ""
        ],
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:attributeValue(attribute) -> value",
        "type" : "Method",
        "returns" : [
          " * the current value of the attribute, or nil if the attribute has no value"
        ],
        "name" : "attributeValue",
        "desc" : "Returns the value of an accessibility object's attribute."
      },
      {
        "doc" : "Returns a table containing key-value pairs for all attributes of the accessibility object.\n\nParameters:\n * `includeErrors` - an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.\n\nReturns:\n * a table with key-value pairs corresponding to the attributes of the accessibility object.",
        "def" : "hs._asm.axuielement:allAttributeValues([includeErrors]) -> table",
        "stripped_doc" : [
          "Returns a table containing key-value pairs for all attributes of the accessibility object.",
          ""
        ],
        "parameters" : [
          " * `includeErrors` - an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:allAttributeValues([includeErrors]) -> table",
        "type" : "Method",
        "returns" : [
          " * a table with key-value pairs corresponding to the attributes of the accessibility object."
        ],
        "name" : "allAttributeValues",
        "desc" : "Returns a table containing key-value pairs for all attributes of the accessibility object."
      },
      {
        "doc" : "Returns the count of the array of an accessibility object's attribute value.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * the number of items in the value for the attribute, if it is an array, or nil if the value is not an array.",
        "def" : "hs._asm.axuielement:attributeValueCount(attribute) -> integer",
        "stripped_doc" : [
          "Returns the count of the array of an accessibility object's attribute value.",
          ""
        ],
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:attributeValueCount(attribute) -> integer",
        "type" : "Method",
        "returns" : [
          " * the number of items in the value for the attribute, if it is an array, or nil if the value is not an array."
        ],
        "name" : "attributeValueCount",
        "desc" : "Returns the count of the array of an accessibility object's attribute value."
      },
      {
        "doc" : "Returns a list of all the parameterized attributes supported by the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all parameterized attributes supported by the axuielementObject",
        "def" : "hs._asm.axuielement:parameterizedAttributeNames() -> table",
        "stripped_doc" : [
          "Returns a list of all the parameterized attributes supported by the specified accessibility object.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:parameterizedAttributeNames() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all parameterized attributes supported by the axuielementObject"
        ],
        "name" : "parameterizedAttributeNames",
        "desc" : "Returns a list of all the parameterized attributes supported by the specified accessibility object."
      },
      {
        "doc" : "Returns whether the specified accessibility object's attribute can be modified.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * a boolean value indicating whether or not the value of the parameter can be modified.",
        "def" : "hs._asm.axuielement:isAttributeSettable(attribute) -> boolean",
        "stripped_doc" : [
          "Returns whether the specified accessibility object's attribute can be modified.",
          ""
        ],
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:isAttributeSettable(attribute) -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the value of the parameter can be modified."
        ],
        "name" : "isAttributeSettable",
        "desc" : "Returns whether the specified accessibility object's attribute can be modified."
      },
      {
        "doc" : "Returns whether the specified accessibility object is still valid.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the accessibility object is still valid.",
        "def" : "hs._asm.axuielement:isValid() -> boolean",
        "stripped_doc" : [
          "Returns whether the specified accessibility object is still valid.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:isValid() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the accessibility object is still valid."
        ],
        "name" : "isValid",
        "desc" : "Returns whether the specified accessibility object is still valid."
      },
      {
        "doc" : "Returns the process ID associated with the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * the process ID for the application to which the accessibility object ultimately belongs.",
        "def" : "hs._asm.axuielement:pid() -> integer",
        "stripped_doc" : [
          "Returns the process ID associated with the specified accessibility object.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:pid() -> integer",
        "type" : "Method",
        "returns" : [
          " * the process ID for the application to which the accessibility object ultimately belongs."
        ],
        "name" : "pid",
        "desc" : "Returns the process ID associated with the specified accessibility object."
      },
      {
        "doc" : "Requests that the specified accessibility object perform the specified action.\n\nParameters:\n * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).\n\nReturns:\n * if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false, otherwise returns nil on error.\n\nNotes:\n * The return value only suggests success or failure, but is not a guarantee.  The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject).  Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil.",
        "def" : "hs._asm.axuielement:performAction(action) -> axuielement | false | nil",
        "stripped_doc" : [
          "Requests that the specified accessibility object perform the specified action.",
          ""
        ],
        "parameters" : [
          " * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).",
          ""
        ],
        "notes" : [
          " * The return value only suggests success or failure, but is not a guarantee.  The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject).  Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil."
        ],
        "signature" : "hs._asm.axuielement:performAction(action) -> axuielement | false | nil",
        "type" : "Method",
        "returns" : [
          " * if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false, otherwise returns nil on error.",
          ""
        ],
        "name" : "performAction",
        "desc" : "Requests that the specified accessibility object perform the specified action."
      },
      {
        "doc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates.\n\nParameters:\n * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters\n * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.\n\nReturns:\n * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.\n\nNotes:\n * This method can only be called on an axuielementObject that represents an application or the system-wide element (see [hs._asm.axuielement.systemWideElement](#systemWideElement)).\n\n * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.\n * If this method is called on an axuielementObject representing an application, the search is restricted to the application.\n * If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application.  See [hs._asm.axuielement.systemElementAtPosition](#systemElementAtPosition).",
        "def" : "hs._asm.axuielement:elementAtPosition(x, y | { x, y }) -> axuielementObject",
        "stripped_doc" : [
          "Returns the accessibility object at the specified position in top-left relative screen coordinates.",
          ""
        ],
        "parameters" : [
          " * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters",
          " * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.",
          ""
        ],
        "notes" : [
          " * This method can only be called on an axuielementObject that represents an application or the system-wide element (see [hs._asm.axuielement.systemWideElement](#systemWideElement)).",
          "",
          " * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.",
          " * If this method is called on an axuielementObject representing an application, the search is restricted to the application.",
          " * If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application.  See [hs._asm.axuielement.systemElementAtPosition](#systemElementAtPosition)."
        ],
        "signature" : "hs._asm.axuielement:elementAtPosition(x, y | { x, y }) -> axuielementObject",
        "type" : "Method",
        "returns" : [
          " * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.",
          ""
        ],
        "name" : "elementAtPosition",
        "desc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates."
      },
      {
        "doc" : "Returns the value of an accessibility object's parameterized attribute.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames).\n * `parameter` - the parameter\n\nReturns:\n * the current value of the parameterized attribute, or nil if it has no value\n\nNotes:\n * Parameterized attribute support is still considered experimental and not fully supported yet.  Use with caution.",
        "def" : "hs._asm.axuielement:parameterizedAttributeValue(attribute, parameter) -> value",
        "stripped_doc" : [
          "Returns the value of an accessibility object's parameterized attribute.",
          ""
        ],
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames).",
          " * `parameter` - the parameter",
          ""
        ],
        "notes" : [
          " * Parameterized attribute support is still considered experimental and not fully supported yet.  Use with caution."
        ],
        "signature" : "hs._asm.axuielement:parameterizedAttributeValue(attribute, parameter) -> value",
        "type" : "Method",
        "returns" : [
          " * the current value of the parameterized attribute, or nil if it has no value",
          ""
        ],
        "name" : "parameterizedAttributeValue",
        "desc" : "Returns the value of an accessibility object's parameterized attribute."
      },
      {
        "doc" : "Sets the accessibility object's attribute to the specified value.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n * `value`     - the value to assign to the attribute\n\nReturns:\n * the axuielementObject on success; nil if the attribute could not be set.\n\nNotes:\n * This is still somewhat experimental and needs more testing; use with caution.",
        "def" : "hs._asm.axuielement:setAttributeValue(attribute, value) -> axuielementObject | nil",
        "stripped_doc" : [
          "Sets the accessibility object's attribute to the specified value.",
          ""
        ],
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          " * `value`     - the value to assign to the attribute",
          ""
        ],
        "notes" : [
          " * This is still somewhat experimental and needs more testing; use with caution."
        ],
        "signature" : "hs._asm.axuielement:setAttributeValue(attribute, value) -> axuielementObject | nil",
        "type" : "Method",
        "returns" : [
          " * the axuielementObject on success; nil if the attribute could not be set.",
          ""
        ],
        "name" : "setAttributeValue",
        "desc" : "Sets the accessibility object's attribute to the specified value."
      },
      {
        "doc" : "If the element referes to an application, return an `hs.application` object for the element.\n\nParameters:\n * None\n\nReturns:\n * if the element refers to an application, return an `hs.application` object for the element ; otherwise return nil\n\nNotes:\n * An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid).",
        "def" : "hs._asm.axuielement:asHSApplication() -> hs.application object | nil",
        "stripped_doc" : [
          "If the element referes to an application, return an `hs.application` object for the element.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid)."
        ],
        "signature" : "hs._asm.axuielement:asHSApplication() -> hs.application object | nil",
        "type" : "Method",
        "returns" : [
          " * if the element refers to an application, return an `hs.application` object for the element ; otherwise return nil",
          ""
        ],
        "name" : "asHSApplication",
        "desc" : "If the element referes to an application, return an `hs.application` object for the element."
      },
      {
        "doc" : "If the element referes to a window, return an `hs.window` object for the element.\n\nParameters:\n * None\n\nReturns:\n * if the element refers to a window, return an `hs.window` object for the element ; otherwise return nil\n\nNotes:\n * An element is considered a window by this method if it has an AXRole of AXWindow.",
        "def" : "hs._asm.axuielement:asHSWindow() -> hs.window object | nil",
        "stripped_doc" : [
          "If the element referes to a window, return an `hs.window` object for the element.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * An element is considered a window by this method if it has an AXRole of AXWindow."
        ],
        "signature" : "hs._asm.axuielement:asHSWindow() -> hs.window object | nil",
        "type" : "Method",
        "returns" : [
          " * if the element refers to a window, return an `hs.window` object for the element ; otherwise return nil",
          ""
        ],
        "name" : "asHSWindow",
        "desc" : "If the element referes to a window, return an `hs.window` object for the element."
      },
      {
        "doc" : "Sets the timeout value used accessibility queries performed from this element.\n\nParameters:\n * `value` - the number of seconds for the new timeout value. Must be 0 or positive.\n\nReturns:\n * the axuielementObject\n\nNotes:\n * To change the global timeout affecting all queries on elements which do not have a specific timeout set, use this method on the systemwide element (see [hs._asm.axuielement.systemWideElement](#systemWideElement).\n * Changing the timeout value for an axuielement object only changes the value for that specific element -- other axuieleement objects that may refere to the identical accessibiity item are not affected.\n\n * Setting the value to 0.0 resets the timeout -- if applied to the `systemWideElement`, the global default will be reset to its default value; if applied to another axuielement object, the timeout will be reset to the current global value as applied to the systemWideElement.",
        "def" : "hs._asm.axuielement:setTimeout(value) -> axuielementObject",
        "stripped_doc" : [
          "Sets the timeout value used accessibility queries performed from this element.",
          ""
        ],
        "parameters" : [
          " * `value` - the number of seconds for the new timeout value. Must be 0 or positive.",
          ""
        ],
        "notes" : [
          " * To change the global timeout affecting all queries on elements which do not have a specific timeout set, use this method on the systemwide element (see [hs._asm.axuielement.systemWideElement](#systemWideElement).",
          " * Changing the timeout value for an axuielement object only changes the value for that specific element -- other axuieleement objects that may refere to the identical accessibiity item are not affected.",
          "",
          " * Setting the value to 0.0 resets the timeout -- if applied to the `systemWideElement`, the global default will be reset to its default value; if applied to another axuielement object, the timeout will be reset to the current global value as applied to the systemWideElement."
        ],
        "signature" : "hs._asm.axuielement:setTimeout(value) -> axuielementObject",
        "type" : "Method",
        "returns" : [
          " * the axuielementObject",
          ""
        ],
        "name" : "setTimeout",
        "desc" : "Sets the timeout value used accessibility queries performed from this element."
      }
    ],
    "name" : "hs._asm.axuielement"
  },
  {
    "Constant" : [
      {
        "doc" : "A table of common accessibility object notification names, provided for reference.\n\nNotes:\n * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them.",
        "def" : "hs._asm.axuielement.observer.notifications[]",
        "stripped_doc" : [
          "A table of common accessibility object notification names, provided for reference.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them."
        ],
        "signature" : "hs._asm.axuielement.observer.notifications[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "notifications",
        "desc" : "A table of common accessibility object notification names, provided for reference."
      }
    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "type" : "Module",
    "desc" : "This submodule allows you to create observers for accessibility elements and be notified when they trigger notifications. Not all notifications are supported by all elements and not all elements support notifications, so some trial and error will be necessary, but for compliant applications, this can allow your code to be notified when an application's user interface changes in some way.",
    "Constructor" : [
      {
        "doc" : "Creates a new observer object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.\n\nNotes:\n * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`\n * If you already have an `hs._asm.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs._asm.axuielement:pid()`.",
        "def" : "hs._asm.axuielement.observer.new(pid) -> observerObject",
        "stripped_doc" : [
          "Creates a new observer object for the application with the specified process ID.",
          ""
        ],
        "parameters" : [
          " * `pid` - the process ID of the application.",
          ""
        ],
        "notes" : [
          " * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`",
          " * If you already have an `hs._asm.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs._asm.axuielement:pid()`."
        ],
        "signature" : "hs._asm.axuielement.observer.new(pid) -> observerObject",
        "type" : "Constructor",
        "returns" : [
          " * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.",
          ""
        ],
        "name" : "new",
        "desc" : "Creates a new observer object for the application with the specified process ID."
      }
    ],
    "doc" : "This submodule allows you to create observers for accessibility elements and be notified when they trigger notifications. Not all notifications are supported by all elements and not all elements support notifications, so some trial and error will be necessary, but for compliant applications, this can allow your code to be notified when an application's user interface changes in some way.\n\nThis is very much a work in progress, so bugs and comments are welcome.",
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "A table of common accessibility object notification names, provided for reference.\n\nNotes:\n * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them.",
        "def" : "hs._asm.axuielement.observer.notifications[]",
        "stripped_doc" : [
          "A table of common accessibility object notification names, provided for reference.",
          ""
        ],
        "parameters" : [

        ],
        "notes" : [
          " * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them."
        ],
        "signature" : "hs._asm.axuielement.observer.notifications[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "notifications",
        "desc" : "A table of common accessibility object notification names, provided for reference."
      },
      {
        "doc" : "Creates a new observer object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.\n\nNotes:\n * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`\n * If you already have an `hs._asm.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs._asm.axuielement:pid()`.",
        "def" : "hs._asm.axuielement.observer.new(pid) -> observerObject",
        "stripped_doc" : [
          "Creates a new observer object for the application with the specified process ID.",
          ""
        ],
        "parameters" : [
          " * `pid` - the process ID of the application.",
          ""
        ],
        "notes" : [
          " * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`",
          " * If you already have an `hs._asm.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs._asm.axuielement:pid()`."
        ],
        "signature" : "hs._asm.axuielement.observer.new(pid) -> observerObject",
        "type" : "Constructor",
        "returns" : [
          " * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.",
          ""
        ],
        "name" : "new",
        "desc" : "Creates a new observer object for the application with the specified process ID."
      },
      {
        "doc" : "Registers the specified notification for the specified accesibility element with the observer.\n\nParameters:\n * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be registered\n\nNotes:\n * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.\n * if the specified element and notification string are already registered, this method does nothing.\n * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs._asm.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them.",
        "def" : "hs._asm.axuielement.observer:addWatcher(element, notification) -> observerObject",
        "stripped_doc" : [
          "Registers the specified notification for the specified accesibility element with the observer.",
          ""
        ],
        "parameters" : [
          " * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.",
          " * `notification` - a string specifying the notification.",
          ""
        ],
        "notes" : [
          " * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.",
          " * if the specified element and notification string are already registered, this method does nothing.",
          " * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs._asm.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them."
        ],
        "signature" : "hs._asm.axuielement.observer:addWatcher(element, notification) -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject; generates an error if watcher cannot be registered",
          ""
        ],
        "name" : "addWatcher",
        "desc" : "Registers the specified notification for the specified accesibility element with the observer."
      },
      {
        "doc" : "Get or set the callback for the observer.\n\nParameters:\n * `fn` - a function, or an explicit nil to remove, specifying the callback to the observer will invoke when the assigned elements generate notifications.\n\nReturns:\n * If an argument is provided, the observerObject; otherwise the current value.\n\nNotes:\n * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:\n   * the observerObject itself\n   * the `hs._asm.axuielement` object for the accessibility element which generated the notification\n   * a string specifying the specific notification which was received\n   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided.",
        "def" : "hs._asm.axuielement.observer:callback([fn | nil]) -> observerObject | fn | nil",
        "stripped_doc" : [
          "Get or set the callback for the observer.",
          ""
        ],
        "parameters" : [
          " * `fn` - a function, or an explicit nil to remove, specifying the callback to the observer will invoke when the assigned elements generate notifications.",
          ""
        ],
        "notes" : [
          " * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:",
          "   * the observerObject itself",
          "   * the `hs._asm.axuielement` object for the accessibility element which generated the notification",
          "   * a string specifying the specific notification which was received",
          "   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided."
        ],
        "signature" : "hs._asm.axuielement.observer:callback([fn | nil]) -> observerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the observerObject; otherwise the current value.",
          ""
        ],
        "name" : "callback",
        "desc" : "Get or set the callback for the observer."
      },
      {
        "doc" : "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the observer is currently active.",
        "def" : "hs._asm.axuielement.observer:isRunning() -> boolean",
        "stripped_doc" : [
          "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.observer:isRunning() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the observer is currently active."
        ],
        "name" : "isRunning",
        "desc" : "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks."
      },
      {
        "doc" : "Unregisters the specified notification for the specified accessibility element from the observer.\n\nParameters:\n * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be unregistered\n\nNotes:\n * if the specified element and notification string are not currently registered with the observer, this method does nothing.",
        "def" : "hs._asm.axuielement.observer:removeWatcher(element, notification) -> observerObject",
        "stripped_doc" : [
          "Unregisters the specified notification for the specified accessibility element from the observer.",
          ""
        ],
        "parameters" : [
          " * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.",
          " * `notification` - a string specifying the notification.",
          ""
        ],
        "notes" : [
          " * if the specified element and notification string are not currently registered with the observer, this method does nothing."
        ],
        "signature" : "hs._asm.axuielement.observer:removeWatcher(element, notification) -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject; generates an error if watcher cannot be unregistered",
          ""
        ],
        "name" : "removeWatcher",
        "desc" : "Unregisters the specified notification for the specified accessibility element from the observer."
      },
      {
        "doc" : "Start observing the application and trigger callbacks for the elements and notifications assigned.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is already running",
        "def" : "hs._asm.axuielement.observer:start() -> observerObject",
        "stripped_doc" : [
          "Start observing the application and trigger callbacks for the elements and notifications assigned.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * This method does nothing if the observer is already running"
        ],
        "signature" : "hs._asm.axuielement.observer:start() -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject",
          ""
        ],
        "name" : "start",
        "desc" : "Start observing the application and trigger callbacks for the elements and notifications assigned."
      },
      {
        "doc" : "Stop observing the application; no further callbacks will be generated.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is not currently running",
        "def" : "hs._asm.axuielement.observer:stop() -> observerObject",
        "stripped_doc" : [
          "Stop observing the application; no further callbacks will be generated.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * This method does nothing if the observer is not currently running"
        ],
        "signature" : "hs._asm.axuielement.observer:stop() -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject",
          ""
        ],
        "name" : "stop",
        "desc" : "Stop observing the application; no further callbacks will be generated."
      },
      {
        "doc" : "Returns a table of the notifications currently registered with the observer.\n\nParameters:\n * `element` - an optional `hs._asm.axuielement` to return a list of registered notifications for.\n\nReturns:\n * a table containing the currently registered notifications\n\nNotes:\n * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.\n * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs._asm.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element.",
        "def" : "hs._asm.axuielement.observer:watching([element]) -> table",
        "stripped_doc" : [
          "Returns a table of the notifications currently registered with the observer.",
          ""
        ],
        "parameters" : [
          " * `element` - an optional `hs._asm.axuielement` to return a list of registered notifications for.",
          ""
        ],
        "notes" : [
          " * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.",
          " * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs._asm.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element."
        ],
        "signature" : "hs._asm.axuielement.observer:watching([element]) -> table",
        "type" : "Method",
        "returns" : [
          " * a table containing the currently registered notifications",
          ""
        ],
        "name" : "watching",
        "desc" : "Returns a table of the notifications currently registered with the observer."
      }
    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "Start observing the application and trigger callbacks for the elements and notifications assigned.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is already running",
        "def" : "hs._asm.axuielement.observer:start() -> observerObject",
        "stripped_doc" : [
          "Start observing the application and trigger callbacks for the elements and notifications assigned.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * This method does nothing if the observer is already running"
        ],
        "signature" : "hs._asm.axuielement.observer:start() -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject",
          ""
        ],
        "name" : "start",
        "desc" : "Start observing the application and trigger callbacks for the elements and notifications assigned."
      },
      {
        "doc" : "Stop observing the application; no further callbacks will be generated.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is not currently running",
        "def" : "hs._asm.axuielement.observer:stop() -> observerObject",
        "stripped_doc" : [
          "Stop observing the application; no further callbacks will be generated.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [
          " * This method does nothing if the observer is not currently running"
        ],
        "signature" : "hs._asm.axuielement.observer:stop() -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject",
          ""
        ],
        "name" : "stop",
        "desc" : "Stop observing the application; no further callbacks will be generated."
      },
      {
        "doc" : "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the observer is currently active.",
        "def" : "hs._asm.axuielement.observer:isRunning() -> boolean",
        "stripped_doc" : [
          "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.",
          ""
        ],
        "parameters" : [
          " * None",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.observer:isRunning() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the observer is currently active."
        ],
        "name" : "isRunning",
        "desc" : "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks."
      },
      {
        "doc" : "Get or set the callback for the observer.\n\nParameters:\n * `fn` - a function, or an explicit nil to remove, specifying the callback to the observer will invoke when the assigned elements generate notifications.\n\nReturns:\n * If an argument is provided, the observerObject; otherwise the current value.\n\nNotes:\n * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:\n   * the observerObject itself\n   * the `hs._asm.axuielement` object for the accessibility element which generated the notification\n   * a string specifying the specific notification which was received\n   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided.",
        "def" : "hs._asm.axuielement.observer:callback([fn | nil]) -> observerObject | fn | nil",
        "stripped_doc" : [
          "Get or set the callback for the observer.",
          ""
        ],
        "parameters" : [
          " * `fn` - a function, or an explicit nil to remove, specifying the callback to the observer will invoke when the assigned elements generate notifications.",
          ""
        ],
        "notes" : [
          " * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:",
          "   * the observerObject itself",
          "   * the `hs._asm.axuielement` object for the accessibility element which generated the notification",
          "   * a string specifying the specific notification which was received",
          "   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided."
        ],
        "signature" : "hs._asm.axuielement.observer:callback([fn | nil]) -> observerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the observerObject; otherwise the current value.",
          ""
        ],
        "name" : "callback",
        "desc" : "Get or set the callback for the observer."
      },
      {
        "doc" : "Registers the specified notification for the specified accesibility element with the observer.\n\nParameters:\n * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be registered\n\nNotes:\n * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.\n * if the specified element and notification string are already registered, this method does nothing.\n * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs._asm.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them.",
        "def" : "hs._asm.axuielement.observer:addWatcher(element, notification) -> observerObject",
        "stripped_doc" : [
          "Registers the specified notification for the specified accesibility element with the observer.",
          ""
        ],
        "parameters" : [
          " * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.",
          " * `notification` - a string specifying the notification.",
          ""
        ],
        "notes" : [
          " * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.",
          " * if the specified element and notification string are already registered, this method does nothing.",
          " * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs._asm.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them."
        ],
        "signature" : "hs._asm.axuielement.observer:addWatcher(element, notification) -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject; generates an error if watcher cannot be registered",
          ""
        ],
        "name" : "addWatcher",
        "desc" : "Registers the specified notification for the specified accesibility element with the observer."
      },
      {
        "doc" : "Unregisters the specified notification for the specified accessibility element from the observer.\n\nParameters:\n * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be unregistered\n\nNotes:\n * if the specified element and notification string are not currently registered with the observer, this method does nothing.",
        "def" : "hs._asm.axuielement.observer:removeWatcher(element, notification) -> observerObject",
        "stripped_doc" : [
          "Unregisters the specified notification for the specified accessibility element from the observer.",
          ""
        ],
        "parameters" : [
          " * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.",
          " * `notification` - a string specifying the notification.",
          ""
        ],
        "notes" : [
          " * if the specified element and notification string are not currently registered with the observer, this method does nothing."
        ],
        "signature" : "hs._asm.axuielement.observer:removeWatcher(element, notification) -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject; generates an error if watcher cannot be unregistered",
          ""
        ],
        "name" : "removeWatcher",
        "desc" : "Unregisters the specified notification for the specified accessibility element from the observer."
      },
      {
        "doc" : "Returns a table of the notifications currently registered with the observer.\n\nParameters:\n * `element` - an optional `hs._asm.axuielement` to return a list of registered notifications for.\n\nReturns:\n * a table containing the currently registered notifications\n\nNotes:\n * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.\n * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs._asm.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element.",
        "def" : "hs._asm.axuielement.observer:watching([element]) -> table",
        "stripped_doc" : [
          "Returns a table of the notifications currently registered with the observer.",
          ""
        ],
        "parameters" : [
          " * `element` - an optional `hs._asm.axuielement` to return a list of registered notifications for.",
          ""
        ],
        "notes" : [
          " * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.",
          " * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs._asm.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element."
        ],
        "signature" : "hs._asm.axuielement.observer:watching([element]) -> table",
        "type" : "Method",
        "returns" : [
          " * a table containing the currently registered notifications",
          ""
        ],
        "name" : "watching",
        "desc" : "Returns a table of the notifications currently registered with the observer."
      }
    ],
    "name" : "hs._asm.axuielement.observer"
  }
]
Menu Developer Updated: Contents
